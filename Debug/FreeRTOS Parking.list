
FreeRTOS Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08009260  08009260  00019260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800962c  0800962c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00007bcc  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007da8  20007da8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011c87  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cdc  00000000  00000000  00031ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  00034bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d51  00000000  00000000  00035cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000233f9  00000000  00000000  00036a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014281  00000000  00000000  00059e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d558c  00000000  00000000  0006e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000575c  00000000  00000000  00143630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00148d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009248 	.word	0x08009248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009248 	.word	0x08009248

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <_write+0x28>)
 8000ebc:	f002 fc69 	bl	8003792 <HAL_UART_Transmit>
    return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002d0 	.word	0x200002d0

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fcf7 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f83f 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fa0b 	bl	80012f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ee2:	f000 f8a3 	bl	800102c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f9dd 	bl	80012a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eea:	f000 f8ef 	bl	80010cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eee:	f000 f963 	bl	80011b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ef2:	4811      	ldr	r0, [pc, #68]	; (8000f38 <main+0x68>)
 8000ef4:	f001 fd60 	bl	80029b8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x6c>)
 8000efc:	f001 fe1e 	bl	8002b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <main+0x70>)
 8000f04:	f001 fe1a 	bl	8002b3c <HAL_TIM_PWM_Start>
  xTaskCreate(vRedLEDTask, "Red LED Task", 128 , NULL , 1 , &xRedLEDTaskHandle);
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <main+0x74>)
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <main+0x78>)
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <main+0x7c>)
 8000f18:	f003 ff32 	bl	8004d80 <xTaskCreate>
  xTaskCreate(vServoMotorTask, "Servo Motor Task", 128 , NULL , 1 , &xServoMotorTaskHandle);
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <main+0x80>)
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	490a      	ldr	r1, [pc, #40]	; (8000f54 <main+0x84>)
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <main+0x88>)
 8000f2c:	f003 ff28 	bl	8004d80 <xTaskCreate>
  vTaskStartScheduler();
 8000f30:	f004 f8b8 	bl	80050a4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <main+0x64>
 8000f36:	bf00      	nop
 8000f38:	200001f8 	.word	0x200001f8
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	20000288 	.word	0x20000288
 8000f44:	20000314 	.word	0x20000314
 8000f48:	08009260 	.word	0x08009260
 8000f4c:	080013e1 	.word	0x080013e1
 8000f50:	20000318 	.word	0x20000318
 8000f54:	08009270 	.word	0x08009270
 8000f58:	08001415 	.word	0x08001415

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fab4 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <SystemClock_Config+0xc8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <SystemClock_Config+0xc8>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <SystemClock_Config+0xc8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <SystemClock_Config+0xcc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <SystemClock_Config+0xcc>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <SystemClock_Config+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd0:	2348      	movs	r3, #72	; 0x48
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f841 	bl	8002068 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 fa3e 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f001 faa3 	bl	8002558 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001018:	f000 fa28 	bl	800146c <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_TIM1_Init+0x98>)
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <MX_TIM1_Init+0x9c>)
 800104c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001050:	2247      	movs	r2, #71	; 0x47
 8001052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM1_Init+0x98>)
 800105c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_TIM1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001076:	f001 fc4f 	bl	8002918 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001080:	f000 f9f4 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001092:	f001 fedd 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800109c:	f000 f9e6 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM1_Init+0x98>)
 80010ae:	f002 faa7 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 f9d8 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001f8 	.word	0x200001f8
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <MX_TIM2_Init+0xe8>)
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001102:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 150-1;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001106:	2295      	movs	r2, #149	; 0x95
 8001108:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_TIM2_Init+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001116:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_TIM2_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001124:	4823      	ldr	r0, [pc, #140]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001126:	f001 fbf7 	bl	8002918 <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001130:	f000 f99c 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113e:	4619      	mov	r1, r3
 8001140:	481c      	ldr	r0, [pc, #112]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001142:	f001 fe85 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800114c:	f000 f98e 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001152:	f001 fc99 	bl	8002a88 <HAL_TIM_PWM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800115c:	f000 f986 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001170:	f002 fa46 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800117a:	f000 f977 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	; 0x60
 8001180:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM2_Init+0xe8>)
 8001196:	f001 fd99 	bl	8002ccc <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011a0:	f000 f964 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM2_Init+0xe8>)
 80011a6:	f000 f9db 	bl	8001560 <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3738      	adds	r7, #56	; 0x38
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000240 	.word	0x20000240

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_TIM3_Init+0xe4>)
 80011ea:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <MX_TIM3_Init+0xe8>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150-1;
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MX_TIM3_Init+0xe4>)
 80011f0:	2295      	movs	r2, #149	; 0x95
 80011f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <MX_TIM3_Init+0xe4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM3_Init+0xe4>)
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_TIM3_Init+0xe4>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_TIM3_Init+0xe4>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_TIM3_Init+0xe4>)
 8001210:	f001 fb82 	bl	8002918 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800121a:	f000 f927 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4619      	mov	r1, r3
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_TIM3_Init+0xe4>)
 800122c:	f001 fe10 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001236:	f000 f919 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM3_Init+0xe4>)
 800123c:	f001 fc24 	bl	8002a88 <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001246:	f000 f911 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	4619      	mov	r1, r3
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <MX_TIM3_Init+0xe4>)
 800125a:	f002 f9d1 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001264:	f000 f902 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001268:	2360      	movs	r3, #96	; 0x60
 800126a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM3_Init+0xe4>)
 8001280:	f001 fd24 	bl	8002ccc <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800128a:	f000 f8ef 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM3_Init+0xe4>)
 8001290:	f000 f966 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000288 	.word	0x20000288
 80012a0:	40000400 	.word	0x40000400

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART2_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f002 fa0c 	bl	80036f8 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f8c1 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002d0 	.word	0x200002d0
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_GPIO_Init+0xdc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xdc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xdc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0xe0>)
 8001368:	f000 fe64 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_GPIO_Init+0xe4>)
 8001374:	f000 fe5e 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001378:	2301      	movs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0xe0>)
 8001390:	f000 fc9c 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_GPIO_Init+0xe4>)
 80013aa:	f000 fc8f 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_GPIO_Init+0xe4>)
 80013c8:	f000 fc80 	bl	8001ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020c00 	.word	0x40020c00

080013e0 <vRedLEDTask>:

/* USER CODE BEGIN 4 */
void vRedLEDTask(void *pvParameters){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	for(;;){
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_13)==1){
 80013e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <vRedLEDTask+0x2c>)
 80013ee:	f000 fe09 	bl	8002004 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d104      	bne.n	8001402 <vRedLEDTask+0x22>
			TIM3->CCR1 = 650;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <vRedLEDTask+0x30>)
 80013fa:	f240 228a 	movw	r2, #650	; 0x28a
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001400:	e7f2      	b.n	80013e8 <vRedLEDTask+0x8>
			//printf("Entrez! \n");
			//HAL_Delay(1000);
		}
		else{
			TIM3->CCR1 = 300;
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <vRedLEDTask+0x30>)
 8001404:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_13)==1){
 800140a:	e7ed      	b.n	80013e8 <vRedLEDTask+0x8>
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40000400 	.word	0x40000400

08001414 <vServoMotorTask>:
		}
	}


}
void vServoMotorTask(void *pvParameters){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	for(;;){
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==1){
 800141c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <vServoMotorTask+0x4c>)
 8001422:	f000 fdef 	bl	8002004 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10c      	bne.n	8001446 <vServoMotorTask+0x32>
			TIM2->CCR1 = 650;
 800142c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001430:	f240 228a 	movw	r2, #650	; 0x28a
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
			printf("7\n");
 8001436:	480b      	ldr	r0, [pc, #44]	; (8001464 <vServoMotorTask+0x50>)
 8001438:	f005 ff6e 	bl	8007318 <puts>
			vTaskDelay( 1000* configTICK_RATE_HZ /1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f003 fdfc 	bl	800503c <vTaskDelay>
 8001444:	e7ea      	b.n	800141c <vServoMotorTask+0x8>
		}
		else{
			TIM2->CCR1 = 300;
 8001446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
			printf("6\n");
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <vServoMotorTask+0x54>)
 8001452:	f005 ff61 	bl	8007318 <puts>
			vTaskDelay( 1000* configTICK_RATE_HZ /1000);
 8001456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145a:	f003 fdef 	bl	800503c <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14)==1){
 800145e:	e7dd      	b.n	800141c <vServoMotorTask+0x8>
 8001460:	40020c00 	.word	0x40020c00
 8001464:	08009284 	.word	0x08009284
 8001468:	08009288 	.word	0x08009288

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_TIM_Base_MspInit+0x8c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10e      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014f6:	e026      	b.n	8001546 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d10e      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
}
 800151e:	e012      	b.n	8001546 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800
 800155c:	40000400 	.word	0x40000400

08001560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001580:	d11e      	bne.n	80015c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800159e:	2320      	movs	r3, #32
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ae:	2301      	movs	r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <HAL_TIM_MspPostInit+0xb4>)
 80015ba:	f000 fb87 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015be:	e022      	b.n	8001606 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_TIM_MspPostInit+0xb8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11d      	bne.n	8001606 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f6:	2302      	movs	r3, #2
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <HAL_TIM_MspPostInit+0xb4>)
 8001602:	f000 fb63 	bl	8001ccc <HAL_GPIO_Init>
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40000400 	.word	0x40000400

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_UART_MspInit+0x94>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d133      	bne.n	80016a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_UART_MspInit+0x98>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0x98>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_UART_MspInit+0x98>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_UART_MspInit+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0x98>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001676:	230c      	movs	r3, #12
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001686:	2307      	movs	r3, #7
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <HAL_UART_MspInit+0x9c>)
 8001692:	f000 fb1b 	bl	8001ccc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2026      	movs	r0, #38	; 0x26
 800169c:	f000 fa4d 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a0:	2026      	movs	r0, #38	; 0x26
 80016a2:	f000 fa66 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <USART2_IRQHandler+0x10>)
 80016ee:	f002 f8e3 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200002d0 	.word	0x200002d0

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f005 ff31 	bl	800757c <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:
  }
  return len;
}

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
  return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f005 feb2 	bl	800757c <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20020000 	.word	0x20020000
 8001844:	00000400 	.word	0x00000400
 8001848:	2000031c 	.word	0x2000031c
 800184c:	20007da8 	.word	0x20007da8

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187a:	490e      	ldr	r1, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001890:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189e:	f7ff ffd7 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 fe71 	bl	8007588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fb13 	bl	8000ed0 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018b8:	08009634 	.word	0x08009634
  ldr r2, =_sbss
 80018bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018c0:	20007da8 	.word	0x20007da8

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f917 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fdbc 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f92f 	bl	8001b8e <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f8f7 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000000 	.word	0x20000000
 8001964:	20000008 	.word	0x20000008
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000320 	.word	0x20000320

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff feda 	bl	800196c <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d008      	beq.n	8001bd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e052      	b.n	8001c7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0216 	bic.w	r2, r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <HAL_DMA_Abort+0x62>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0208 	bic.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	e013      	b.n	8001c52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2a:	f7ff fe9f 	bl	800196c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d90c      	bls.n	8001c52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e015      	b.n	8001c7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e4      	bne.n	8001c2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	223f      	movs	r2, #63	; 0x3f
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e00c      	b.n	8001cbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e16b      	b.n	8001fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 815a 	bne.w	8001fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80b4 	beq.w	8001fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02b      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x222>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x21e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x32c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_GPIO_Init+0x330>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00e      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae90 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e267      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d075      	beq.n	8002172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d00c      	beq.n	80020ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d112      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05b      	beq.n	8002170 <HAL_RCC_OscConfig+0x108>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d157      	bne.n	8002170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e242      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d106      	bne.n	80020dc <HAL_RCC_OscConfig+0x74>
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xb0>
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a65      	ldr	r2, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fc24 	bl	800196c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fc20 	bl	800196c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e207      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5b      	ldr	r3, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xc0>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc10 	bl	800196c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fc0c 	bl	800196c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1f3      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0xe8>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217e:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1c7      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_OscConfig+0x244>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff fbc5 	bl	800196c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff fbc1 	bl	800196c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1a8      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4925      	ldr	r1, [pc, #148]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x244>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fba4 	bl	800196c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff fba0 	bl	800196c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e187      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d036      	beq.n	80022c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0x248>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff fb84 	bl	800196c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff fb80 	bl	800196c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e167      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x240>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x200>
 8002286:	e01b      	b.n	80022c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x248>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb6d 	bl	800196c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e00e      	b.n	80022b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7ff fb69 	bl	800196c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d907      	bls.n	80022b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e150      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	42470000 	.word	0x42470000
 80022b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ea      	bne.n	8002296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8097 	beq.w	80023fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b7d      	ldr	r3, [pc, #500]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a7c      	ldr	r2, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b7a      	ldr	r3, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b77      	ldr	r3, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b74      	ldr	r3, [pc, #464]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a73      	ldr	r2, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff fb29 	bl	800196c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7ff fb25 	bl	800196c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e10c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x474>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x2ea>
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a63      	ldr	r2, [pc, #396]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x30c>
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4a5b      	ldr	r2, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	; 0x70
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0x324>
 8002374:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7ff faea 	bl	800196c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff fae6 	bl	800196c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0cb      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ee      	beq.n	800239c <HAL_RCC_OscConfig+0x334>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fad4 	bl	800196c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff fad0 	bl	800196c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0b5      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ee      	bne.n	80023c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a1 	beq.w	8002548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d05c      	beq.n	80024cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d141      	bne.n	800249e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff faa4 	bl	800196c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff faa0 	bl	800196c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e087      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	491b      	ldr	r1, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff fa79 	bl	800196c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff fa75 	bl	800196c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e05c      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x416>
 800249c:	e054      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_OscConfig+0x478>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa62 	bl	800196c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fa5e 	bl	800196c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e045      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x470>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e038      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d028      	beq.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d121      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800251a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cc      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b68      	ldr	r3, [pc, #416]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b65      	ldr	r3, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d119      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	2b03      	cmp	r3, #3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e067      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4934      	ldr	r1, [pc, #208]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff f990 	bl	800196c <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff f98c 	bl	800196c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20c      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f904 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	0800929c 	.word	0x0800929c
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b090      	sub	sp, #64	; 0x40
 800272a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
 8002730:	2300      	movs	r3, #0
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d00d      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 8002748:	2b08      	cmp	r3, #8
 800274a:	f200 80a1 	bhi.w	8002890 <HAL_RCC_GetSysClockFreq+0x16c>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x34>
 8002752:	2b04      	cmp	r3, #4
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x3a>
 8002756:	e09b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800275c:	e09b      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275e:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002762:	e098      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	2200      	movs	r2, #0
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	627a      	str	r2, [r7, #36]	; 0x24
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800278c:	2100      	movs	r1, #0
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002790:	fb03 f201 	mul.w	r2, r3, r1
 8002794:	2300      	movs	r3, #0
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	4413      	add	r3, r2
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_RCC_GetSysClockFreq+0x188>)
 800279e:	fba0 1202 	umull	r1, r2, r0, r2
 80027a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a4:	460a      	mov	r2, r1
 80027a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	4413      	add	r3, r2
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	2200      	movs	r2, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	61fa      	str	r2, [r7, #28]
 80027b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027be:	f7fe f9f3 	bl	8000ba8 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4613      	mov	r3, r2
 80027c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ca:	e053      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	617a      	str	r2, [r7, #20]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027de:	f04f 0b00 	mov.w	fp, #0
 80027e2:	4652      	mov	r2, sl
 80027e4:	465b      	mov	r3, fp
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f4:	0150      	lsls	r0, r2, #5
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	ebb2 080a 	subs.w	r8, r2, sl
 80027fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800280e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002816:	ebb2 0408 	subs.w	r4, r2, r8
 800281a:	eb63 0509 	sbc.w	r5, r3, r9
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	00eb      	lsls	r3, r5, #3
 8002828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282c:	00e2      	lsls	r2, r4, #3
 800282e:	4614      	mov	r4, r2
 8002830:	461d      	mov	r5, r3
 8002832:	eb14 030a 	adds.w	r3, r4, sl
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	eb45 030b 	adc.w	r3, r5, fp
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284a:	4629      	mov	r1, r5
 800284c:	028b      	lsls	r3, r1, #10
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002854:	4621      	mov	r1, r4
 8002856:	028a      	lsls	r2, r1, #10
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	2200      	movs	r2, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002868:	f7fe f99e 	bl	8000ba8 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002898:	4618      	mov	r0, r3
 800289a:	3740      	adds	r7, #64	; 0x40
 800289c:	46bd      	mov	sp, r7
 800289e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	017d7840 	.word	0x017d7840

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	080092ac 	.word	0x080092ac

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffdc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	080092ac 	.word	0x080092ac

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fdc2 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fb42 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e046      	b.n	8002a5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_TIM_Base_Start+0xb4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d01d      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_TIM_Base_Start+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_Base_Start+0xbc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_TIM_Base_Start+0xc0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_TIM_Base_Start+0xc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_Start+0xc8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_Base_Start+0x70>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_TIM_Base_Start+0xcc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d010      	beq.n	8002a5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	e007      	b.n	8002a5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40010400 	.word	0x40010400
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40001800 	.word	0x40001800

08002a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e041      	b.n	8002b1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f839 	bl	8002b26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fa8a 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_TIM_PWM_Start+0x24>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e022      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d109      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x3e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e015      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start+0x58>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e008      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07c      	b.n	8002ca8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x82>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	e013      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_PWM_Start+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	e00b      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Start+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	e003      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fce0 	bl	80035b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <HAL_TIM_PWM_Start+0x174>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_PWM_Start+0xcc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <HAL_TIM_PWM_Start+0x178>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_PWM_Start+0xd0>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_TIM_PWM_Start+0xd2>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <HAL_TIM_PWM_Start+0x174>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d01d      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_TIM_PWM_Start+0x17c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_TIM_PWM_Start+0x180>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_TIM_PWM_Start+0x184>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_TIM_PWM_Start+0x178>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_TIM_PWM_Start+0x188>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x136>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_TIM_PWM_Start+0x18c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d111      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d010      	beq.n	8002ca6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c94:	e007      	b.n	8002ca6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40001800 	.word	0x40001800

08002ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0ae      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	f200 809f 	bhi.w	8002e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002e39 	.word	0x08002e39
 8002d08:	08002e39 	.word	0x08002e39
 8002d0c:	08002e39 	.word	0x08002e39
 8002d10:	08002d75 	.word	0x08002d75
 8002d14:	08002e39 	.word	0x08002e39
 8002d18:	08002e39 	.word	0x08002e39
 8002d1c:	08002e39 	.word	0x08002e39
 8002d20:	08002db7 	.word	0x08002db7
 8002d24:	08002e39 	.word	0x08002e39
 8002d28:	08002e39 	.word	0x08002e39
 8002d2c:	08002e39 	.word	0x08002e39
 8002d30:	08002df7 	.word	0x08002df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f9f0 	bl	8003120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	619a      	str	r2, [r3, #24]
      break;
 8002d72:	e064      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa40 	bl	8003200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6999      	ldr	r1, [r3, #24]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
      break;
 8002db4:	e043      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa95 	bl	80032ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0208 	orr.w	r2, r2, #8
 8002dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0204 	bic.w	r2, r2, #4
 8002de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69d9      	ldr	r1, [r3, #28]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
      break;
 8002df4:	e023      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fae9 	bl	80033d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	61da      	str	r2, [r3, #28]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0b4      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x186>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea4:	d03e      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	f200 8087 	bhi.w	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_TIM_ConfigClockSource+0x172>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d87f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d01a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d87b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d050      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x11a>
 8002ec8:	2b60      	cmp	r3, #96	; 0x60
 8002eca:	d877      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d03c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xfa>
 8002ed0:	2b50      	cmp	r3, #80	; 0x50
 8002ed2:	d873      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d058      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x13a>
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d86f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d064      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	2b30      	cmp	r3, #48	; 0x30
 8002ee2:	d86b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d060      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d867      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05c      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d05a      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	e062      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f000 fb35 	bl	8003574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
      break;
 8002f22:	e04f      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f000 fb1e 	bl	8003574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	609a      	str	r2, [r3, #8]
      break;
 8002f48:	e03c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 fa92 	bl	8003480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2150      	movs	r1, #80	; 0x50
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 faeb 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 8002f68:	e02c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 fab1 	bl	80034de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2160      	movs	r1, #96	; 0x60
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fadb 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 8002f88:	e01c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 fa72 	bl	8003480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 facb 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e00c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f000 fac2 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d00f      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <TIM_Base_SetConfig+0x118>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <TIM_Base_SetConfig+0x11c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <TIM_Base_SetConfig+0x120>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <TIM_Base_SetConfig+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d027      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <TIM_Base_SetConfig+0x118>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d023      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <TIM_Base_SetConfig+0x11c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <TIM_Base_SetConfig+0x120>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a29      	ldr	r2, [pc, #164]	; (8003104 <TIM_Base_SetConfig+0x124>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d017      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <TIM_Base_SetConfig+0x128>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <TIM_Base_SetConfig+0x12c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a26      	ldr	r2, [pc, #152]	; (8003110 <TIM_Base_SetConfig+0x130>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a25      	ldr	r2, [pc, #148]	; (8003114 <TIM_Base_SetConfig+0x134>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a24      	ldr	r2, [pc, #144]	; (8003118 <TIM_Base_SetConfig+0x138>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a23      	ldr	r2, [pc, #140]	; (800311c <TIM_Base_SetConfig+0x13c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0xf8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <TIM_Base_SetConfig+0x124>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40010400 	.word	0x40010400
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400
 8003110:	40014800 	.word	0x40014800
 8003114:	40001800 	.word	0x40001800
 8003118:	40001c00 	.word	0x40001c00
 800311c:	40002000 	.word	0x40002000

08003120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 0302 	bic.w	r3, r3, #2
 8003168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <TIM_OC1_SetConfig+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_OC1_SetConfig+0x64>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <TIM_OC1_SetConfig+0xdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10c      	bne.n	800319e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0308 	bic.w	r3, r3, #8
 800318a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <TIM_OC1_SetConfig+0xd8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_OC1_SetConfig+0x8e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC1_SetConfig+0xdc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d111      	bne.n	80031d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40010400 	.word	0x40010400

08003200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0210 	bic.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0320 	bic.w	r3, r3, #32
 800324a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <TIM_OC2_SetConfig+0xe4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_OC2_SetConfig+0x68>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10d      	bne.n	8003284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <TIM_OC2_SetConfig+0xe4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_OC2_SetConfig+0x94>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d113      	bne.n	80032bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800329a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40010400 	.word	0x40010400

080032ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <TIM_OC3_SetConfig+0xe0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_OC3_SetConfig+0x66>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <TIM_OC3_SetConfig+0xe4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10d      	bne.n	800336e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a16      	ldr	r2, [pc, #88]	; (80033cc <TIM_OC3_SetConfig+0xe0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_OC3_SetConfig+0x92>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <TIM_OC3_SetConfig+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40010400 	.word	0x40010400

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <TIM_OC4_SetConfig+0xa4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC4_SetConfig+0x68>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a11      	ldr	r2, [pc, #68]	; (800347c <TIM_OC4_SetConfig+0xa8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d109      	bne.n	8003450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400

08003480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 030a 	bic.w	r3, r3, #10
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034de:	b480      	push	{r7}
 80034e0:	b087      	sub	sp, #28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0210 	bic.w	r2, r3, #16
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	f043 0307 	orr.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	431a      	orrs	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2201      	movs	r2, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e05a      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d01d      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40001800 	.word	0x40001800

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e03f      	b.n	800378a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd ff7c 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fd7b 	bl	8004238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08a      	sub	sp, #40	; 0x28
 8003796:	af02      	add	r7, sp, #8
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d17c      	bne.n	80038ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_Transmit+0x2c>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e075      	b.n	80038ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Transmit+0x3e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e06e      	b.n	80038ae <HAL_UART_Transmit+0x11c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e6:	f7fe f8c1 	bl	800196c <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d108      	bne.n	8003814 <HAL_UART_Transmit+0x82>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e003      	b.n	800381c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003824:	e02a      	b.n	800387c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 faf9 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e036      	b.n	80038ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3302      	adds	r3, #2
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e007      	b.n	800386e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1cf      	bne.n	8003826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fac9 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0ba      	sub	sp, #232	; 0xe8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_UART_IRQHandler+0x66>
 800390a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fbd3 	bl	80040c2 <UART_Receive_IT>
      return;
 800391c:	e256      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800391e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80de 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x22c>
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80d1 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_UART_IRQHandler+0xae>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_UART_IRQHandler+0xd2>
 8003972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0202 	orr.w	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_UART_IRQHandler+0xf6>
 8003996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0204 	orr.w	r2, r3, #4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_UART_IRQHandler+0x126>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0208 	orr.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 81ed 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14e>
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb5e 	bl	80040c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_UART_IRQHandler+0x17a>
 8003a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04f      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa66 	bl	8003f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d141      	bne.n	8003aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1d9      	bne.n	8003a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d013      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	4a7d      	ldr	r2, [pc, #500]	; (8003c94 <HAL_UART_IRQHandler+0x3dc>)
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f8ed 	bl	8001c86 <HAL_DMA_Abort_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e00e      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f99a 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e00a      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f996 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	e006      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f992 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ade:	e170      	b.n	8003dc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	bf00      	nop
    return;
 8003ae2:	e16e      	b.n	8003dc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 814a 	bne.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8143 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 813c 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	f040 80b4 	bne.w	8003c98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8140 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	f080 8139 	bcs.w	8003dc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	f000 8088 	beq.w	8003c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1d9      	bne.n	8003b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e1      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e3      	bne.n	8003c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd ff96 	bl	8001ba6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8c0 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c90:	e099      	b.n	8003dc6 <HAL_UART_IRQHandler+0x50e>
 8003c92:	bf00      	nop
 8003c94:	08003fcb 	.word	0x08003fcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808b 	beq.w	8003dca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8086 	beq.w	8003dca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e3      	bne.n	8003cbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	623b      	str	r3, [r7, #32]
   return(result);
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e3      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0310 	bic.w	r3, r3, #16
 8003d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e3      	bne.n	8003d3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f848 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d80:	e023      	b.n	8003dca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4ea>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f929 	bl	8003ff2 <UART_Transmit_IT>
    return;
 8003da0:	e014      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <HAL_UART_IRQHandler+0x514>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f969 	bl	8004092 <UART_EndTransmit_IT>
    return;
 8003dc0:	e004      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
    return;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
      return;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
      return;
 8003dca:	bf00      	nop
  }
}
 8003dcc:	37e8      	adds	r7, #232	; 0xe8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b090      	sub	sp, #64	; 0x40
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	e050      	b.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d04c      	beq.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e48:	f7fd fd90 	bl	800196c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d241      	bcs.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e78:	637a      	str	r2, [r7, #52]	; 0x34
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3314      	adds	r3, #20
 8003e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eac:	623a      	str	r2, [r7, #32]
 8003eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69f9      	ldr	r1, [r7, #28]
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e00f      	b.n	8003efc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d09f      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3740      	adds	r7, #64	; 0x40
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b095      	sub	sp, #84	; 0x54
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d119      	bne.n	8003fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f023 0310 	bic.w	r3, r3, #16
 8003f92:	647b      	str	r3, [r7, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f9c:	61ba      	str	r2, [r7, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fbe:	bf00      	nop
 8003fc0:	3754      	adds	r7, #84	; 0x54
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff09 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b21      	cmp	r3, #33	; 0x21
 8004004:	d13e      	bne.n	8004084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d114      	bne.n	800403a <UART_Transmit_IT+0x48>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d110      	bne.n	800403a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	621a      	str	r2, [r3, #32]
 8004038:	e008      	b.n	800404c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	1c59      	adds	r1, r3, #1
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6211      	str	r1, [r2, #32]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800406e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fe8e 	bl	8003dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b08c      	sub	sp, #48	; 0x30
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b22      	cmp	r3, #34	; 0x22
 80040d4:	f040 80ab 	bne.w	800422e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d117      	bne.n	8004112 <UART_Receive_IT+0x50>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d113      	bne.n	8004112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004100:	b29a      	uxth	r2, r3
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
 8004110:	e026      	b.n	8004160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d007      	beq.n	8004136 <UART_Receive_IT+0x74>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <UART_Receive_IT+0x82>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e008      	b.n	8004156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004150:	b2da      	uxtb	r2, r3
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004170:	2b00      	cmp	r3, #0
 8004172:	d15a      	bne.n	800422a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0220 	bic.w	r2, r2, #32
 8004182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d135      	bne.n	8004220 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f023 0310 	bic.w	r3, r3, #16
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	623a      	str	r2, [r7, #32]
 80041dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	69f9      	ldr	r1, [r7, #28]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d10a      	bne.n	8004212 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fdf9 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
 800421e:	e002      	b.n	8004226 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fde1 	bl	8003de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e002      	b.n	8004230 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3730      	adds	r7, #48	; 0x30
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b0c0      	sub	sp, #256	; 0x100
 800423e:	af00      	add	r7, sp, #0
 8004240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	68d9      	ldr	r1, [r3, #12]
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	ea40 0301 	orr.w	r3, r0, r1
 8004260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004290:	f021 010c 	bic.w	r1, r1, #12
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800429e:	430b      	orrs	r3, r1
 80042a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	6999      	ldr	r1, [r3, #24]
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	ea40 0301 	orr.w	r3, r0, r1
 80042be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b8f      	ldr	r3, [pc, #572]	; (8004504 <UART_SetConfig+0x2cc>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0xa0>
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b8d      	ldr	r3, [pc, #564]	; (8004508 <UART_SetConfig+0x2d0>)
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d104      	bne.n	80042e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe fb0a 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80042dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e0:	e003      	b.n	80042ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e2:	f7fe faf1 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 80042e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	f040 810c 	bne.w	8004510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	1891      	adds	r1, r2, r2
 8004310:	65b9      	str	r1, [r7, #88]	; 0x58
 8004312:	415b      	adcs	r3, r3
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800431a:	4621      	mov	r1, r4
 800431c:	eb12 0801 	adds.w	r8, r2, r1
 8004320:	4629      	mov	r1, r5
 8004322:	eb43 0901 	adc.w	r9, r3, r1
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433a:	4690      	mov	r8, r2
 800433c:	4699      	mov	r9, r3
 800433e:	4623      	mov	r3, r4
 8004340:	eb18 0303 	adds.w	r3, r8, r3
 8004344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004348:	462b      	mov	r3, r5
 800434a:	eb49 0303 	adc.w	r3, r9, r3
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800435e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004366:	460b      	mov	r3, r1
 8004368:	18db      	adds	r3, r3, r3
 800436a:	653b      	str	r3, [r7, #80]	; 0x50
 800436c:	4613      	mov	r3, r2
 800436e:	eb42 0303 	adc.w	r3, r2, r3
 8004372:	657b      	str	r3, [r7, #84]	; 0x54
 8004374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800437c:	f7fc fc14 	bl	8000ba8 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <UART_SetConfig+0x2d4>)
 8004386:	fba3 2302 	umull	r2, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	011c      	lsls	r4, r3, #4
 800438e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800439c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	1891      	adds	r1, r2, r2
 80043a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80043a8:	415b      	adcs	r3, r3
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b0:	4641      	mov	r1, r8
 80043b2:	eb12 0a01 	adds.w	sl, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0b01 	adc.w	fp, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d0:	4692      	mov	sl, r2
 80043d2:	469b      	mov	fp, r3
 80043d4:	4643      	mov	r3, r8
 80043d6:	eb1a 0303 	adds.w	r3, sl, r3
 80043da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043de:	464b      	mov	r3, r9
 80043e0:	eb4b 0303 	adc.w	r3, fp, r3
 80043e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043fc:	460b      	mov	r3, r1
 80043fe:	18db      	adds	r3, r3, r3
 8004400:	643b      	str	r3, [r7, #64]	; 0x40
 8004402:	4613      	mov	r3, r2
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	647b      	str	r3, [r7, #68]	; 0x44
 800440a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800440e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004412:	f7fc fbc9 	bl	8000ba8 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4611      	mov	r1, r2
 800441c:	4b3b      	ldr	r3, [pc, #236]	; (800450c <UART_SetConfig+0x2d4>)
 800441e:	fba3 2301 	umull	r2, r3, r3, r1
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <UART_SetConfig+0x2d4>)
 8004434:	fba3 2302 	umull	r2, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004440:	441c      	add	r4, r3
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800444c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	63b9      	str	r1, [r7, #56]	; 0x38
 800445c:	415b      	adcs	r3, r3
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004464:	4641      	mov	r1, r8
 8004466:	1851      	adds	r1, r2, r1
 8004468:	6339      	str	r1, [r7, #48]	; 0x30
 800446a:	4649      	mov	r1, r9
 800446c:	414b      	adcs	r3, r1
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800447c:	4659      	mov	r1, fp
 800447e:	00cb      	lsls	r3, r1, #3
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004486:	4651      	mov	r1, sl
 8004488:	00ca      	lsls	r2, r1, #3
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	4603      	mov	r3, r0
 8004490:	4642      	mov	r2, r8
 8004492:	189b      	adds	r3, r3, r2
 8004494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004498:	464b      	mov	r3, r9
 800449a:	460a      	mov	r2, r1
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044b8:	460b      	mov	r3, r1
 80044ba:	18db      	adds	r3, r3, r3
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044be:	4613      	mov	r3, r2
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ce:	f7fc fb6b 	bl	8000ba8 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <UART_SetConfig+0x2d4>)
 80044d8:	fba3 1302 	umull	r1, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	2164      	movs	r1, #100	; 0x64
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3332      	adds	r3, #50	; 0x32
 80044ea:	4a08      	ldr	r2, [pc, #32]	; (800450c <UART_SetConfig+0x2d4>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4422      	add	r2, r4
 80044fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004500:	e106      	b.n	8004710 <UART_SetConfig+0x4d8>
 8004502:	bf00      	nop
 8004504:	40011000 	.word	0x40011000
 8004508:	40011400 	.word	0x40011400
 800450c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800451a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800451e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004522:	4642      	mov	r2, r8
 8004524:	464b      	mov	r3, r9
 8004526:	1891      	adds	r1, r2, r2
 8004528:	6239      	str	r1, [r7, #32]
 800452a:	415b      	adcs	r3, r3
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004532:	4641      	mov	r1, r8
 8004534:	1854      	adds	r4, r2, r1
 8004536:	4649      	mov	r1, r9
 8004538:	eb43 0501 	adc.w	r5, r3, r1
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004558:	464b      	mov	r3, r9
 800455a:	eb45 0303 	adc.w	r3, r5, r3
 800455e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800456e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800457e:	4629      	mov	r1, r5
 8004580:	008b      	lsls	r3, r1, #2
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004588:	4621      	mov	r1, r4
 800458a:	008a      	lsls	r2, r1, #2
 800458c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004590:	f7fc fb0a 	bl	8000ba8 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4b60      	ldr	r3, [pc, #384]	; (800471c <UART_SetConfig+0x4e4>)
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	011c      	lsls	r4, r3, #4
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	1891      	adds	r1, r2, r2
 80045ba:	61b9      	str	r1, [r7, #24]
 80045bc:	415b      	adcs	r3, r3
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c4:	4641      	mov	r1, r8
 80045c6:	1851      	adds	r1, r2, r1
 80045c8:	6139      	str	r1, [r7, #16]
 80045ca:	4649      	mov	r1, r9
 80045cc:	414b      	adcs	r3, r1
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045dc:	4659      	mov	r1, fp
 80045de:	00cb      	lsls	r3, r1, #3
 80045e0:	4651      	mov	r1, sl
 80045e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e6:	4651      	mov	r1, sl
 80045e8:	00ca      	lsls	r2, r1, #3
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	4603      	mov	r3, r0
 80045f0:	4642      	mov	r2, r8
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f8:	464b      	mov	r3, r9
 80045fa:	460a      	mov	r2, r1
 80045fc:	eb42 0303 	adc.w	r3, r2, r3
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	67bb      	str	r3, [r7, #120]	; 0x78
 800460e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800461c:	4649      	mov	r1, r9
 800461e:	008b      	lsls	r3, r1, #2
 8004620:	4641      	mov	r1, r8
 8004622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004626:	4641      	mov	r1, r8
 8004628:	008a      	lsls	r2, r1, #2
 800462a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800462e:	f7fc fabb 	bl	8000ba8 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4611      	mov	r1, r2
 8004638:	4b38      	ldr	r3, [pc, #224]	; (800471c <UART_SetConfig+0x4e4>)
 800463a:	fba3 2301 	umull	r2, r3, r3, r1
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2264      	movs	r2, #100	; 0x64
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	1acb      	subs	r3, r1, r3
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	3332      	adds	r3, #50	; 0x32
 800464c:	4a33      	ldr	r2, [pc, #204]	; (800471c <UART_SetConfig+0x4e4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004658:	441c      	add	r4, r3
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
 8004662:	677a      	str	r2, [r7, #116]	; 0x74
 8004664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	415b      	adcs	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004678:	4641      	mov	r1, r8
 800467a:	1851      	adds	r1, r2, r1
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	4649      	mov	r1, r9
 8004680:	414b      	adcs	r3, r1
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004690:	4659      	mov	r1, fp
 8004692:	00cb      	lsls	r3, r1, #3
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469a:	4651      	mov	r1, sl
 800469c:	00ca      	lsls	r2, r1, #3
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	4642      	mov	r2, r8
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046aa:	464b      	mov	r3, r9
 80046ac:	460a      	mov	r2, r1
 80046ae:	eb42 0303 	adc.w	r3, r2, r3
 80046b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	663b      	str	r3, [r7, #96]	; 0x60
 80046be:	667a      	str	r2, [r7, #100]	; 0x64
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046cc:	4649      	mov	r1, r9
 80046ce:	008b      	lsls	r3, r1, #2
 80046d0:	4641      	mov	r1, r8
 80046d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d6:	4641      	mov	r1, r8
 80046d8:	008a      	lsls	r2, r1, #2
 80046da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046de:	f7fc fa63 	bl	8000ba8 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <UART_SetConfig+0x4e4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <UART_SetConfig+0x4e4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4422      	add	r2, r4
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004716:	46bd      	mov	sp, r7
 8004718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f103 0208 	add.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f103 0208 	add.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0208 	add.w	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d103      	bne.n	800479a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e00c      	b.n	80047b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3308      	adds	r3, #8
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e002      	b.n	80047a8 <vListInsert+0x2e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d2f6      	bcs.n	80047a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6852      	ldr	r2, [r2, #4]
 800480c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d103      	bne.n	8004820 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800484a:	2301      	movs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05d      	beq.n	8004930 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	d059      	beq.n	8004930 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	2100      	movs	r1, #0
 8004886:	fba3 2302 	umull	r2, r3, r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d000      	beq.n	8004890 <xQueueGenericReset+0x50>
 800488e:	2101      	movs	r1, #1
 8004890:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004892:	2b00      	cmp	r3, #0
 8004894:	d14c      	bne.n	8004930 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004896:	f001 fd2f 	bl	80062f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	6939      	ldr	r1, [r7, #16]
 80048a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	441a      	add	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2200      	movs	r2, #0
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	3b01      	subs	r3, #1
 80048c8:	6939      	ldr	r1, [r7, #16]
 80048ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	441a      	add	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	22ff      	movs	r2, #255	; 0xff
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	22ff      	movs	r2, #255	; 0xff
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d114      	bne.n	8004916 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01a      	beq.n	800492a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3310      	adds	r3, #16
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 ff1b 	bl	8005734 <xTaskRemoveFromEventList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <xQueueGenericReset+0x11c>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	e009      	b.n	800492a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	3310      	adds	r3, #16
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff00 	bl	8004720 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3324      	adds	r3, #36	; 0x24
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fefb 	bl	8004720 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800492a:	f001 fd15 	bl	8006358 <vPortExitCritical>
 800492e:	e001      	b.n	8004934 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xQueueGenericReset+0x110>
        __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60bb      	str	r3, [r7, #8]
    }
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02e      	beq.n	80049d6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004978:	2100      	movs	r1, #0
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	fba3 2302 	umull	r2, r3, r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d000      	beq.n	8004988 <xQueueGenericCreate+0x28>
 8004986:	2101      	movs	r1, #1
 8004988:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	d123      	bne.n	80049d6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004996:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800499a:	d81c      	bhi.n	80049d6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3348      	adds	r3, #72	; 0x48
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fd7e 	bl	80064ac <pvPortMalloc>
 80049b0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01c      	beq.n	80049f2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3348      	adds	r3, #72	; 0x48
 80049c0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049c2:	79fa      	ldrb	r2, [r7, #7]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f814 	bl	80049fc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80049d4:	e00d      	b.n	80049f2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xQueueGenericCreate+0x92>
        __asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	613b      	str	r3, [r7, #16]
    }
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80049f2:	69fb      	ldr	r3, [r7, #28]
    }
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	69b8      	ldr	r0, [r7, #24]
 8004a2e:	f7ff ff07 	bl	8004840 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	; 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <xQueueReceive+0x30>
        __asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	623b      	str	r3, [r7, #32]
    }
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <xQueueReceive+0x3e>
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <xQueueReceive+0x42>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <xQueueReceive+0x44>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueReceive+0x5e>
        __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
    }
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a9a:	f001 f813 	bl	8005ac4 <xTaskGetSchedulerState>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <xQueueReceive+0x6e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <xQueueReceive+0x72>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xQueueReceive+0x74>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueReceive+0x8e>
        __asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	61bb      	str	r3, [r7, #24]
    }
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004aca:	f001 fc15 	bl	80062f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01f      	beq.n	8004b1a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ade:	f000 f88d 	bl	8004bfc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	1e5a      	subs	r2, r3, #1
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	3310      	adds	r3, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fe1c 	bl	8005734 <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <xQueueReceive+0x1bc>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004b12:	f001 fc21 	bl	8006358 <vPortExitCritical>
                return pdPASS;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e069      	b.n	8004bee <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004b20:	f001 fc1a 	bl	8006358 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e062      	b.n	8004bee <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fed4 	bl	80058e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b3c:	f001 fc0c 	bl	8006358 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b40:	f000 fb02 	bl	8005148 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b44:	f001 fbd8 	bl	80062f8 <vPortEnterCritical>
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d103      	bne.n	8004b5e <xQueueReceive+0x122>
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d103      	bne.n	8004b74 <xQueueReceive+0x138>
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	f001 fbf0 	bl	8006358 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b78:	1d3a      	adds	r2, r7, #4
 8004b7a:	f107 0310 	add.w	r3, r7, #16
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fec3 	bl	800590c <xTaskCheckForTimeOut>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d123      	bne.n	8004bd4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b8e:	f000 f8ad 	bl	8004cec <prvIsQueueEmpty>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd5d 	bl	8005660 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba8:	f000 f84e 	bl	8004c48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004bac:	f000 fada 	bl	8005164 <xTaskResumeAll>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d189      	bne.n	8004aca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <xQueueReceive+0x1bc>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	e780      	b.n	8004aca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bca:	f000 f83d 	bl	8004c48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004bce:	f000 fac9 	bl	8005164 <xTaskResumeAll>
 8004bd2:	e77a      	b.n	8004aca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd6:	f000 f837 	bl	8004c48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004bda:	f000 fac3 	bl	8005164 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be0:	f000 f884 	bl	8004cec <prvIsQueueEmpty>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f43f af6f 	beq.w	8004aca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004bec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3730      	adds	r7, #48	; 0x30
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d303      	bcc.n	8004c30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f002 fcca 	bl	80075d4 <memcpy>
    }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004c50:	f001 fb52 	bl	80062f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c5c:	e011      	b.n	8004c82 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fd62 	bl	8005734 <xTaskRemoveFromEventList>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004c76:	f000 fea7 	bl	80059c8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dce9      	bgt.n	8004c5e <prvUnlockQueue+0x16>
 8004c8a:	e000      	b.n	8004c8e <prvUnlockQueue+0x46>
                    break;
 8004c8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	22ff      	movs	r2, #255	; 0xff
 8004c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004c96:	f001 fb5f 	bl	8006358 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004c9a:	f001 fb2d 	bl	80062f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca6:	e011      	b.n	8004ccc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd3d 	bl	8005734 <xTaskRemoveFromEventList>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004cc0:	f000 fe82 	bl	80059c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dce9      	bgt.n	8004ca8 <prvUnlockQueue+0x60>
 8004cd4:	e000      	b.n	8004cd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004cd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	22ff      	movs	r2, #255	; 0xff
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004ce0:	f001 fb3a 	bl	8006358 <vPortExitCritical>
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004cf4:	f001 fb00 	bl	80062f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e001      	b.n	8004d0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004d0a:	f001 fb25 	bl	8006358 <vPortExitCritical>

    return xReturn;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004d28:	f001 fae6 	bl	80062f8 <vPortEnterCritical>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <vQueueWaitForMessageRestricted+0x2a>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d103      	bne.n	8004d58 <vQueueWaitForMessageRestricted+0x40>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d58:	f001 fafe 	bl	8006358 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3324      	adds	r3, #36	; 0x24
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fc9b 	bl	80056a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff68 	bl	8004c48 <prvUnlockQueue>
    }
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fb89 	bl	80064ac <pvPortMalloc>
 8004d9a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d013      	beq.n	8004dca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004da2:	2050      	movs	r0, #80	; 0x50
 8004da4:	f001 fb82 	bl	80064ac <pvPortMalloc>
 8004da8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004db0:	2250      	movs	r2, #80	; 0x50
 8004db2:	2100      	movs	r1, #0
 8004db4:	69f8      	ldr	r0, [r7, #28]
 8004db6:	f002 fb8f 	bl	80074d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc0:	e005      	b.n	8004dce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f001 fc2c 	bl	8006620 <vPortFree>
 8004dc8:	e001      	b.n	8004dce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dd4:	88fa      	ldrh	r2, [r7, #6]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	9302      	str	r3, [sp, #8]
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f80e 	bl	8004e0c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004df0:	69f8      	ldr	r0, [r7, #28]
 8004df2:	f000 f891 	bl	8004f18 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e002      	b.n	8004e02 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004e02:	69bb      	ldr	r3, [r7, #24]
    }
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e24:	3b01      	subs	r3, #1
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <prvInitialiseNewTask+0x48>
        __asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	617b      	str	r3, [r7, #20]
    }
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01e      	beq.n	8004e98 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e012      	b.n	8004e86 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	7819      	ldrb	r1, [r3, #0]
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3334      	adds	r3, #52	; 0x34
 8004e70:	460a      	mov	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d006      	beq.n	8004e8e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3301      	adds	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b09      	cmp	r3, #9
 8004e8a:	d9e9      	bls.n	8004e60 <prvInitialiseNewTask+0x54>
 8004e8c:	e000      	b.n	8004e90 <prvInitialiseNewTask+0x84>
            {
                break;
 8004e8e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d90a      	bls.n	8004eb4 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	613b      	str	r3, [r7, #16]
    }
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d901      	bls.n	8004ebe <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004eba:	2304      	movs	r3, #4
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fc46 	bl	8004760 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc41 	bl	8004760 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	f1c3 0205 	rsb	r2, r3, #5
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	69b8      	ldr	r0, [r7, #24]
 8004efa:	f001 f8cd 	bl	8006098 <pxPortInitialiseStack>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f10:	bf00      	nop
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004f20:	f001 f9ea 	bl	80062f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004f24:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <prvAddNewTaskToReadyList+0x108>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <prvAddNewTaskToReadyList+0x108>)
 8004f2c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <prvAddNewTaskToReadyList+0x10c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004f36:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <prvAddNewTaskToReadyList+0x10c>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f3c:	4b38      	ldr	r3, [pc, #224]	; (8005020 <prvAddNewTaskToReadyList+0x108>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d110      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004f44:	f000 fd64 	bl	8005a10 <prvInitialiseTaskLists>
 8004f48:	e00d      	b.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <prvAddNewTaskToReadyList+0x110>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <prvAddNewTaskToReadyList+0x10c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d802      	bhi.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004f60:	4a30      	ldr	r2, [pc, #192]	; (8005024 <prvAddNewTaskToReadyList+0x10c>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004f66:	4b31      	ldr	r3, [pc, #196]	; (800502c <prvAddNewTaskToReadyList+0x114>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <prvAddNewTaskToReadyList+0x114>)
 8004f6e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <prvAddNewTaskToReadyList+0x118>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <prvAddNewTaskToReadyList+0x118>)
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	492b      	ldr	r1, [pc, #172]	; (8005034 <prvAddNewTaskToReadyList+0x11c>)
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3304      	adds	r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	3204      	adds	r2, #4
 8004fae:	605a      	str	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <prvAddNewTaskToReadyList+0x11c>)
 8004fc6:	441a      	add	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	615a      	str	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4918      	ldr	r1, [pc, #96]	; (8005034 <prvAddNewTaskToReadyList+0x11c>)
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	4814      	ldr	r0, [pc, #80]	; (8005034 <prvAddNewTaskToReadyList+0x11c>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4403      	add	r3, r0
 8004fec:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004fee:	f001 f9b3 	bl	8006358 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <prvAddNewTaskToReadyList+0x110>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <prvAddNewTaskToReadyList+0x10c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	429a      	cmp	r2, r3
 8005006:	d207      	bcs.n	8005018 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <prvAddNewTaskToReadyList+0x120>)
 800500a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200003d0 	.word	0x200003d0
 8005024:	20000324 	.word	0x20000324
 8005028:	200003dc 	.word	0x200003dc
 800502c:	200003ec 	.word	0x200003ec
 8005030:	200003d8 	.word	0x200003d8
 8005034:	20000328 	.word	0x20000328
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d017      	beq.n	800507e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <vTaskDelay+0x60>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <vTaskDelay+0x30>
        __asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60bb      	str	r3, [r7, #8]
    }
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800506c:	f000 f86c 	bl	8005148 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005070:	2100      	movs	r1, #0
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fd44 	bl	8005b00 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005078:	f000 f874 	bl	8005164 <xTaskResumeAll>
 800507c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d107      	bne.n	8005094 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8005084:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <vTaskDelay+0x64>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200003f8 	.word	0x200003f8
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <vTaskStartScheduler+0x88>)
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	2280      	movs	r2, #128	; 0x80
 80050b6:	491e      	ldr	r1, [pc, #120]	; (8005130 <vTaskStartScheduler+0x8c>)
 80050b8:	481e      	ldr	r0, [pc, #120]	; (8005134 <vTaskStartScheduler+0x90>)
 80050ba:	f7ff fe61 	bl	8004d80 <xTaskCreate>
 80050be:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80050c6:	f000 fd6f 	bl	8005ba8 <xTimerCreateTimerTask>
 80050ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d116      	bne.n	8005100 <vTaskStartScheduler+0x5c>
        __asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
    }
 80050e4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <vTaskStartScheduler+0x94>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <vTaskStartScheduler+0x98>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <vTaskStartScheduler+0x9c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80050fa:	f001 f85b 	bl	80061b4 <xPortStartScheduler>
 80050fe:	e00e      	b.n	800511e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d10a      	bne.n	800511e <vTaskStartScheduler+0x7a>
        __asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	607b      	str	r3, [r7, #4]
    }
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <vTaskStartScheduler+0xa0>)
 8005120:	681b      	ldr	r3, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200003f4 	.word	0x200003f4
 8005130:	0800928c 	.word	0x0800928c
 8005134:	080059e1 	.word	0x080059e1
 8005138:	200003f0 	.word	0x200003f0
 800513c:	200003dc 	.word	0x200003dc
 8005140:	200003d4 	.word	0x200003d4
 8005144:	2000000c 	.word	0x2000000c

08005148 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <vTaskSuspendAll+0x18>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	4a03      	ldr	r2, [pc, #12]	; (8005160 <vTaskSuspendAll+0x18>)
 8005154:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	200003f8 	.word	0x200003f8

08005164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005172:	4b71      	ldr	r3, [pc, #452]	; (8005338 <xTaskResumeAll+0x1d4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xTaskResumeAll+0x2c>
        __asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
    }
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005190:	f001 f8b2 	bl	80062f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005194:	4b68      	ldr	r3, [pc, #416]	; (8005338 <xTaskResumeAll+0x1d4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3b01      	subs	r3, #1
 800519a:	4a67      	ldr	r2, [pc, #412]	; (8005338 <xTaskResumeAll+0x1d4>)
 800519c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519e:	4b66      	ldr	r3, [pc, #408]	; (8005338 <xTaskResumeAll+0x1d4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 80c0 	bne.w	8005328 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051a8:	4b64      	ldr	r3, [pc, #400]	; (800533c <xTaskResumeAll+0x1d8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80bb 	beq.w	8005328 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b2:	e08a      	b.n	80052ca <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b4:	4b62      	ldr	r3, [pc, #392]	; (8005340 <xTaskResumeAll+0x1dc>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	6a12      	ldr	r2, [r2, #32]
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	69d2      	ldr	r2, [r2, #28]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3318      	adds	r3, #24
 80051de:	429a      	cmp	r2, r3
 80051e0:	d103      	bne.n	80051ea <xTaskResumeAll+0x86>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2200      	movs	r2, #0
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	1e5a      	subs	r2, r3, #1
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	68d2      	ldr	r2, [r2, #12]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	6892      	ldr	r2, [r2, #8]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3304      	adds	r3, #4
 800521c:	429a      	cmp	r2, r3
 800521e:	d103      	bne.n	8005228 <xTaskResumeAll+0xc4>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2200      	movs	r2, #0
 800522c:	615a      	str	r2, [r3, #20]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2201      	movs	r2, #1
 800523e:	409a      	lsls	r2, r3
 8005240:	4b40      	ldr	r3, [pc, #256]	; (8005344 <xTaskResumeAll+0x1e0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4313      	orrs	r3, r2
 8005246:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <xTaskResumeAll+0x1e0>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	493e      	ldr	r1, [pc, #248]	; (8005348 <xTaskResumeAll+0x1e4>)
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	3304      	adds	r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	3204      	adds	r2, #4
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <xTaskResumeAll+0x1e4>)
 800528e:	441a      	add	r2, r3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	615a      	str	r2, [r3, #20]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	492b      	ldr	r1, [pc, #172]	; (8005348 <xTaskResumeAll+0x1e4>)
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	4827      	ldr	r0, [pc, #156]	; (8005348 <xTaskResumeAll+0x1e4>)
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4403      	add	r3, r0
 80052b4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <xTaskResumeAll+0x1e8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80052c4:	4b22      	ldr	r3, [pc, #136]	; (8005350 <xTaskResumeAll+0x1ec>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <xTaskResumeAll+0x1dc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f47f af70 	bne.w	80051b4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80052da:	f000 fbd7 	bl	8005a8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <xTaskResumeAll+0x1f0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80052ea:	f000 f847 	bl	800537c <xTaskIncrementTick>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80052f4:	4b16      	ldr	r3, [pc, #88]	; (8005350 <xTaskResumeAll+0x1ec>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f1      	bne.n	80052ea <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005306:	4b13      	ldr	r3, [pc, #76]	; (8005354 <xTaskResumeAll+0x1f0>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <xTaskResumeAll+0x1ec>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005318:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <xTaskResumeAll+0x1f4>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005328:	f001 f816 	bl	8006358 <vPortExitCritical>

    return xAlreadyYielded;
 800532c:	69bb      	ldr	r3, [r7, #24]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200003f8 	.word	0x200003f8
 800533c:	200003d0 	.word	0x200003d0
 8005340:	200003bc 	.word	0x200003bc
 8005344:	200003d8 	.word	0x200003d8
 8005348:	20000328 	.word	0x20000328
 800534c:	20000324 	.word	0x20000324
 8005350:	200003e4 	.word	0x200003e4
 8005354:	200003e0 	.word	0x200003e0
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <xTaskGetTickCount+0x1c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	200003d4 	.word	0x200003d4

0800537c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <xTaskIncrementTick+0x200>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 80ec 	bne.w	8005568 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <xTaskIncrementTick+0x204>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005398:	4a79      	ldr	r2, [pc, #484]	; (8005580 <xTaskIncrementTick+0x204>)
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d120      	bne.n	80053e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80053a4:	4b77      	ldr	r3, [pc, #476]	; (8005584 <xTaskIncrementTick+0x208>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
    }
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskIncrementTick+0x46>
 80053c4:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <xTaskIncrementTick+0x208>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	4b6f      	ldr	r3, [pc, #444]	; (8005588 <xTaskIncrementTick+0x20c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6d      	ldr	r2, [pc, #436]	; (8005584 <xTaskIncrementTick+0x208>)
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4a6d      	ldr	r2, [pc, #436]	; (8005588 <xTaskIncrementTick+0x20c>)
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	4b6c      	ldr	r3, [pc, #432]	; (800558c <xTaskIncrementTick+0x210>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a6b      	ldr	r2, [pc, #428]	; (800558c <xTaskIncrementTick+0x210>)
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	f000 fb53 	bl	8005a8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80053e6:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <xTaskIncrementTick+0x214>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a3a      	ldr	r2, [r7, #32]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	f0c0 80a6 	bcc.w	800553e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f2:	4b64      	ldr	r3, [pc, #400]	; (8005584 <xTaskIncrementTick+0x208>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fc:	4b64      	ldr	r3, [pc, #400]	; (8005590 <xTaskIncrementTick+0x214>)
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	601a      	str	r2, [r3, #0]
                    break;
 8005404:	e09b      	b.n	800553e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005406:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <xTaskIncrementTick+0x208>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	429a      	cmp	r2, r3
 800541c:	d203      	bcs.n	8005426 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800541e:	4a5c      	ldr	r2, [pc, #368]	; (8005590 <xTaskIncrementTick+0x214>)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005424:	e08b      	b.n	800553e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	68d2      	ldr	r2, [r2, #12]
 8005434:	609a      	str	r2, [r3, #8]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3304      	adds	r3, #4
 8005448:	429a      	cmp	r2, r3
 800544a:	d103      	bne.n	8005454 <xTaskIncrementTick+0xd8>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2200      	movs	r2, #0
 8005458:	615a      	str	r2, [r3, #20]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	6a12      	ldr	r2, [r2, #32]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	69d2      	ldr	r2, [r2, #28]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3318      	adds	r3, #24
 800548e:	429a      	cmp	r2, r3
 8005490:	d103      	bne.n	800549a <xTaskIncrementTick+0x11e>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	6a1a      	ldr	r2, [r3, #32]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2200      	movs	r2, #0
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	2201      	movs	r2, #1
 80054b0:	409a      	lsls	r2, r3
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <xTaskIncrementTick+0x218>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	4a36      	ldr	r2, [pc, #216]	; (8005594 <xTaskIncrementTick+0x218>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4935      	ldr	r1, [pc, #212]	; (8005598 <xTaskIncrementTick+0x21c>)
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	3304      	adds	r3, #4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	3204      	adds	r2, #4
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	609a      	str	r2, [r3, #8]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <xTaskIncrementTick+0x21c>)
 8005500:	441a      	add	r2, r3
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	615a      	str	r2, [r3, #20]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550a:	4923      	ldr	r1, [pc, #140]	; (8005598 <xTaskIncrementTick+0x21c>)
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	1c59      	adds	r1, r3, #1
 800551a:	481f      	ldr	r0, [pc, #124]	; (8005598 <xTaskIncrementTick+0x21c>)
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4403      	add	r3, r0
 8005526:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <xTaskIncrementTick+0x220>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	429a      	cmp	r2, r3
 8005534:	f67f af5d 	bls.w	80053f2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800553c:	e759      	b.n	80053f2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <xTaskIncrementTick+0x220>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4914      	ldr	r1, [pc, #80]	; (8005598 <xTaskIncrementTick+0x21c>)
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d901      	bls.n	800555a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005556:	2301      	movs	r3, #1
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <xTaskIncrementTick+0x224>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e004      	b.n	8005572 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005568:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <xTaskIncrementTick+0x228>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <xTaskIncrementTick+0x228>)
 8005570:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	200003f8 	.word	0x200003f8
 8005580:	200003d4 	.word	0x200003d4
 8005584:	200003b4 	.word	0x200003b4
 8005588:	200003b8 	.word	0x200003b8
 800558c:	200003e8 	.word	0x200003e8
 8005590:	200003f0 	.word	0x200003f0
 8005594:	200003d8 	.word	0x200003d8
 8005598:	20000328 	.word	0x20000328
 800559c:	20000324 	.word	0x20000324
 80055a0:	200003e4 	.word	0x200003e4
 80055a4:	200003e0 	.word	0x200003e0

080055a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ae:	4b27      	ldr	r3, [pc, #156]	; (800564c <vTaskSwitchContext+0xa4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <vTaskSwitchContext+0xa8>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80055bc:	e03f      	b.n	800563e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <vTaskSwitchContext+0xa8>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c4:	4b23      	ldr	r3, [pc, #140]	; (8005654 <vTaskSwitchContext+0xac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	f1c3 031f 	rsb	r3, r3, #31
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	491f      	ldr	r1, [pc, #124]	; (8005658 <vTaskSwitchContext+0xb0>)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <vTaskSwitchContext+0x5c>
        __asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
    }
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <vTaskSwitchContext+0x5a>
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <vTaskSwitchContext+0xb0>)
 8005610:	4413      	add	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3308      	adds	r3, #8
 8005626:	429a      	cmp	r2, r3
 8005628:	d104      	bne.n	8005634 <vTaskSwitchContext+0x8c>
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <vTaskSwitchContext+0xb4>)
 800563c:	6013      	str	r3, [r2, #0]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	200003f8 	.word	0x200003f8
 8005650:	200003e4 	.word	0x200003e4
 8005654:	200003d8 	.word	0x200003d8
 8005658:	20000328 	.word	0x20000328
 800565c:	20000324 	.word	0x20000324

08005660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
    }
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <vTaskPlaceOnEventList+0x44>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3318      	adds	r3, #24
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff f873 	bl	800477a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005694:	2101      	movs	r1, #1
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f000 fa32 	bl	8005b00 <prvAddCurrentTaskToDelayedList>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000324 	.word	0x20000324

080056a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	613b      	str	r3, [r7, #16]
    }
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4b16      	ldr	r3, [pc, #88]	; (8005730 <vTaskPlaceOnEventListRestricted+0x88>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	61da      	str	r2, [r3, #28]
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <vTaskPlaceOnEventListRestricted+0x88>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	621a      	str	r2, [r3, #32]
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <vTaskPlaceOnEventListRestricted+0x88>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	3218      	adds	r2, #24
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <vTaskPlaceOnEventListRestricted+0x88>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f103 0218 	add.w	r2, r3, #24
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <vTaskPlaceOnEventListRestricted+0x88>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005718:	f04f 33ff 	mov.w	r3, #4294967295
 800571c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	f000 f9ed 	bl	8005b00 <prvAddCurrentTaskToDelayedList>
    }
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000324 	.word	0x20000324

08005734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005734:	b480      	push	{r7}
 8005736:	b08b      	sub	sp, #44	; 0x2c
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	60fb      	str	r3, [r7, #12]
    }
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	6a12      	ldr	r2, [r2, #32]
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	69d2      	ldr	r2, [r2, #28]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	3318      	adds	r3, #24
 8005782:	429a      	cmp	r2, r3
 8005784:	d103      	bne.n	800578e <xTaskRemoveFromEventList+0x5a>
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	2200      	movs	r2, #0
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579e:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <xTaskRemoveFromEventList+0x194>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d15e      	bne.n	8005864 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	68d2      	ldr	r2, [r2, #12]
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	6a3a      	ldr	r2, [r7, #32]
 80057bc:	6892      	ldr	r2, [r2, #8]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	3304      	adds	r3, #4
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d103      	bne.n	80057d4 <xTaskRemoveFromEventList+0xa0>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	2200      	movs	r2, #0
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1e5a      	subs	r2, r3, #1
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	4b37      	ldr	r3, [pc, #220]	; (80058cc <xTaskRemoveFromEventList+0x198>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4a36      	ldr	r2, [pc, #216]	; (80058cc <xTaskRemoveFromEventList+0x198>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	4935      	ldr	r1, [pc, #212]	; (80058d0 <xTaskRemoveFromEventList+0x19c>)
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	3304      	adds	r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	609a      	str	r2, [r3, #8]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	3204      	adds	r2, #4
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <xTaskRemoveFromEventList+0x19c>)
 800583a:	441a      	add	r2, r3
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	615a      	str	r2, [r3, #20]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4922      	ldr	r1, [pc, #136]	; (80058d0 <xTaskRemoveFromEventList+0x19c>)
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	481e      	ldr	r0, [pc, #120]	; (80058d0 <xTaskRemoveFromEventList+0x19c>)
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4403      	add	r3, r0
 8005860:	6019      	str	r1, [r3, #0]
 8005862:	e01b      	b.n	800589c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005864:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <xTaskRemoveFromEventList+0x1a0>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	61da      	str	r2, [r3, #28]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	621a      	str	r2, [r3, #32]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	6a3a      	ldr	r2, [r7, #32]
 800587e:	3218      	adds	r2, #24
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f103 0218 	add.w	r2, r3, #24
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <xTaskRemoveFromEventList+0x1a0>)
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <xTaskRemoveFromEventList+0x1a0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <xTaskRemoveFromEventList+0x1a0>)
 800589a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <xTaskRemoveFromEventList+0x1a4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d905      	bls.n	80058b6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <xTaskRemoveFromEventList+0x1a8>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e001      	b.n	80058ba <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058bc:	4618      	mov	r0, r3
 80058be:	372c      	adds	r7, #44	; 0x2c
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	200003f8 	.word	0x200003f8
 80058cc:	200003d8 	.word	0x200003d8
 80058d0:	20000328 	.word	0x20000328
 80058d4:	200003bc 	.word	0x200003bc
 80058d8:	20000324 	.word	0x20000324
 80058dc:	200003e4 	.word	0x200003e4

080058e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <vTaskInternalSetTimeOutState+0x24>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <vTaskInternalSetTimeOutState+0x28>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	200003e8 	.word	0x200003e8
 8005908:	200003d4 	.word	0x200003d4

0800590c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	613b      	str	r3, [r7, #16]
    }
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
    }
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800594e:	f000 fcd3 	bl	80062f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005952:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <xTaskCheckForTimeOut+0xb4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <xTaskCheckForTimeOut+0xb8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d00a      	beq.n	8005984 <xTaskCheckForTimeOut+0x78>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d305      	bcc.n	8005984 <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e015      	b.n	80059b0 <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20b      	bcs.n	80059a6 <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ffa0 	bl	80058e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	e004      	b.n	80059b0 <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80059b0:	f000 fcd2 	bl	8006358 <vPortExitCritical>

    return xReturn;
 80059b4:	69fb      	ldr	r3, [r7, #28]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	200003d4 	.word	0x200003d4
 80059c4:	200003e8 	.word	0x200003e8

080059c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <vTaskMissedYield+0x14>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	200003e4 	.word	0x200003e4

080059e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80059e8:	f000 f848 	bl	8005a7c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <prvIdleTask+0x28>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d9f9      	bls.n	80059e8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <prvIdleTask+0x2c>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005a04:	e7f0      	b.n	80059e8 <prvIdleTask+0x8>
 8005a06:	bf00      	nop
 8005a08:	20000328 	.word	0x20000328
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	e00c      	b.n	8005a36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a0f      	ldr	r2, [pc, #60]	; (8005a64 <prvInitialiseTaskLists+0x54>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fe78 	bl	8004720 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3301      	adds	r3, #1
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d9ef      	bls.n	8005a1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005a3c:	480a      	ldr	r0, [pc, #40]	; (8005a68 <prvInitialiseTaskLists+0x58>)
 8005a3e:	f7fe fe6f 	bl	8004720 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005a42:	480a      	ldr	r0, [pc, #40]	; (8005a6c <prvInitialiseTaskLists+0x5c>)
 8005a44:	f7fe fe6c 	bl	8004720 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005a48:	4809      	ldr	r0, [pc, #36]	; (8005a70 <prvInitialiseTaskLists+0x60>)
 8005a4a:	f7fe fe69 	bl	8004720 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <prvInitialiseTaskLists+0x64>)
 8005a50:	4a05      	ldr	r2, [pc, #20]	; (8005a68 <prvInitialiseTaskLists+0x58>)
 8005a52:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a54:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <prvInitialiseTaskLists+0x68>)
 8005a56:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <prvInitialiseTaskLists+0x5c>)
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000328 	.word	0x20000328
 8005a68:	2000038c 	.word	0x2000038c
 8005a6c:	200003a0 	.word	0x200003a0
 8005a70:	200003bc 	.word	0x200003bc
 8005a74:	200003b4 	.word	0x200003b4
 8005a78:	200003b8 	.word	0x200003b8

08005a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <prvResetNextTaskUnblockTime+0x30>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <prvResetNextTaskUnblockTime+0x34>)
 8005a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005aa2:	e005      	b.n	8005ab0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <prvResetNextTaskUnblockTime+0x30>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <prvResetNextTaskUnblockTime+0x34>)
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200003b4 	.word	0x200003b4
 8005ac0:	200003f0 	.word	0x200003f0

08005ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <xTaskGetSchedulerState+0x34>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e008      	b.n	8005aea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <xTaskGetSchedulerState+0x38>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	e001      	b.n	8005aea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005aea:	687b      	ldr	r3, [r7, #4]
    }
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	200003dc 	.word	0x200003dc
 8005afc:	200003f8 	.word	0x200003f8

08005b00 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b10:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fe68 	bl	80047ec <uxListRemove>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2201      	movs	r2, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4013      	ands	r3, r2
 8005b36:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b38:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d209      	bcs.n	8005b66 <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fe fe0b 	bl	800477a <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005b64:	e010      	b.n	8005b88 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b66:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f7fe fe01 	bl	800477a <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d202      	bcs.n	8005b88 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200003d4 	.word	0x200003d4
 8005b94:	20000324 	.word	0x20000324
 8005b98:	200003d8 	.word	0x200003d8
 8005b9c:	200003b8 	.word	0x200003b8
 8005ba0:	200003b4 	.word	0x200003b4
 8005ba4:	200003f0 	.word	0x200003f0

08005ba8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005bb2:	f000 fa47 	bl	8006044 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <xTimerCreateTimerTask+0x54>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <xTimerCreateTimerTask+0x58>)
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2280      	movs	r2, #128	; 0x80
 8005bca:	490e      	ldr	r1, [pc, #56]	; (8005c04 <xTimerCreateTimerTask+0x5c>)
 8005bcc:	480e      	ldr	r0, [pc, #56]	; (8005c08 <xTimerCreateTimerTask+0x60>)
 8005bce:	f7ff f8d7 	bl	8004d80 <xTaskCreate>
 8005bd2:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	603b      	str	r3, [r7, #0]
    }
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005bf0:	687b      	ldr	r3, [r7, #4]
    }
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000042c 	.word	0x2000042c
 8005c00:	20000430 	.word	0x20000430
 8005c04:	08009294 	.word	0x08009294
 8005c08:	08005cb1 	.word	0x08005cb1

08005c0c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005c18:	e008      	b.n	8005c2c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	18d1      	adds	r1, r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f8dd 	bl	8005df8 <prvInsertTimerInActiveList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ea      	bne.n	8005c1a <prvReloadTimer+0xe>
        }
    }
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <prvProcessExpiredTimer+0x5c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fdbf 	bl	80047ec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ffc3 	bl	8005c0c <prvReloadTimer>
 8005c86:	e008      	b.n	8005c9a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	4798      	blx	r3
    }
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000424 	.word	0x20000424

08005cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 f857 	bl	8005d70 <prvGetNextExpireTime>
 8005cc2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f803 	bl	8005cd4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005cce:	f000 f8d5 	bl	8005e7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cd2:	e7f1      	b.n	8005cb8 <prvTimerTask+0x8>

08005cd4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005cde:	f7ff fa33 	bl	8005148 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ce2:	f107 0308 	add.w	r3, r7, #8
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f866 	bl	8005db8 <prvSampleTimeNow>
 8005cec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d130      	bne.n	8005d56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <prvProcessTimerOrBlockTask+0x3c>
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d806      	bhi.n	8005d10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005d02:	f7ff fa2f 	bl	8005164 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ffa1 	bl	8005c50 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005d0e:	e024      	b.n	8005d5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d16:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <prvProcessTimerOrBlockTask+0x90>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <prvProcessTimerOrBlockTask+0x50>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <prvProcessTimerOrBlockTask+0x52>
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <prvProcessTimerOrBlockTask+0x94>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fe ffef 	bl	8004d18 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005d3a:	f7ff fa13 	bl	8005164 <xTaskResumeAll>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <prvProcessTimerOrBlockTask+0x98>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
    }
 8005d54:	e001      	b.n	8005d5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005d56:	f7ff fa05 	bl	8005164 <xTaskResumeAll>
    }
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000428 	.word	0x20000428
 8005d68:	2000042c 	.word	0x2000042c
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d78:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <prvGetNextExpireTime+0x44>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <prvGetNextExpireTime+0x16>
 8005d82:	2201      	movs	r2, #1
 8005d84:	e000      	b.n	8005d88 <prvGetNextExpireTime+0x18>
 8005d86:	2200      	movs	r2, #0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d94:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <prvGetNextExpireTime+0x44>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e001      	b.n	8005da4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005da4:	68fb      	ldr	r3, [r7, #12]
    }
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000424 	.word	0x20000424

08005db8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005dc0:	f7ff facc 	bl	800535c <xTaskGetTickCount>
 8005dc4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvSampleTimeNow+0x3c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d205      	bcs.n	8005ddc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005dd0:	f000 f912 	bl	8005ff8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005de2:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <prvSampleTimeNow+0x3c>)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005de8:	68fb      	ldr	r3, [r7, #12]
    }
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000434 	.word	0x20000434

08005df8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d812      	bhi.n	8005e44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e01b      	b.n	8005e6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <prvInsertTimerInActiveList+0x7c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7fe fc9c 	bl	800477a <vListInsert>
 8005e42:	e012      	b.n	8005e6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d206      	bcs.n	8005e5a <prvInsertTimerInActiveList+0x62>
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e007      	b.n	8005e6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <prvInsertTimerInActiveList+0x80>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f7fe fc88 	bl	800477a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005e6a:	697b      	ldr	r3, [r7, #20]
    }
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000428 	.word	0x20000428
 8005e78:	20000424 	.word	0x20000424

08005e7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e82:	e0a6      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f2c0 80a3 	blt.w	8005fd2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fca5 	bl	80047ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff87 	bl	8005db8 <prvSampleTimeNow>
 8005eaa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	f200 808d 	bhi.w	8005fd0 <prvProcessReceivedCommands+0x154>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <prvProcessReceivedCommands+0x40>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005f49 	.word	0x08005f49
 8005ec8:	08005f5d 	.word	0x08005f5d
 8005ecc:	08005fa7 	.word	0x08005fa7
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ee1 	.word	0x08005ee1
 8005ed8:	08005f49 	.word	0x08005f49
 8005edc:	08005f5d 	.word	0x08005f5d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	18d1      	adds	r1, r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	69f8      	ldr	r0, [r7, #28]
 8005f00:	f7ff ff7a 	bl	8005df8 <prvInsertTimerInActiveList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d063      	beq.n	8005fd2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	4413      	add	r3, r2
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4619      	mov	r1, r3
 8005f24:	69f8      	ldr	r0, [r7, #28]
 8005f26:	f7ff fe71 	bl	8005c0c <prvReloadTimer>
 8005f2a:	e008      	b.n	8005f3e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	69f8      	ldr	r0, [r7, #28]
 8005f44:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005f46:	e044      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8005f5a:	e03a      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	617b      	str	r3, [r7, #20]
    }
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	18d1      	adds	r1, r2, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	69f8      	ldr	r0, [r7, #28]
 8005fa0:	f7ff ff2a 	bl	8005df8 <prvInsertTimerInActiveList>
                        break;
 8005fa4:	e015      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005fb4:	69f8      	ldr	r0, [r7, #28]
 8005fb6:	f000 fb33 	bl	8006620 <vPortFree>
 8005fba:	e00a      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005fce:	e000      	b.n	8005fd2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005fd0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <prvProcessReceivedCommands+0x178>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f107 0108 	add.w	r1, r7, #8
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fd2d 	bl	8004a3c <xQueueReceive>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f af4d 	bne.w	8005e84 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000042c 	.word	0x2000042c

08005ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ffe:	e009      	b.n	8006014 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006000:	4b0e      	ldr	r3, [pc, #56]	; (800603c <prvSwitchTimerLists+0x44>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800600a:	f04f 31ff 	mov.w	r1, #4294967295
 800600e:	6838      	ldr	r0, [r7, #0]
 8006010:	f7ff fe1e 	bl	8005c50 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <prvSwitchTimerLists+0x44>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <prvSwitchTimerLists+0x44>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <prvSwitchTimerLists+0x48>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <prvSwitchTimerLists+0x44>)
 800602a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <prvSwitchTimerLists+0x48>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]
    }
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000424 	.word	0x20000424
 8006040:	20000428 	.word	0x20000428

08006044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006048:	f000 f956 	bl	80062f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <prvCheckForValidListAndQueue+0x40>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8006054:	480c      	ldr	r0, [pc, #48]	; (8006088 <prvCheckForValidListAndQueue+0x44>)
 8006056:	f7fe fb63 	bl	8004720 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <prvCheckForValidListAndQueue+0x48>)
 800605c:	f7fe fb60 	bl	8004720 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <prvCheckForValidListAndQueue+0x4c>)
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <prvCheckForValidListAndQueue+0x44>)
 8006064:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvCheckForValidListAndQueue+0x50>)
 8006068:	4a08      	ldr	r2, [pc, #32]	; (800608c <prvCheckForValidListAndQueue+0x48>)
 800606a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800606c:	2200      	movs	r2, #0
 800606e:	210c      	movs	r1, #12
 8006070:	2005      	movs	r0, #5
 8006072:	f7fe fc75 	bl	8004960 <xQueueGenericCreate>
 8006076:	4603      	mov	r3, r0
 8006078:	4a02      	ldr	r2, [pc, #8]	; (8006084 <prvCheckForValidListAndQueue+0x40>)
 800607a:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800607c:	f000 f96c 	bl	8006358 <vPortExitCritical>
    }
 8006080:	bf00      	nop
 8006082:	bd80      	pop	{r7, pc}
 8006084:	2000042c 	.word	0x2000042c
 8006088:	200003fc 	.word	0x200003fc
 800608c:	20000410 	.word	0x20000410
 8006090:	20000424 	.word	0x20000424
 8006094:	20000428 	.word	0x20000428

08006098 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b04      	subs	r3, #4
 80060a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b04      	subs	r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80060c8:	4a0c      	ldr	r2, [pc, #48]	; (80060fc <pxPortInitialiseStack+0x64>)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b14      	subs	r3, #20
 80060d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b04      	subs	r3, #4
 80060de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f06f 0202 	mvn.w	r2, #2
 80060e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b20      	subs	r3, #32
 80060ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	08006101 	.word	0x08006101

08006100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <prvTaskExitError+0x54>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d00a      	beq.n	800612a <prvTaskExitError+0x2a>
        __asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
    }
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <prvTaskExitError+0x28>
        __asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60bb      	str	r3, [r7, #8]
    }
 800613c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800613e:	bf00      	nop
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0fc      	beq.n	8006140 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20000010 	.word	0x20000010
	...

08006160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <pxCurrentTCBConst2>)
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	6808      	ldr	r0, [r1, #0]
 8006166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616a:	f380 8809 	msr	PSP, r0
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f04f 0000 	mov.w	r0, #0
 8006176:	f380 8811 	msr	BASEPRI, r0
 800617a:	4770      	bx	lr
 800617c:	f3af 8000 	nop.w

08006180 <pxCurrentTCBConst2>:
 8006180:	20000324 	.word	0x20000324
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop

08006188 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006188:	4808      	ldr	r0, [pc, #32]	; (80061ac <prvPortStartFirstTask+0x24>)
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	6800      	ldr	r0, [r0, #0]
 800618e:	f380 8808 	msr	MSP, r0
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f380 8814 	msr	CONTROL, r0
 800619a:	b662      	cpsie	i
 800619c:	b661      	cpsie	f
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	df00      	svc	0
 80061a8:	bf00      	nop
 80061aa:	0000      	.short	0x0000
 80061ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop

080061b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061ba:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <xPortStartScheduler+0x120>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a46      	ldr	r2, [pc, #280]	; (80062d8 <xPortStartScheduler+0x124>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10a      	bne.n	80061da <xPortStartScheduler+0x26>
        __asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	613b      	str	r3, [r7, #16]
    }
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061da:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <xPortStartScheduler+0x120>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a3f      	ldr	r2, [pc, #252]	; (80062dc <xPortStartScheduler+0x128>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d10a      	bne.n	80061fa <xPortStartScheduler+0x46>
        __asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
    }
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061fa:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <xPortStartScheduler+0x12c>)
 80061fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4b31      	ldr	r3, [pc, #196]	; (80062e4 <xPortStartScheduler+0x130>)
 8006220:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006222:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <xPortStartScheduler+0x134>)
 8006224:	2207      	movs	r2, #7
 8006226:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006228:	e009      	b.n	800623e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800622a:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <xPortStartScheduler+0x134>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <xPortStartScheduler+0x134>)
 8006232:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	b2db      	uxtb	r3, r3
 800623c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d0ef      	beq.n	800622a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <xPortStartScheduler+0x134>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f1c3 0307 	rsb	r3, r3, #7
 8006252:	2b04      	cmp	r3, #4
 8006254:	d00a      	beq.n	800626c <xPortStartScheduler+0xb8>
        __asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60bb      	str	r3, [r7, #8]
    }
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <xPortStartScheduler+0x134>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <xPortStartScheduler+0x134>)
 8006274:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <xPortStartScheduler+0x134>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800627e:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <xPortStartScheduler+0x134>)
 8006280:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <xPortStartScheduler+0x138>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a17      	ldr	r2, [pc, #92]	; (80062ec <xPortStartScheduler+0x138>)
 8006290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006294:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006296:	4b15      	ldr	r3, [pc, #84]	; (80062ec <xPortStartScheduler+0x138>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a14      	ldr	r2, [pc, #80]	; (80062ec <xPortStartScheduler+0x138>)
 800629c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80062a2:	f000 f8db 	bl	800645c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80062a6:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <xPortStartScheduler+0x13c>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80062ac:	f000 f8f2 	bl	8006494 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <xPortStartScheduler+0x140>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <xPortStartScheduler+0x140>)
 80062b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80062bc:	f7ff ff64 	bl	8006188 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80062c0:	f7ff f972 	bl	80055a8 <vTaskSwitchContext>
    prvTaskExitError();
 80062c4:	f7ff ff1c 	bl	8006100 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	e000ed00 	.word	0xe000ed00
 80062d8:	410fc271 	.word	0x410fc271
 80062dc:	410fc270 	.word	0x410fc270
 80062e0:	e000e400 	.word	0xe000e400
 80062e4:	20000438 	.word	0x20000438
 80062e8:	2000043c 	.word	0x2000043c
 80062ec:	e000ed20 	.word	0xe000ed20
 80062f0:	20000010 	.word	0x20000010
 80062f4:	e000ef34 	.word	0xe000ef34

080062f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
        __asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
    }
 8006310:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <vPortEnterCritical+0x58>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3301      	adds	r3, #1
 8006318:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <vPortEnterCritical+0x58>)
 800631a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <vPortEnterCritical+0x58>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d10f      	bne.n	8006344 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <vPortEnterCritical+0x5c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <vPortEnterCritical+0x4c>
        __asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	603b      	str	r3, [r7, #0]
    }
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <vPortEnterCritical+0x4a>
    }
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000010 	.word	0x20000010
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <vPortExitCritical+0x50>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <vPortExitCritical+0x24>
        __asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	607b      	str	r3, [r7, #4]
    }
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <vPortExitCritical+0x50>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3b01      	subs	r3, #1
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <vPortExitCritical+0x50>)
 8006384:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <vPortExitCritical+0x50>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <vPortExitCritical+0x42>
 800638e:	2300      	movs	r3, #0
 8006390:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006398:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000010 	.word	0x20000010
 80063ac:	00000000 	.word	0x00000000

080063b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80063b0:	f3ef 8009 	mrs	r0, PSP
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <pxCurrentTCBConst>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f01e 0f10 	tst.w	lr, #16
 80063c0:	bf08      	it	eq
 80063c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	6010      	str	r0, [r2, #0]
 80063cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063d4:	f380 8811 	msr	BASEPRI, r0
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f7ff f8e2 	bl	80055a8 <vTaskSwitchContext>
 80063e4:	f04f 0000 	mov.w	r0, #0
 80063e8:	f380 8811 	msr	BASEPRI, r0
 80063ec:	bc09      	pop	{r0, r3}
 80063ee:	6819      	ldr	r1, [r3, #0]
 80063f0:	6808      	ldr	r0, [r1, #0]
 80063f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f6:	f01e 0f10 	tst.w	lr, #16
 80063fa:	bf08      	it	eq
 80063fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006400:	f380 8809 	msr	PSP, r0
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst>:
 8006410:	20000324 	.word	0x20000324
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
        __asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
    }
 8006430:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006432:	f7fe ffa3 	bl	800537c <xTaskIncrementTick>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <SysTick_Handler+0x40>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	2300      	movs	r3, #0
 8006446:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f383 8811 	msr	BASEPRI, r3
    }
 800644e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006460:	4b08      	ldr	r3, [pc, #32]	; (8006484 <vPortSetupTimerInterrupt+0x28>)
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <vPortSetupTimerInterrupt+0x2c>)
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <vPortSetupTimerInterrupt+0x30>)
 800646e:	4a08      	ldr	r2, [pc, #32]	; (8006490 <vPortSetupTimerInterrupt+0x34>)
 8006470:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <vPortSetupTimerInterrupt+0x28>)
 8006474:	2207      	movs	r2, #7
 8006476:	601a      	str	r2, [r3, #0]
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	e000e010 	.word	0xe000e010
 8006488:	e000e018 	.word	0xe000e018
 800648c:	e000e014 	.word	0xe000e014
 8006490:	0001193f 	.word	0x0001193f

08006494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064a4 <vPortEnableVFP+0x10>
 8006498:	6801      	ldr	r1, [r0, #0]
 800649a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800649e:	6001      	str	r1, [r0, #0]
 80064a0:	4770      	bx	lr
 80064a2:	0000      	.short	0x0000
 80064a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop

080064ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80064b8:	f7fe fe46 	bl	8005148 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <pvPortMalloc+0x160>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80064c4:	f000 f908 	bl	80066d8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d012      	beq.n	80064f4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80064ce:	2208      	movs	r2, #8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	3308      	adds	r3, #8
 80064da:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	43db      	mvns	r3, r3
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d804      	bhi.n	80064f0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	4413      	add	r3, r2
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e001      	b.n	80064f4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db70      	blt.n	80065dc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d06d      	beq.n	80065dc <pvPortMalloc+0x130>
 8006500:	4b43      	ldr	r3, [pc, #268]	; (8006610 <pvPortMalloc+0x164>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d868      	bhi.n	80065dc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800650a:	4b42      	ldr	r3, [pc, #264]	; (8006614 <pvPortMalloc+0x168>)
 800650c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800650e:	4b41      	ldr	r3, [pc, #260]	; (8006614 <pvPortMalloc+0x168>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006514:	e004      	b.n	8006520 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d903      	bls.n	8006532 <pvPortMalloc+0x86>
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f1      	bne.n	8006516 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006532:	4b36      	ldr	r3, [pc, #216]	; (800660c <pvPortMalloc+0x160>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	429a      	cmp	r2, r3
 800653a:	d04f      	beq.n	80065dc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2208      	movs	r2, #8
 8006542:	4413      	add	r3, r2
 8006544:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	2308      	movs	r3, #8
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	429a      	cmp	r2, r3
 800655c:	d91f      	bls.n	800659e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <pvPortMalloc+0xda>
        __asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
    }
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	1ad2      	subs	r2, r2, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f000 f8f9 	bl	8006790 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800659e:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <pvPortMalloc+0x164>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <pvPortMalloc+0x164>)
 80065aa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ac:	4b18      	ldr	r3, [pc, #96]	; (8006610 <pvPortMalloc+0x164>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <pvPortMalloc+0x16c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d203      	bcs.n	80065c0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <pvPortMalloc+0x164>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a16      	ldr	r2, [pc, #88]	; (8006618 <pvPortMalloc+0x16c>)
 80065be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <pvPortMalloc+0x170>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a10      	ldr	r2, [pc, #64]	; (800661c <pvPortMalloc+0x170>)
 80065da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80065dc:	f7fe fdc2 	bl	8005164 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <pvPortMalloc+0x154>
        __asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	60fb      	str	r3, [r7, #12]
    }
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <pvPortMalloc+0x152>
    return pvReturn;
 8006600:	69fb      	ldr	r3, [r7, #28]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3728      	adds	r7, #40	; 0x28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20007c48 	.word	0x20007c48
 8006610:	20007c4c 	.word	0x20007c4c
 8006614:	20007c40 	.word	0x20007c40
 8006618:	20007c50 	.word	0x20007c50
 800661c:	20007c54 	.word	0x20007c54

08006620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d049      	beq.n	80066c6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006632:	2308      	movs	r3, #8
 8006634:	425b      	negs	r3, r3
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4413      	add	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db0a      	blt.n	800665e <vPortFree+0x3e>
        __asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60fb      	str	r3, [r7, #12]
    }
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <vPortFree+0x5c>
        __asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60bb      	str	r3, [r7, #8]
    }
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	0fdb      	lsrs	r3, r3, #31
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01c      	beq.n	80066c6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d118      	bne.n	80066c6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80066a0:	f7fe fd52 	bl	8005148 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <vPortFree+0xb0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <vPortFree+0xb0>)
 80066b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066b2:	6938      	ldr	r0, [r7, #16]
 80066b4:	f000 f86c 	bl	8006790 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <vPortFree+0xb4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <vPortFree+0xb4>)
 80066c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80066c2:	f7fe fd4f 	bl	8005164 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80066c6:	bf00      	nop
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20007c4c 	.word	0x20007c4c
 80066d4:	20007c58 	.word	0x20007c58

080066d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066de:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80066e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80066e4:	4b25      	ldr	r3, [pc, #148]	; (800677c <prvHeapInit+0xa4>)
 80066e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3307      	adds	r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	4a1d      	ldr	r2, [pc, #116]	; (800677c <prvHeapInit+0xa4>)
 8006708:	4413      	add	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006710:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <prvHeapInit+0xa8>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <prvHeapInit+0xa8>)
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006724:	2208      	movs	r2, #8
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0307 	bic.w	r3, r3, #7
 8006732:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <prvHeapInit+0xac>)
 8006738:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <prvHeapInit+0xac>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <prvHeapInit+0xac>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <prvHeapInit+0xac>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <prvHeapInit+0xb0>)
 8006766:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a07      	ldr	r2, [pc, #28]	; (800678c <prvHeapInit+0xb4>)
 800676e:	6013      	str	r3, [r2, #0]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000440 	.word	0x20000440
 8006780:	20007c40 	.word	0x20007c40
 8006784:	20007c48 	.word	0x20007c48
 8006788:	20007c50 	.word	0x20007c50
 800678c:	20007c4c 	.word	0x20007c4c

08006790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006798:	4b28      	ldr	r3, [pc, #160]	; (800683c <prvInsertBlockIntoFreeList+0xac>)
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e002      	b.n	80067a4 <prvInsertBlockIntoFreeList+0x14>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d8f7      	bhi.n	800679e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d108      	bne.n	80067d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	441a      	add	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d118      	bne.n	8006818 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <prvInsertBlockIntoFreeList+0xb0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d00d      	beq.n	800680e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e008      	b.n	8006820 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <prvInsertBlockIntoFreeList+0xb0>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e003      	b.n	8006820 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d002      	beq.n	800682e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20007c40 	.word	0x20007c40
 8006840:	20007c48 	.word	0x20007c48

08006844 <__cvt>:
 8006844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	ec55 4b10 	vmov	r4, r5, d0
 800684c:	2d00      	cmp	r5, #0
 800684e:	460e      	mov	r6, r1
 8006850:	4619      	mov	r1, r3
 8006852:	462b      	mov	r3, r5
 8006854:	bfbb      	ittet	lt
 8006856:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800685a:	461d      	movlt	r5, r3
 800685c:	2300      	movge	r3, #0
 800685e:	232d      	movlt	r3, #45	; 0x2d
 8006860:	700b      	strb	r3, [r1, #0]
 8006862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006864:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006868:	4691      	mov	r9, r2
 800686a:	f023 0820 	bic.w	r8, r3, #32
 800686e:	bfbc      	itt	lt
 8006870:	4622      	movlt	r2, r4
 8006872:	4614      	movlt	r4, r2
 8006874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006878:	d005      	beq.n	8006886 <__cvt+0x42>
 800687a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800687e:	d100      	bne.n	8006882 <__cvt+0x3e>
 8006880:	3601      	adds	r6, #1
 8006882:	2102      	movs	r1, #2
 8006884:	e000      	b.n	8006888 <__cvt+0x44>
 8006886:	2103      	movs	r1, #3
 8006888:	ab03      	add	r3, sp, #12
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	ab02      	add	r3, sp, #8
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	ec45 4b10 	vmov	d0, r4, r5
 8006894:	4653      	mov	r3, sl
 8006896:	4632      	mov	r2, r6
 8006898:	f000 ff32 	bl	8007700 <_dtoa_r>
 800689c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068a0:	4607      	mov	r7, r0
 80068a2:	d102      	bne.n	80068aa <__cvt+0x66>
 80068a4:	f019 0f01 	tst.w	r9, #1
 80068a8:	d022      	beq.n	80068f0 <__cvt+0xac>
 80068aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068ae:	eb07 0906 	add.w	r9, r7, r6
 80068b2:	d110      	bne.n	80068d6 <__cvt+0x92>
 80068b4:	783b      	ldrb	r3, [r7, #0]
 80068b6:	2b30      	cmp	r3, #48	; 0x30
 80068b8:	d10a      	bne.n	80068d0 <__cvt+0x8c>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7fa f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c6:	b918      	cbnz	r0, 80068d0 <__cvt+0x8c>
 80068c8:	f1c6 0601 	rsb	r6, r6, #1
 80068cc:	f8ca 6000 	str.w	r6, [sl]
 80068d0:	f8da 3000 	ldr.w	r3, [sl]
 80068d4:	4499      	add	r9, r3
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4620      	mov	r0, r4
 80068dc:	4629      	mov	r1, r5
 80068de:	f7fa f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e2:	b108      	cbz	r0, 80068e8 <__cvt+0xa4>
 80068e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80068e8:	2230      	movs	r2, #48	; 0x30
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	454b      	cmp	r3, r9
 80068ee:	d307      	bcc.n	8006900 <__cvt+0xbc>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f4:	1bdb      	subs	r3, r3, r7
 80068f6:	4638      	mov	r0, r7
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	b004      	add	sp, #16
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	9103      	str	r1, [sp, #12]
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e7f0      	b.n	80068ea <__cvt+0xa6>

08006908 <__exponent>:
 8006908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690a:	4603      	mov	r3, r0
 800690c:	2900      	cmp	r1, #0
 800690e:	bfb8      	it	lt
 8006910:	4249      	neglt	r1, r1
 8006912:	f803 2b02 	strb.w	r2, [r3], #2
 8006916:	bfb4      	ite	lt
 8006918:	222d      	movlt	r2, #45	; 0x2d
 800691a:	222b      	movge	r2, #43	; 0x2b
 800691c:	2909      	cmp	r1, #9
 800691e:	7042      	strb	r2, [r0, #1]
 8006920:	dd2a      	ble.n	8006978 <__exponent+0x70>
 8006922:	f10d 0207 	add.w	r2, sp, #7
 8006926:	4617      	mov	r7, r2
 8006928:	260a      	movs	r6, #10
 800692a:	4694      	mov	ip, r2
 800692c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006930:	fb06 1415 	mls	r4, r6, r5, r1
 8006934:	3430      	adds	r4, #48	; 0x30
 8006936:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800693a:	460c      	mov	r4, r1
 800693c:	2c63      	cmp	r4, #99	; 0x63
 800693e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006942:	4629      	mov	r1, r5
 8006944:	dcf1      	bgt.n	800692a <__exponent+0x22>
 8006946:	3130      	adds	r1, #48	; 0x30
 8006948:	f1ac 0402 	sub.w	r4, ip, #2
 800694c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006950:	1c41      	adds	r1, r0, #1
 8006952:	4622      	mov	r2, r4
 8006954:	42ba      	cmp	r2, r7
 8006956:	d30a      	bcc.n	800696e <__exponent+0x66>
 8006958:	f10d 0209 	add.w	r2, sp, #9
 800695c:	eba2 020c 	sub.w	r2, r2, ip
 8006960:	42bc      	cmp	r4, r7
 8006962:	bf88      	it	hi
 8006964:	2200      	movhi	r2, #0
 8006966:	4413      	add	r3, r2
 8006968:	1a18      	subs	r0, r3, r0
 800696a:	b003      	add	sp, #12
 800696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006972:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006976:	e7ed      	b.n	8006954 <__exponent+0x4c>
 8006978:	2330      	movs	r3, #48	; 0x30
 800697a:	3130      	adds	r1, #48	; 0x30
 800697c:	7083      	strb	r3, [r0, #2]
 800697e:	70c1      	strb	r1, [r0, #3]
 8006980:	1d03      	adds	r3, r0, #4
 8006982:	e7f1      	b.n	8006968 <__exponent+0x60>

08006984 <_printf_float>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	ed2d 8b02 	vpush	{d8}
 800698c:	b08d      	sub	sp, #52	; 0x34
 800698e:	460c      	mov	r4, r1
 8006990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006994:	4616      	mov	r6, r2
 8006996:	461f      	mov	r7, r3
 8006998:	4605      	mov	r5, r0
 800699a:	f000 fda5 	bl	80074e8 <_localeconv_r>
 800699e:	f8d0 a000 	ldr.w	sl, [r0]
 80069a2:	4650      	mov	r0, sl
 80069a4:	f7f9 fc64 	bl	8000270 <strlen>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930a      	str	r3, [sp, #40]	; 0x28
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	f8d8 3000 	ldr.w	r3, [r8]
 80069b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069b8:	3307      	adds	r3, #7
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	f103 0208 	add.w	r2, r3, #8
 80069c2:	f8c8 2000 	str.w	r2, [r8]
 80069c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80069d4:	ee08 0a10 	vmov	s16, r0
 80069d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80069dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069e0:	4b9e      	ldr	r3, [pc, #632]	; (8006c5c <_printf_float+0x2d8>)
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	f7fa f8a1 	bl	8000b2c <__aeabi_dcmpun>
 80069ea:	bb88      	cbnz	r0, 8006a50 <_printf_float+0xcc>
 80069ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069f0:	4b9a      	ldr	r3, [pc, #616]	; (8006c5c <_printf_float+0x2d8>)
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	f7fa f87b 	bl	8000af0 <__aeabi_dcmple>
 80069fa:	bb48      	cbnz	r0, 8006a50 <_printf_float+0xcc>
 80069fc:	2200      	movs	r2, #0
 80069fe:	2300      	movs	r3, #0
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	f7fa f86a 	bl	8000adc <__aeabi_dcmplt>
 8006a08:	b110      	cbz	r0, 8006a10 <_printf_float+0x8c>
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a10:	4a93      	ldr	r2, [pc, #588]	; (8006c60 <_printf_float+0x2dc>)
 8006a12:	4b94      	ldr	r3, [pc, #592]	; (8006c64 <_printf_float+0x2e0>)
 8006a14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a18:	bf94      	ite	ls
 8006a1a:	4690      	movls	r8, r2
 8006a1c:	4698      	movhi	r8, r3
 8006a1e:	2303      	movs	r3, #3
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	f04f 0900 	mov.w	r9, #0
 8006a2e:	9700      	str	r7, [sp, #0]
 8006a30:	4633      	mov	r3, r6
 8006a32:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a34:	4621      	mov	r1, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f9da 	bl	8006df0 <_printf_common>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f040 8090 	bne.w	8006b62 <_printf_float+0x1de>
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	b00d      	add	sp, #52	; 0x34
 8006a48:	ecbd 8b02 	vpop	{d8}
 8006a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7fa f868 	bl	8000b2c <__aeabi_dcmpun>
 8006a5c:	b140      	cbz	r0, 8006a70 <_printf_float+0xec>
 8006a5e:	464b      	mov	r3, r9
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfbc      	itt	lt
 8006a64:	232d      	movlt	r3, #45	; 0x2d
 8006a66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a6a:	4a7f      	ldr	r2, [pc, #508]	; (8006c68 <_printf_float+0x2e4>)
 8006a6c:	4b7f      	ldr	r3, [pc, #508]	; (8006c6c <_printf_float+0x2e8>)
 8006a6e:	e7d1      	b.n	8006a14 <_printf_float+0x90>
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a76:	9206      	str	r2, [sp, #24]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	d13f      	bne.n	8006afc <_printf_float+0x178>
 8006a7c:	2306      	movs	r3, #6
 8006a7e:	6063      	str	r3, [r4, #4]
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	6861      	ldr	r1, [r4, #4]
 8006a84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	ab0a      	add	r3, sp, #40	; 0x28
 8006a8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a92:	ab09      	add	r3, sp, #36	; 0x24
 8006a94:	ec49 8b10 	vmov	d0, r8, r9
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7ff fecf 	bl	8006844 <__cvt>
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aaa:	2b47      	cmp	r3, #71	; 0x47
 8006aac:	4680      	mov	r8, r0
 8006aae:	d108      	bne.n	8006ac2 <_printf_float+0x13e>
 8006ab0:	1cc8      	adds	r0, r1, #3
 8006ab2:	db02      	blt.n	8006aba <_printf_float+0x136>
 8006ab4:	6863      	ldr	r3, [r4, #4]
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	dd41      	ble.n	8006b3e <_printf_float+0x1ba>
 8006aba:	f1ab 0302 	sub.w	r3, fp, #2
 8006abe:	fa5f fb83 	uxtb.w	fp, r3
 8006ac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac6:	d820      	bhi.n	8006b0a <_printf_float+0x186>
 8006ac8:	3901      	subs	r1, #1
 8006aca:	465a      	mov	r2, fp
 8006acc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8006ad2:	f7ff ff19 	bl	8006908 <__exponent>
 8006ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ad8:	1813      	adds	r3, r2, r0
 8006ada:	2a01      	cmp	r2, #1
 8006adc:	4681      	mov	r9, r0
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	dc02      	bgt.n	8006ae8 <_printf_float+0x164>
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	07d2      	lsls	r2, r2, #31
 8006ae6:	d501      	bpl.n	8006aec <_printf_float+0x168>
 8006ae8:	3301      	adds	r3, #1
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d09c      	beq.n	8006a2e <_printf_float+0xaa>
 8006af4:	232d      	movs	r3, #45	; 0x2d
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afa:	e798      	b.n	8006a2e <_printf_float+0xaa>
 8006afc:	9a06      	ldr	r2, [sp, #24]
 8006afe:	2a47      	cmp	r2, #71	; 0x47
 8006b00:	d1be      	bne.n	8006a80 <_printf_float+0xfc>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1bc      	bne.n	8006a80 <_printf_float+0xfc>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7b9      	b.n	8006a7e <_printf_float+0xfa>
 8006b0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b0e:	d118      	bne.n	8006b42 <_printf_float+0x1be>
 8006b10:	2900      	cmp	r1, #0
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	dd0b      	ble.n	8006b2e <_printf_float+0x1aa>
 8006b16:	6121      	str	r1, [r4, #16]
 8006b18:	b913      	cbnz	r3, 8006b20 <_printf_float+0x19c>
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	07d0      	lsls	r0, r2, #31
 8006b1e:	d502      	bpl.n	8006b26 <_printf_float+0x1a2>
 8006b20:	3301      	adds	r3, #1
 8006b22:	440b      	add	r3, r1
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b28:	f04f 0900 	mov.w	r9, #0
 8006b2c:	e7de      	b.n	8006aec <_printf_float+0x168>
 8006b2e:	b913      	cbnz	r3, 8006b36 <_printf_float+0x1b2>
 8006b30:	6822      	ldr	r2, [r4, #0]
 8006b32:	07d2      	lsls	r2, r2, #31
 8006b34:	d501      	bpl.n	8006b3a <_printf_float+0x1b6>
 8006b36:	3302      	adds	r3, #2
 8006b38:	e7f4      	b.n	8006b24 <_printf_float+0x1a0>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e7f2      	b.n	8006b24 <_printf_float+0x1a0>
 8006b3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b44:	4299      	cmp	r1, r3
 8006b46:	db05      	blt.n	8006b54 <_printf_float+0x1d0>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	6121      	str	r1, [r4, #16]
 8006b4c:	07d8      	lsls	r0, r3, #31
 8006b4e:	d5ea      	bpl.n	8006b26 <_printf_float+0x1a2>
 8006b50:	1c4b      	adds	r3, r1, #1
 8006b52:	e7e7      	b.n	8006b24 <_printf_float+0x1a0>
 8006b54:	2900      	cmp	r1, #0
 8006b56:	bfd4      	ite	le
 8006b58:	f1c1 0202 	rsble	r2, r1, #2
 8006b5c:	2201      	movgt	r2, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	e7e0      	b.n	8006b24 <_printf_float+0x1a0>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	055a      	lsls	r2, r3, #21
 8006b66:	d407      	bmi.n	8006b78 <_printf_float+0x1f4>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	d12c      	bne.n	8006bd0 <_printf_float+0x24c>
 8006b76:	e764      	b.n	8006a42 <_printf_float+0xbe>
 8006b78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b7c:	f240 80e0 	bls.w	8006d40 <_printf_float+0x3bc>
 8006b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	f7f9 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d034      	beq.n	8006bfa <_printf_float+0x276>
 8006b90:	4a37      	ldr	r2, [pc, #220]	; (8006c70 <_printf_float+0x2ec>)
 8006b92:	2301      	movs	r3, #1
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f af51 	beq.w	8006a42 <_printf_float+0xbe>
 8006ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	db02      	blt.n	8006bae <_printf_float+0x22a>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	07d8      	lsls	r0, r3, #31
 8006bac:	d510      	bpl.n	8006bd0 <_printf_float+0x24c>
 8006bae:	ee18 3a10 	vmov	r3, s16
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f af41 	beq.w	8006a42 <_printf_float+0xbe>
 8006bc0:	f04f 0800 	mov.w	r8, #0
 8006bc4:	f104 091a 	add.w	r9, r4, #26
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	dc09      	bgt.n	8006be4 <_printf_float+0x260>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	079b      	lsls	r3, r3, #30
 8006bd4:	f100 8107 	bmi.w	8006de6 <_printf_float+0x462>
 8006bd8:	68e0      	ldr	r0, [r4, #12]
 8006bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bdc:	4298      	cmp	r0, r3
 8006bde:	bfb8      	it	lt
 8006be0:	4618      	movlt	r0, r3
 8006be2:	e730      	b.n	8006a46 <_printf_float+0xc2>
 8006be4:	2301      	movs	r3, #1
 8006be6:	464a      	mov	r2, r9
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b8      	blx	r7
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f43f af27 	beq.w	8006a42 <_printf_float+0xbe>
 8006bf4:	f108 0801 	add.w	r8, r8, #1
 8006bf8:	e7e6      	b.n	8006bc8 <_printf_float+0x244>
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dc39      	bgt.n	8006c74 <_printf_float+0x2f0>
 8006c00:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <_printf_float+0x2ec>)
 8006c02:	2301      	movs	r3, #1
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f43f af19 	beq.w	8006a42 <_printf_float+0xbe>
 8006c10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c14:	4313      	orrs	r3, r2
 8006c16:	d102      	bne.n	8006c1e <_printf_float+0x29a>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	07d9      	lsls	r1, r3, #31
 8006c1c:	d5d8      	bpl.n	8006bd0 <_printf_float+0x24c>
 8006c1e:	ee18 3a10 	vmov	r3, s16
 8006c22:	4652      	mov	r2, sl
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f af09 	beq.w	8006a42 <_printf_float+0xbe>
 8006c30:	f04f 0900 	mov.w	r9, #0
 8006c34:	f104 0a1a 	add.w	sl, r4, #26
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	454b      	cmp	r3, r9
 8006c3e:	dc01      	bgt.n	8006c44 <_printf_float+0x2c0>
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	e792      	b.n	8006b6a <_printf_float+0x1e6>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4652      	mov	r2, sl
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f aef7 	beq.w	8006a42 <_printf_float+0xbe>
 8006c54:	f109 0901 	add.w	r9, r9, #1
 8006c58:	e7ee      	b.n	8006c38 <_printf_float+0x2b4>
 8006c5a:	bf00      	nop
 8006c5c:	7fefffff 	.word	0x7fefffff
 8006c60:	080092b4 	.word	0x080092b4
 8006c64:	080092b8 	.word	0x080092b8
 8006c68:	080092bc 	.word	0x080092bc
 8006c6c:	080092c0 	.word	0x080092c0
 8006c70:	080092c4 	.word	0x080092c4
 8006c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	bfa8      	it	ge
 8006c7c:	461a      	movge	r2, r3
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	4691      	mov	r9, r2
 8006c82:	dc37      	bgt.n	8006cf4 <_printf_float+0x370>
 8006c84:	f04f 0b00 	mov.w	fp, #0
 8006c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c8c:	f104 021a 	add.w	r2, r4, #26
 8006c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	eba3 0309 	sub.w	r3, r3, r9
 8006c98:	455b      	cmp	r3, fp
 8006c9a:	dc33      	bgt.n	8006d04 <_printf_float+0x380>
 8006c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	db3b      	blt.n	8006d1c <_printf_float+0x398>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07da      	lsls	r2, r3, #31
 8006ca8:	d438      	bmi.n	8006d1c <_printf_float+0x398>
 8006caa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cae:	eba2 0903 	sub.w	r9, r2, r3
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	4591      	cmp	r9, r2
 8006cb8:	bfa8      	it	ge
 8006cba:	4691      	movge	r9, r2
 8006cbc:	f1b9 0f00 	cmp.w	r9, #0
 8006cc0:	dc35      	bgt.n	8006d2e <_printf_float+0x3aa>
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cca:	f104 0a1a 	add.w	sl, r4, #26
 8006cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd2:	1a9b      	subs	r3, r3, r2
 8006cd4:	eba3 0309 	sub.w	r3, r3, r9
 8006cd8:	4543      	cmp	r3, r8
 8006cda:	f77f af79 	ble.w	8006bd0 <_printf_float+0x24c>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f aeaa 	beq.w	8006a42 <_printf_float+0xbe>
 8006cee:	f108 0801 	add.w	r8, r8, #1
 8006cf2:	e7ec      	b.n	8006cce <_printf_float+0x34a>
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d1c0      	bne.n	8006c84 <_printf_float+0x300>
 8006d02:	e69e      	b.n	8006a42 <_printf_float+0xbe>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	9205      	str	r2, [sp, #20]
 8006d0c:	47b8      	blx	r7
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f43f ae97 	beq.w	8006a42 <_printf_float+0xbe>
 8006d14:	9a05      	ldr	r2, [sp, #20]
 8006d16:	f10b 0b01 	add.w	fp, fp, #1
 8006d1a:	e7b9      	b.n	8006c90 <_printf_float+0x30c>
 8006d1c:	ee18 3a10 	vmov	r3, s16
 8006d20:	4652      	mov	r2, sl
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1be      	bne.n	8006caa <_printf_float+0x326>
 8006d2c:	e689      	b.n	8006a42 <_printf_float+0xbe>
 8006d2e:	9a05      	ldr	r2, [sp, #20]
 8006d30:	464b      	mov	r3, r9
 8006d32:	4442      	add	r2, r8
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d1c1      	bne.n	8006cc2 <_printf_float+0x33e>
 8006d3e:	e680      	b.n	8006a42 <_printf_float+0xbe>
 8006d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d42:	2a01      	cmp	r2, #1
 8006d44:	dc01      	bgt.n	8006d4a <_printf_float+0x3c6>
 8006d46:	07db      	lsls	r3, r3, #31
 8006d48:	d53a      	bpl.n	8006dc0 <_printf_float+0x43c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f ae74 	beq.w	8006a42 <_printf_float+0xbe>
 8006d5a:	ee18 3a10 	vmov	r3, s16
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f ae6b 	beq.w	8006a42 <_printf_float+0xbe>
 8006d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d70:	2200      	movs	r2, #0
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d78:	f7f9 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d7c:	b9d8      	cbnz	r0, 8006db6 <_printf_float+0x432>
 8006d7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d82:	f108 0201 	add.w	r2, r8, #1
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d10e      	bne.n	8006dae <_printf_float+0x42a>
 8006d90:	e657      	b.n	8006a42 <_printf_float+0xbe>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4652      	mov	r2, sl
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae50 	beq.w	8006a42 <_printf_float+0xbe>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4543      	cmp	r3, r8
 8006dac:	dcf1      	bgt.n	8006d92 <_printf_float+0x40e>
 8006dae:	464b      	mov	r3, r9
 8006db0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006db4:	e6da      	b.n	8006b6c <_printf_float+0x1e8>
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	f104 0a1a 	add.w	sl, r4, #26
 8006dbe:	e7f2      	b.n	8006da6 <_printf_float+0x422>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	e7df      	b.n	8006d86 <_printf_float+0x402>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	464a      	mov	r2, r9
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f ae36 	beq.w	8006a42 <_printf_float+0xbe>
 8006dd6:	f108 0801 	add.w	r8, r8, #1
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dde:	1a5b      	subs	r3, r3, r1
 8006de0:	4543      	cmp	r3, r8
 8006de2:	dcf0      	bgt.n	8006dc6 <_printf_float+0x442>
 8006de4:	e6f8      	b.n	8006bd8 <_printf_float+0x254>
 8006de6:	f04f 0800 	mov.w	r8, #0
 8006dea:	f104 0919 	add.w	r9, r4, #25
 8006dee:	e7f4      	b.n	8006dda <_printf_float+0x456>

08006df0 <_printf_common>:
 8006df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	4616      	mov	r6, r2
 8006df6:	4699      	mov	r9, r3
 8006df8:	688a      	ldr	r2, [r1, #8]
 8006dfa:	690b      	ldr	r3, [r1, #16]
 8006dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bfb8      	it	lt
 8006e04:	4613      	movlt	r3, r2
 8006e06:	6033      	str	r3, [r6, #0]
 8006e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	b10a      	cbz	r2, 8006e16 <_printf_common+0x26>
 8006e12:	3301      	adds	r3, #1
 8006e14:	6033      	str	r3, [r6, #0]
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	0699      	lsls	r1, r3, #26
 8006e1a:	bf42      	ittt	mi
 8006e1c:	6833      	ldrmi	r3, [r6, #0]
 8006e1e:	3302      	addmi	r3, #2
 8006e20:	6033      	strmi	r3, [r6, #0]
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	f015 0506 	ands.w	r5, r5, #6
 8006e28:	d106      	bne.n	8006e38 <_printf_common+0x48>
 8006e2a:	f104 0a19 	add.w	sl, r4, #25
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	6832      	ldr	r2, [r6, #0]
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	42ab      	cmp	r3, r5
 8006e36:	dc26      	bgt.n	8006e86 <_printf_common+0x96>
 8006e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e3c:	1e13      	subs	r3, r2, #0
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	bf18      	it	ne
 8006e42:	2301      	movne	r3, #1
 8006e44:	0692      	lsls	r2, r2, #26
 8006e46:	d42b      	bmi.n	8006ea0 <_printf_common+0xb0>
 8006e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4638      	mov	r0, r7
 8006e50:	47c0      	blx	r8
 8006e52:	3001      	adds	r0, #1
 8006e54:	d01e      	beq.n	8006e94 <_printf_common+0xa4>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	6922      	ldr	r2, [r4, #16]
 8006e5a:	f003 0306 	and.w	r3, r3, #6
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	bf02      	ittt	eq
 8006e62:	68e5      	ldreq	r5, [r4, #12]
 8006e64:	6833      	ldreq	r3, [r6, #0]
 8006e66:	1aed      	subeq	r5, r5, r3
 8006e68:	68a3      	ldr	r3, [r4, #8]
 8006e6a:	bf0c      	ite	eq
 8006e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e70:	2500      	movne	r5, #0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	bfc4      	itt	gt
 8006e76:	1a9b      	subgt	r3, r3, r2
 8006e78:	18ed      	addgt	r5, r5, r3
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	341a      	adds	r4, #26
 8006e7e:	42b5      	cmp	r5, r6
 8006e80:	d11a      	bne.n	8006eb8 <_printf_common+0xc8>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e008      	b.n	8006e98 <_printf_common+0xa8>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4652      	mov	r2, sl
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	47c0      	blx	r8
 8006e90:	3001      	adds	r0, #1
 8006e92:	d103      	bne.n	8006e9c <_printf_common+0xac>
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	e7c6      	b.n	8006e2e <_printf_common+0x3e>
 8006ea0:	18e1      	adds	r1, r4, r3
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	2030      	movs	r0, #48	; 0x30
 8006ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eaa:	4422      	add	r2, r4
 8006eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	e7c7      	b.n	8006e48 <_printf_common+0x58>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	47c0      	blx	r8
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d0e6      	beq.n	8006e94 <_printf_common+0xa4>
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7d9      	b.n	8006e7e <_printf_common+0x8e>
	...

08006ecc <_printf_i>:
 8006ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	7e0f      	ldrb	r7, [r1, #24]
 8006ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed4:	2f78      	cmp	r7, #120	; 0x78
 8006ed6:	4691      	mov	r9, r2
 8006ed8:	4680      	mov	r8, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	469a      	mov	sl, r3
 8006ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ee2:	d807      	bhi.n	8006ef4 <_printf_i+0x28>
 8006ee4:	2f62      	cmp	r7, #98	; 0x62
 8006ee6:	d80a      	bhi.n	8006efe <_printf_i+0x32>
 8006ee8:	2f00      	cmp	r7, #0
 8006eea:	f000 80d4 	beq.w	8007096 <_printf_i+0x1ca>
 8006eee:	2f58      	cmp	r7, #88	; 0x58
 8006ef0:	f000 80c0 	beq.w	8007074 <_printf_i+0x1a8>
 8006ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006efc:	e03a      	b.n	8006f74 <_printf_i+0xa8>
 8006efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f02:	2b15      	cmp	r3, #21
 8006f04:	d8f6      	bhi.n	8006ef4 <_printf_i+0x28>
 8006f06:	a101      	add	r1, pc, #4	; (adr r1, 8006f0c <_printf_i+0x40>)
 8006f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f79 	.word	0x08006f79
 8006f14:	08006ef5 	.word	0x08006ef5
 8006f18:	08006ef5 	.word	0x08006ef5
 8006f1c:	08006ef5 	.word	0x08006ef5
 8006f20:	08006ef5 	.word	0x08006ef5
 8006f24:	08006f79 	.word	0x08006f79
 8006f28:	08006ef5 	.word	0x08006ef5
 8006f2c:	08006ef5 	.word	0x08006ef5
 8006f30:	08006ef5 	.word	0x08006ef5
 8006f34:	08006ef5 	.word	0x08006ef5
 8006f38:	0800707d 	.word	0x0800707d
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08007037 	.word	0x08007037
 8006f44:	08006ef5 	.word	0x08006ef5
 8006f48:	08006ef5 	.word	0x08006ef5
 8006f4c:	0800709f 	.word	0x0800709f
 8006f50:	08006ef5 	.word	0x08006ef5
 8006f54:	08006fa5 	.word	0x08006fa5
 8006f58:	08006ef5 	.word	0x08006ef5
 8006f5c:	08006ef5 	.word	0x08006ef5
 8006f60:	0800703f 	.word	0x0800703f
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	602a      	str	r2, [r5, #0]
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f74:	2301      	movs	r3, #1
 8006f76:	e09f      	b.n	80070b8 <_printf_i+0x1ec>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	0607      	lsls	r7, r0, #24
 8006f7e:	f103 0104 	add.w	r1, r3, #4
 8006f82:	6029      	str	r1, [r5, #0]
 8006f84:	d501      	bpl.n	8006f8a <_printf_i+0xbe>
 8006f86:	681e      	ldr	r6, [r3, #0]
 8006f88:	e003      	b.n	8006f92 <_printf_i+0xc6>
 8006f8a:	0646      	lsls	r6, r0, #25
 8006f8c:	d5fb      	bpl.n	8006f86 <_printf_i+0xba>
 8006f8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	da03      	bge.n	8006f9e <_printf_i+0xd2>
 8006f96:	232d      	movs	r3, #45	; 0x2d
 8006f98:	4276      	negs	r6, r6
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9e:	485a      	ldr	r0, [pc, #360]	; (8007108 <_printf_i+0x23c>)
 8006fa0:	230a      	movs	r3, #10
 8006fa2:	e012      	b.n	8006fca <_printf_i+0xfe>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	6029      	str	r1, [r5, #0]
 8006fac:	0605      	lsls	r5, r0, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xe8>
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0xee>
 8006fb4:	0641      	lsls	r1, r0, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xe4>
 8006fb8:	881e      	ldrh	r6, [r3, #0]
 8006fba:	4853      	ldr	r0, [pc, #332]	; (8007108 <_printf_i+0x23c>)
 8006fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2308      	moveq	r3, #8
 8006fc2:	230a      	movne	r3, #10
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fca:	6865      	ldr	r5, [r4, #4]
 8006fcc:	60a5      	str	r5, [r4, #8]
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	bfa2      	ittt	ge
 8006fd2:	6821      	ldrge	r1, [r4, #0]
 8006fd4:	f021 0104 	bicge.w	r1, r1, #4
 8006fd8:	6021      	strge	r1, [r4, #0]
 8006fda:	b90e      	cbnz	r6, 8006fe0 <_printf_i+0x114>
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	d04b      	beq.n	8007078 <_printf_i+0x1ac>
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fea:	5dc7      	ldrb	r7, [r0, r7]
 8006fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	42bb      	cmp	r3, r7
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	d9f4      	bls.n	8006fe2 <_printf_i+0x116>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x148>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07de      	lsls	r6, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x148>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4299      	cmp	r1, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	; 0x30
 800700c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007014:	1b52      	subs	r2, r2, r5
 8007016:	6122      	str	r2, [r4, #16]
 8007018:	f8cd a000 	str.w	sl, [sp]
 800701c:	464b      	mov	r3, r9
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fee4 	bl	8006df0 <_printf_common>
 8007028:	3001      	adds	r0, #1
 800702a:	d14a      	bne.n	80070c2 <_printf_i+0x1f6>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	b004      	add	sp, #16
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	f043 0320 	orr.w	r3, r3, #32
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	4833      	ldr	r0, [pc, #204]	; (800710c <_printf_i+0x240>)
 8007040:	2778      	movs	r7, #120	; 0x78
 8007042:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6829      	ldr	r1, [r5, #0]
 800704a:	061f      	lsls	r7, r3, #24
 800704c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007050:	d402      	bmi.n	8007058 <_printf_i+0x18c>
 8007052:	065f      	lsls	r7, r3, #25
 8007054:	bf48      	it	mi
 8007056:	b2b6      	uxthmi	r6, r6
 8007058:	07df      	lsls	r7, r3, #31
 800705a:	bf48      	it	mi
 800705c:	f043 0320 	orrmi.w	r3, r3, #32
 8007060:	6029      	str	r1, [r5, #0]
 8007062:	bf48      	it	mi
 8007064:	6023      	strmi	r3, [r4, #0]
 8007066:	b91e      	cbnz	r6, 8007070 <_printf_i+0x1a4>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	f023 0320 	bic.w	r3, r3, #32
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	2310      	movs	r3, #16
 8007072:	e7a7      	b.n	8006fc4 <_printf_i+0xf8>
 8007074:	4824      	ldr	r0, [pc, #144]	; (8007108 <_printf_i+0x23c>)
 8007076:	e7e4      	b.n	8007042 <_printf_i+0x176>
 8007078:	4615      	mov	r5, r2
 800707a:	e7bd      	b.n	8006ff8 <_printf_i+0x12c>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	6826      	ldr	r6, [r4, #0]
 8007080:	6961      	ldr	r1, [r4, #20]
 8007082:	1d18      	adds	r0, r3, #4
 8007084:	6028      	str	r0, [r5, #0]
 8007086:	0635      	lsls	r5, r6, #24
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	d501      	bpl.n	8007090 <_printf_i+0x1c4>
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0x1ca>
 8007090:	0670      	lsls	r0, r6, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0x1c0>
 8007094:	8019      	strh	r1, [r3, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	4615      	mov	r5, r2
 800709c:	e7bc      	b.n	8007018 <_printf_i+0x14c>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	1d1a      	adds	r2, r3, #4
 80070a2:	602a      	str	r2, [r5, #0]
 80070a4:	681d      	ldr	r5, [r3, #0]
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	2100      	movs	r1, #0
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7f9 f890 	bl	80001d0 <memchr>
 80070b0:	b108      	cbz	r0, 80070b6 <_printf_i+0x1ea>
 80070b2:	1b40      	subs	r0, r0, r5
 80070b4:	6060      	str	r0, [r4, #4]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	2300      	movs	r3, #0
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	e7aa      	b.n	8007018 <_printf_i+0x14c>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4649      	mov	r1, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	47d0      	blx	sl
 80070cc:	3001      	adds	r0, #1
 80070ce:	d0ad      	beq.n	800702c <_printf_i+0x160>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	079b      	lsls	r3, r3, #30
 80070d4:	d413      	bmi.n	80070fe <_printf_i+0x232>
 80070d6:	68e0      	ldr	r0, [r4, #12]
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	4298      	cmp	r0, r3
 80070dc:	bfb8      	it	lt
 80070de:	4618      	movlt	r0, r3
 80070e0:	e7a6      	b.n	8007030 <_printf_i+0x164>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4632      	mov	r2, r6
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d09d      	beq.n	800702c <_printf_i+0x160>
 80070f0:	3501      	adds	r5, #1
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	9903      	ldr	r1, [sp, #12]
 80070f6:	1a5b      	subs	r3, r3, r1
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dcf2      	bgt.n	80070e2 <_printf_i+0x216>
 80070fc:	e7eb      	b.n	80070d6 <_printf_i+0x20a>
 80070fe:	2500      	movs	r5, #0
 8007100:	f104 0619 	add.w	r6, r4, #25
 8007104:	e7f5      	b.n	80070f2 <_printf_i+0x226>
 8007106:	bf00      	nop
 8007108:	080092c6 	.word	0x080092c6
 800710c:	080092d7 	.word	0x080092d7

08007110 <std>:
 8007110:	2300      	movs	r3, #0
 8007112:	b510      	push	{r4, lr}
 8007114:	4604      	mov	r4, r0
 8007116:	e9c0 3300 	strd	r3, r3, [r0]
 800711a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800711e:	6083      	str	r3, [r0, #8]
 8007120:	8181      	strh	r1, [r0, #12]
 8007122:	6643      	str	r3, [r0, #100]	; 0x64
 8007124:	81c2      	strh	r2, [r0, #14]
 8007126:	6183      	str	r3, [r0, #24]
 8007128:	4619      	mov	r1, r3
 800712a:	2208      	movs	r2, #8
 800712c:	305c      	adds	r0, #92	; 0x5c
 800712e:	f000 f9d3 	bl	80074d8 <memset>
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <std+0x38>)
 8007134:	6263      	str	r3, [r4, #36]	; 0x24
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <std+0x3c>)
 8007138:	62a3      	str	r3, [r4, #40]	; 0x28
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <std+0x40>)
 800713c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x44>)
 8007140:	6224      	str	r4, [r4, #32]
 8007142:	6323      	str	r3, [r4, #48]	; 0x30
 8007144:	bd10      	pop	{r4, pc}
 8007146:	bf00      	nop
 8007148:	08007329 	.word	0x08007329
 800714c:	0800734b 	.word	0x0800734b
 8007150:	08007383 	.word	0x08007383
 8007154:	080073a7 	.word	0x080073a7

08007158 <stdio_exit_handler>:
 8007158:	4a02      	ldr	r2, [pc, #8]	; (8007164 <stdio_exit_handler+0xc>)
 800715a:	4903      	ldr	r1, [pc, #12]	; (8007168 <stdio_exit_handler+0x10>)
 800715c:	4803      	ldr	r0, [pc, #12]	; (800716c <stdio_exit_handler+0x14>)
 800715e:	f000 b869 	b.w	8007234 <_fwalk_sglue>
 8007162:	bf00      	nop
 8007164:	20000014 	.word	0x20000014
 8007168:	08008ce9 	.word	0x08008ce9
 800716c:	20000020 	.word	0x20000020

08007170 <cleanup_stdio>:
 8007170:	6841      	ldr	r1, [r0, #4]
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <cleanup_stdio+0x34>)
 8007174:	4299      	cmp	r1, r3
 8007176:	b510      	push	{r4, lr}
 8007178:	4604      	mov	r4, r0
 800717a:	d001      	beq.n	8007180 <cleanup_stdio+0x10>
 800717c:	f001 fdb4 	bl	8008ce8 <_fflush_r>
 8007180:	68a1      	ldr	r1, [r4, #8]
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <cleanup_stdio+0x38>)
 8007184:	4299      	cmp	r1, r3
 8007186:	d002      	beq.n	800718e <cleanup_stdio+0x1e>
 8007188:	4620      	mov	r0, r4
 800718a:	f001 fdad 	bl	8008ce8 <_fflush_r>
 800718e:	68e1      	ldr	r1, [r4, #12]
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <cleanup_stdio+0x3c>)
 8007192:	4299      	cmp	r1, r3
 8007194:	d004      	beq.n	80071a0 <cleanup_stdio+0x30>
 8007196:	4620      	mov	r0, r4
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	f001 bda4 	b.w	8008ce8 <_fflush_r>
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	bf00      	nop
 80071a4:	20007c5c 	.word	0x20007c5c
 80071a8:	20007cc4 	.word	0x20007cc4
 80071ac:	20007d2c 	.word	0x20007d2c

080071b0 <global_stdio_init.part.0>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <global_stdio_init.part.0+0x30>)
 80071b4:	4c0b      	ldr	r4, [pc, #44]	; (80071e4 <global_stdio_init.part.0+0x34>)
 80071b6:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <global_stdio_init.part.0+0x38>)
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	4620      	mov	r0, r4
 80071bc:	2200      	movs	r2, #0
 80071be:	2104      	movs	r1, #4
 80071c0:	f7ff ffa6 	bl	8007110 <std>
 80071c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071c8:	2201      	movs	r2, #1
 80071ca:	2109      	movs	r1, #9
 80071cc:	f7ff ffa0 	bl	8007110 <std>
 80071d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071d4:	2202      	movs	r2, #2
 80071d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071da:	2112      	movs	r1, #18
 80071dc:	f7ff bf98 	b.w	8007110 <std>
 80071e0:	20007d94 	.word	0x20007d94
 80071e4:	20007c5c 	.word	0x20007c5c
 80071e8:	08007159 	.word	0x08007159

080071ec <__sfp_lock_acquire>:
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__sfp_lock_acquire+0x8>)
 80071ee:	f000 b9ef 	b.w	80075d0 <__retarget_lock_acquire_recursive>
 80071f2:	bf00      	nop
 80071f4:	20007d9d 	.word	0x20007d9d

080071f8 <__sfp_lock_release>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__sfp_lock_release+0x8>)
 80071fa:	f000 b9ea 	b.w	80075d2 <__retarget_lock_release_recursive>
 80071fe:	bf00      	nop
 8007200:	20007d9d 	.word	0x20007d9d

08007204 <__sinit>:
 8007204:	b510      	push	{r4, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	f7ff fff0 	bl	80071ec <__sfp_lock_acquire>
 800720c:	6a23      	ldr	r3, [r4, #32]
 800720e:	b11b      	cbz	r3, 8007218 <__sinit+0x14>
 8007210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007214:	f7ff bff0 	b.w	80071f8 <__sfp_lock_release>
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <__sinit+0x28>)
 800721a:	6223      	str	r3, [r4, #32]
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <__sinit+0x2c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f5      	bne.n	8007210 <__sinit+0xc>
 8007224:	f7ff ffc4 	bl	80071b0 <global_stdio_init.part.0>
 8007228:	e7f2      	b.n	8007210 <__sinit+0xc>
 800722a:	bf00      	nop
 800722c:	08007171 	.word	0x08007171
 8007230:	20007d94 	.word	0x20007d94

08007234 <_fwalk_sglue>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4607      	mov	r7, r0
 800723a:	4688      	mov	r8, r1
 800723c:	4614      	mov	r4, r2
 800723e:	2600      	movs	r6, #0
 8007240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007244:	f1b9 0901 	subs.w	r9, r9, #1
 8007248:	d505      	bpl.n	8007256 <_fwalk_sglue+0x22>
 800724a:	6824      	ldr	r4, [r4, #0]
 800724c:	2c00      	cmp	r4, #0
 800724e:	d1f7      	bne.n	8007240 <_fwalk_sglue+0xc>
 8007250:	4630      	mov	r0, r6
 8007252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d907      	bls.n	800726c <_fwalk_sglue+0x38>
 800725c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007260:	3301      	adds	r3, #1
 8007262:	d003      	beq.n	800726c <_fwalk_sglue+0x38>
 8007264:	4629      	mov	r1, r5
 8007266:	4638      	mov	r0, r7
 8007268:	47c0      	blx	r8
 800726a:	4306      	orrs	r6, r0
 800726c:	3568      	adds	r5, #104	; 0x68
 800726e:	e7e9      	b.n	8007244 <_fwalk_sglue+0x10>

08007270 <_puts_r>:
 8007270:	6a03      	ldr	r3, [r0, #32]
 8007272:	b570      	push	{r4, r5, r6, lr}
 8007274:	6884      	ldr	r4, [r0, #8]
 8007276:	4605      	mov	r5, r0
 8007278:	460e      	mov	r6, r1
 800727a:	b90b      	cbnz	r3, 8007280 <_puts_r+0x10>
 800727c:	f7ff ffc2 	bl	8007204 <__sinit>
 8007280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007282:	07db      	lsls	r3, r3, #31
 8007284:	d405      	bmi.n	8007292 <_puts_r+0x22>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	0598      	lsls	r0, r3, #22
 800728a:	d402      	bmi.n	8007292 <_puts_r+0x22>
 800728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728e:	f000 f99f 	bl	80075d0 <__retarget_lock_acquire_recursive>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	0719      	lsls	r1, r3, #28
 8007296:	d513      	bpl.n	80072c0 <_puts_r+0x50>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b18b      	cbz	r3, 80072c0 <_puts_r+0x50>
 800729c:	3e01      	subs	r6, #1
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	b9e9      	cbnz	r1, 80072e6 <_puts_r+0x76>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da2e      	bge.n	800730c <_puts_r+0x9c>
 80072ae:	4622      	mov	r2, r4
 80072b0:	210a      	movs	r1, #10
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f87b 	bl	80073ae <__swbuf_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d007      	beq.n	80072cc <_puts_r+0x5c>
 80072bc:	250a      	movs	r5, #10
 80072be:	e007      	b.n	80072d0 <_puts_r+0x60>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 f8b0 	bl	8007428 <__swsetup_r>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d0e7      	beq.n	800729c <_puts_r+0x2c>
 80072cc:	f04f 35ff 	mov.w	r5, #4294967295
 80072d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d2:	07da      	lsls	r2, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_puts_r+0x72>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	059b      	lsls	r3, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_puts_r+0x72>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f000 f978 	bl	80075d2 <__retarget_lock_release_recursive>
 80072e2:	4628      	mov	r0, r5
 80072e4:	bd70      	pop	{r4, r5, r6, pc}
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da04      	bge.n	80072f4 <_puts_r+0x84>
 80072ea:	69a2      	ldr	r2, [r4, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	dc06      	bgt.n	80072fe <_puts_r+0x8e>
 80072f0:	290a      	cmp	r1, #10
 80072f2:	d004      	beq.n	80072fe <_puts_r+0x8e>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	7019      	strb	r1, [r3, #0]
 80072fc:	e7cf      	b.n	800729e <_puts_r+0x2e>
 80072fe:	4622      	mov	r2, r4
 8007300:	4628      	mov	r0, r5
 8007302:	f000 f854 	bl	80073ae <__swbuf_r>
 8007306:	3001      	adds	r0, #1
 8007308:	d1c9      	bne.n	800729e <_puts_r+0x2e>
 800730a:	e7df      	b.n	80072cc <_puts_r+0x5c>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	250a      	movs	r5, #10
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	6022      	str	r2, [r4, #0]
 8007314:	701d      	strb	r5, [r3, #0]
 8007316:	e7db      	b.n	80072d0 <_puts_r+0x60>

08007318 <puts>:
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <puts+0xc>)
 800731a:	4601      	mov	r1, r0
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	f7ff bfa7 	b.w	8007270 <_puts_r>
 8007322:	bf00      	nop
 8007324:	2000006c 	.word	0x2000006c

08007328 <__sread>:
 8007328:	b510      	push	{r4, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	f000 f900 	bl	8007534 <_read_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	bfab      	itete	ge
 8007338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800733a:	89a3      	ldrhlt	r3, [r4, #12]
 800733c:	181b      	addge	r3, r3, r0
 800733e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007342:	bfac      	ite	ge
 8007344:	6563      	strge	r3, [r4, #84]	; 0x54
 8007346:	81a3      	strhlt	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__swrite>:
 800734a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734e:	461f      	mov	r7, r3
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	05db      	lsls	r3, r3, #23
 8007354:	4605      	mov	r5, r0
 8007356:	460c      	mov	r4, r1
 8007358:	4616      	mov	r6, r2
 800735a:	d505      	bpl.n	8007368 <__swrite+0x1e>
 800735c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007360:	2302      	movs	r3, #2
 8007362:	2200      	movs	r2, #0
 8007364:	f000 f8d4 	bl	8007510 <_lseek_r>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	4628      	mov	r0, r5
 800737a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737e:	f000 b8eb 	b.w	8007558 <_write_r>

08007382 <__sseek>:
 8007382:	b510      	push	{r4, lr}
 8007384:	460c      	mov	r4, r1
 8007386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738a:	f000 f8c1 	bl	8007510 <_lseek_r>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	bf15      	itete	ne
 8007394:	6560      	strne	r0, [r4, #84]	; 0x54
 8007396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800739a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800739e:	81a3      	strheq	r3, [r4, #12]
 80073a0:	bf18      	it	ne
 80073a2:	81a3      	strhne	r3, [r4, #12]
 80073a4:	bd10      	pop	{r4, pc}

080073a6 <__sclose>:
 80073a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073aa:	f000 b8a1 	b.w	80074f0 <_close_r>

080073ae <__swbuf_r>:
 80073ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b0:	460e      	mov	r6, r1
 80073b2:	4614      	mov	r4, r2
 80073b4:	4605      	mov	r5, r0
 80073b6:	b118      	cbz	r0, 80073c0 <__swbuf_r+0x12>
 80073b8:	6a03      	ldr	r3, [r0, #32]
 80073ba:	b90b      	cbnz	r3, 80073c0 <__swbuf_r+0x12>
 80073bc:	f7ff ff22 	bl	8007204 <__sinit>
 80073c0:	69a3      	ldr	r3, [r4, #24]
 80073c2:	60a3      	str	r3, [r4, #8]
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	071a      	lsls	r2, r3, #28
 80073c8:	d525      	bpl.n	8007416 <__swbuf_r+0x68>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	b31b      	cbz	r3, 8007416 <__swbuf_r+0x68>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	1a98      	subs	r0, r3, r2
 80073d4:	6963      	ldr	r3, [r4, #20]
 80073d6:	b2f6      	uxtb	r6, r6
 80073d8:	4283      	cmp	r3, r0
 80073da:	4637      	mov	r7, r6
 80073dc:	dc04      	bgt.n	80073e8 <__swbuf_r+0x3a>
 80073de:	4621      	mov	r1, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f001 fc81 	bl	8008ce8 <_fflush_r>
 80073e6:	b9e0      	cbnz	r0, 8007422 <__swbuf_r+0x74>
 80073e8:	68a3      	ldr	r3, [r4, #8]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	701e      	strb	r6, [r3, #0]
 80073f6:	6962      	ldr	r2, [r4, #20]
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d004      	beq.n	8007408 <__swbuf_r+0x5a>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	07db      	lsls	r3, r3, #31
 8007402:	d506      	bpl.n	8007412 <__swbuf_r+0x64>
 8007404:	2e0a      	cmp	r6, #10
 8007406:	d104      	bne.n	8007412 <__swbuf_r+0x64>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f001 fc6c 	bl	8008ce8 <_fflush_r>
 8007410:	b938      	cbnz	r0, 8007422 <__swbuf_r+0x74>
 8007412:	4638      	mov	r0, r7
 8007414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f805 	bl	8007428 <__swsetup_r>
 800741e:	2800      	cmp	r0, #0
 8007420:	d0d5      	beq.n	80073ce <__swbuf_r+0x20>
 8007422:	f04f 37ff 	mov.w	r7, #4294967295
 8007426:	e7f4      	b.n	8007412 <__swbuf_r+0x64>

08007428 <__swsetup_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <__swsetup_r+0xac>)
 800742c:	4605      	mov	r5, r0
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	460c      	mov	r4, r1
 8007432:	b118      	cbz	r0, 800743c <__swsetup_r+0x14>
 8007434:	6a03      	ldr	r3, [r0, #32]
 8007436:	b90b      	cbnz	r3, 800743c <__swsetup_r+0x14>
 8007438:	f7ff fee4 	bl	8007204 <__sinit>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007442:	0718      	lsls	r0, r3, #28
 8007444:	d422      	bmi.n	800748c <__swsetup_r+0x64>
 8007446:	06d9      	lsls	r1, r3, #27
 8007448:	d407      	bmi.n	800745a <__swsetup_r+0x32>
 800744a:	2309      	movs	r3, #9
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	e034      	b.n	80074c4 <__swsetup_r+0x9c>
 800745a:	0758      	lsls	r0, r3, #29
 800745c:	d512      	bpl.n	8007484 <__swsetup_r+0x5c>
 800745e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007460:	b141      	cbz	r1, 8007474 <__swsetup_r+0x4c>
 8007462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007466:	4299      	cmp	r1, r3
 8007468:	d002      	beq.n	8007470 <__swsetup_r+0x48>
 800746a:	4628      	mov	r0, r5
 800746c:	f000 ff3a 	bl	80082e4 <_free_r>
 8007470:	2300      	movs	r3, #0
 8007472:	6363      	str	r3, [r4, #52]	; 0x34
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	2300      	movs	r3, #0
 800747e:	6063      	str	r3, [r4, #4]
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f043 0308 	orr.w	r3, r3, #8
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	b94b      	cbnz	r3, 80074a4 <__swsetup_r+0x7c>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800749a:	d003      	beq.n	80074a4 <__swsetup_r+0x7c>
 800749c:	4621      	mov	r1, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f001 fc70 	bl	8008d84 <__smakebuf_r>
 80074a4:	89a0      	ldrh	r0, [r4, #12]
 80074a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074aa:	f010 0301 	ands.w	r3, r0, #1
 80074ae:	d00a      	beq.n	80074c6 <__swsetup_r+0x9e>
 80074b0:	2300      	movs	r3, #0
 80074b2:	60a3      	str	r3, [r4, #8]
 80074b4:	6963      	ldr	r3, [r4, #20]
 80074b6:	425b      	negs	r3, r3
 80074b8:	61a3      	str	r3, [r4, #24]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	b943      	cbnz	r3, 80074d0 <__swsetup_r+0xa8>
 80074be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074c2:	d1c4      	bne.n	800744e <__swsetup_r+0x26>
 80074c4:	bd38      	pop	{r3, r4, r5, pc}
 80074c6:	0781      	lsls	r1, r0, #30
 80074c8:	bf58      	it	pl
 80074ca:	6963      	ldrpl	r3, [r4, #20]
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	e7f4      	b.n	80074ba <__swsetup_r+0x92>
 80074d0:	2000      	movs	r0, #0
 80074d2:	e7f7      	b.n	80074c4 <__swsetup_r+0x9c>
 80074d4:	2000006c 	.word	0x2000006c

080074d8 <memset>:
 80074d8:	4402      	add	r2, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <_localeconv_r>:
 80074e8:	4800      	ldr	r0, [pc, #0]	; (80074ec <_localeconv_r+0x4>)
 80074ea:	4770      	bx	lr
 80074ec:	20000160 	.word	0x20000160

080074f0 <_close_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d06      	ldr	r5, [pc, #24]	; (800750c <_close_r+0x1c>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	f7fa f93d 	bl	800177a <_close>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_close_r+0x1a>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_close_r+0x1a>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	20007d98 	.word	0x20007d98

08007510 <_lseek_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	; (8007530 <_lseek_r+0x20>)
 8007514:	4604      	mov	r4, r0
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	2200      	movs	r2, #0
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fa f952 	bl	80017c8 <_lseek>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_lseek_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_lseek_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20007d98 	.word	0x20007d98

08007534 <_read_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_read_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fa f8fc 	bl	8001740 <_read>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_read_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_read_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20007d98 	.word	0x20007d98

08007558 <_write_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_write_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7f9 fc9c 	bl	8000ea4 <_write>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_write_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_write_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20007d98 	.word	0x20007d98

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000006c 	.word	0x2000006c

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	4d0d      	ldr	r5, [pc, #52]	; (80075c0 <__libc_init_array+0x38>)
 800758c:	4c0d      	ldr	r4, [pc, #52]	; (80075c4 <__libc_init_array+0x3c>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	2600      	movs	r6, #0
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	4d0b      	ldr	r5, [pc, #44]	; (80075c8 <__libc_init_array+0x40>)
 800759a:	4c0c      	ldr	r4, [pc, #48]	; (80075cc <__libc_init_array+0x44>)
 800759c:	f001 fe54 	bl	8009248 <_init>
 80075a0:	1b64      	subs	r4, r4, r5
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	2600      	movs	r6, #0
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	0800962c 	.word	0x0800962c
 80075c4:	0800962c 	.word	0x0800962c
 80075c8:	0800962c 	.word	0x0800962c
 80075cc:	08009630 	.word	0x08009630

080075d0 <__retarget_lock_acquire_recursive>:
 80075d0:	4770      	bx	lr

080075d2 <__retarget_lock_release_recursive>:
 80075d2:	4770      	bx	lr

080075d4 <memcpy>:
 80075d4:	440a      	add	r2, r1
 80075d6:	4291      	cmp	r1, r2
 80075d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075dc:	d100      	bne.n	80075e0 <memcpy+0xc>
 80075de:	4770      	bx	lr
 80075e0:	b510      	push	{r4, lr}
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ea:	4291      	cmp	r1, r2
 80075ec:	d1f9      	bne.n	80075e2 <memcpy+0xe>
 80075ee:	bd10      	pop	{r4, pc}

080075f0 <quorem>:
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	6903      	ldr	r3, [r0, #16]
 80075f6:	690c      	ldr	r4, [r1, #16]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	4607      	mov	r7, r0
 80075fc:	db7e      	blt.n	80076fc <quorem+0x10c>
 80075fe:	3c01      	subs	r4, #1
 8007600:	f101 0814 	add.w	r8, r1, #20
 8007604:	f100 0514 	add.w	r5, r0, #20
 8007608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007616:	3301      	adds	r3, #1
 8007618:	429a      	cmp	r2, r3
 800761a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800761e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007622:	fbb2 f6f3 	udiv	r6, r2, r3
 8007626:	d331      	bcc.n	800768c <quorem+0x9c>
 8007628:	f04f 0e00 	mov.w	lr, #0
 800762c:	4640      	mov	r0, r8
 800762e:	46ac      	mov	ip, r5
 8007630:	46f2      	mov	sl, lr
 8007632:	f850 2b04 	ldr.w	r2, [r0], #4
 8007636:	b293      	uxth	r3, r2
 8007638:	fb06 e303 	mla	r3, r6, r3, lr
 800763c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007640:	0c1a      	lsrs	r2, r3, #16
 8007642:	b29b      	uxth	r3, r3
 8007644:	ebaa 0303 	sub.w	r3, sl, r3
 8007648:	f8dc a000 	ldr.w	sl, [ip]
 800764c:	fa13 f38a 	uxtah	r3, r3, sl
 8007650:	fb06 220e 	mla	r2, r6, lr, r2
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800765c:	b292      	uxth	r2, r2
 800765e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007666:	f8bd 3000 	ldrh.w	r3, [sp]
 800766a:	4581      	cmp	r9, r0
 800766c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007670:	f84c 3b04 	str.w	r3, [ip], #4
 8007674:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007678:	d2db      	bcs.n	8007632 <quorem+0x42>
 800767a:	f855 300b 	ldr.w	r3, [r5, fp]
 800767e:	b92b      	cbnz	r3, 800768c <quorem+0x9c>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	3b04      	subs	r3, #4
 8007684:	429d      	cmp	r5, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d32c      	bcc.n	80076e4 <quorem+0xf4>
 800768a:	613c      	str	r4, [r7, #16]
 800768c:	4638      	mov	r0, r7
 800768e:	f001 f9a5 	bl	80089dc <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	db22      	blt.n	80076dc <quorem+0xec>
 8007696:	3601      	adds	r6, #1
 8007698:	4629      	mov	r1, r5
 800769a:	2000      	movs	r0, #0
 800769c:	f858 2b04 	ldr.w	r2, [r8], #4
 80076a0:	f8d1 c000 	ldr.w	ip, [r1]
 80076a4:	b293      	uxth	r3, r2
 80076a6:	1ac3      	subs	r3, r0, r3
 80076a8:	0c12      	lsrs	r2, r2, #16
 80076aa:	fa13 f38c 	uxtah	r3, r3, ip
 80076ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076bc:	45c1      	cmp	r9, r8
 80076be:	f841 3b04 	str.w	r3, [r1], #4
 80076c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076c6:	d2e9      	bcs.n	800769c <quorem+0xac>
 80076c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d0:	b922      	cbnz	r2, 80076dc <quorem+0xec>
 80076d2:	3b04      	subs	r3, #4
 80076d4:	429d      	cmp	r5, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	d30a      	bcc.n	80076f0 <quorem+0x100>
 80076da:	613c      	str	r4, [r7, #16]
 80076dc:	4630      	mov	r0, r6
 80076de:	b003      	add	sp, #12
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	3b04      	subs	r3, #4
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d1ce      	bne.n	800768a <quorem+0x9a>
 80076ec:	3c01      	subs	r4, #1
 80076ee:	e7c9      	b.n	8007684 <quorem+0x94>
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d1f0      	bne.n	80076da <quorem+0xea>
 80076f8:	3c01      	subs	r4, #1
 80076fa:	e7eb      	b.n	80076d4 <quorem+0xe4>
 80076fc:	2000      	movs	r0, #0
 80076fe:	e7ee      	b.n	80076de <quorem+0xee>

08007700 <_dtoa_r>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	ed2d 8b04 	vpush	{d8-d9}
 8007708:	69c5      	ldr	r5, [r0, #28]
 800770a:	b093      	sub	sp, #76	; 0x4c
 800770c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007710:	ec57 6b10 	vmov	r6, r7, d0
 8007714:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007718:	9107      	str	r1, [sp, #28]
 800771a:	4604      	mov	r4, r0
 800771c:	920a      	str	r2, [sp, #40]	; 0x28
 800771e:	930d      	str	r3, [sp, #52]	; 0x34
 8007720:	b975      	cbnz	r5, 8007740 <_dtoa_r+0x40>
 8007722:	2010      	movs	r0, #16
 8007724:	f000 fe2a 	bl	800837c <malloc>
 8007728:	4602      	mov	r2, r0
 800772a:	61e0      	str	r0, [r4, #28]
 800772c:	b920      	cbnz	r0, 8007738 <_dtoa_r+0x38>
 800772e:	4bae      	ldr	r3, [pc, #696]	; (80079e8 <_dtoa_r+0x2e8>)
 8007730:	21ef      	movs	r1, #239	; 0xef
 8007732:	48ae      	ldr	r0, [pc, #696]	; (80079ec <_dtoa_r+0x2ec>)
 8007734:	f001 fb94 	bl	8008e60 <__assert_func>
 8007738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800773c:	6005      	str	r5, [r0, #0]
 800773e:	60c5      	str	r5, [r0, #12]
 8007740:	69e3      	ldr	r3, [r4, #28]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	b151      	cbz	r1, 800775c <_dtoa_r+0x5c>
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	604a      	str	r2, [r1, #4]
 800774a:	2301      	movs	r3, #1
 800774c:	4093      	lsls	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	4620      	mov	r0, r4
 8007752:	f000 ff07 	bl	8008564 <_Bfree>
 8007756:	69e3      	ldr	r3, [r4, #28]
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	1e3b      	subs	r3, r7, #0
 800775e:	bfbb      	ittet	lt
 8007760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007764:	9303      	strlt	r3, [sp, #12]
 8007766:	2300      	movge	r3, #0
 8007768:	2201      	movlt	r2, #1
 800776a:	bfac      	ite	ge
 800776c:	f8c8 3000 	strge.w	r3, [r8]
 8007770:	f8c8 2000 	strlt.w	r2, [r8]
 8007774:	4b9e      	ldr	r3, [pc, #632]	; (80079f0 <_dtoa_r+0x2f0>)
 8007776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800777a:	ea33 0308 	bics.w	r3, r3, r8
 800777e:	d11b      	bne.n	80077b8 <_dtoa_r+0xb8>
 8007780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007782:	f242 730f 	movw	r3, #9999	; 0x270f
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800778c:	4333      	orrs	r3, r6
 800778e:	f000 8593 	beq.w	80082b8 <_dtoa_r+0xbb8>
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	b963      	cbnz	r3, 80077b0 <_dtoa_r+0xb0>
 8007796:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <_dtoa_r+0x2f4>)
 8007798:	e027      	b.n	80077ea <_dtoa_r+0xea>
 800779a:	4b97      	ldr	r3, [pc, #604]	; (80079f8 <_dtoa_r+0x2f8>)
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	9800      	ldr	r0, [sp, #0]
 80077a6:	b013      	add	sp, #76	; 0x4c
 80077a8:	ecbd 8b04 	vpop	{d8-d9}
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	4b90      	ldr	r3, [pc, #576]	; (80079f4 <_dtoa_r+0x2f4>)
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	3303      	adds	r3, #3
 80077b6:	e7f3      	b.n	80077a0 <_dtoa_r+0xa0>
 80077b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	ec51 0b17 	vmov	r0, r1, d7
 80077c2:	eeb0 8a47 	vmov.f32	s16, s14
 80077c6:	eef0 8a67 	vmov.f32	s17, s15
 80077ca:	2300      	movs	r3, #0
 80077cc:	f7f9 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d0:	4681      	mov	r9, r0
 80077d2:	b160      	cbz	r0, 80077ee <_dtoa_r+0xee>
 80077d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077d6:	2301      	movs	r3, #1
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8568 	beq.w	80082b2 <_dtoa_r+0xbb2>
 80077e2:	4b86      	ldr	r3, [pc, #536]	; (80079fc <_dtoa_r+0x2fc>)
 80077e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	e7da      	b.n	80077a4 <_dtoa_r+0xa4>
 80077ee:	aa10      	add	r2, sp, #64	; 0x40
 80077f0:	a911      	add	r1, sp, #68	; 0x44
 80077f2:	4620      	mov	r0, r4
 80077f4:	eeb0 0a48 	vmov.f32	s0, s16
 80077f8:	eef0 0a68 	vmov.f32	s1, s17
 80077fc:	f001 f994 	bl	8008b28 <__d2b>
 8007800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007804:	4682      	mov	sl, r0
 8007806:	2d00      	cmp	r5, #0
 8007808:	d07f      	beq.n	800790a <_dtoa_r+0x20a>
 800780a:	ee18 3a90 	vmov	r3, s17
 800780e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007816:	ec51 0b18 	vmov	r0, r1, d8
 800781a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800781e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007822:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007826:	4619      	mov	r1, r3
 8007828:	2200      	movs	r2, #0
 800782a:	4b75      	ldr	r3, [pc, #468]	; (8007a00 <_dtoa_r+0x300>)
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	a367      	add	r3, pc, #412	; (adr r3, 80079d0 <_dtoa_r+0x2d0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	a367      	add	r3, pc, #412	; (adr r3, 80079d8 <_dtoa_r+0x2d8>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd24 	bl	800028c <__adddf3>
 8007844:	4606      	mov	r6, r0
 8007846:	4628      	mov	r0, r5
 8007848:	460f      	mov	r7, r1
 800784a:	f7f8 fe6b 	bl	8000524 <__aeabi_i2d>
 800784e:	a364      	add	r3, pc, #400	; (adr r3, 80079e0 <_dtoa_r+0x2e0>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fd14 	bl	800028c <__adddf3>
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f7f9 f976 	bl	8000b58 <__aeabi_d2iz>
 800786c:	2200      	movs	r2, #0
 800786e:	4683      	mov	fp, r0
 8007870:	2300      	movs	r3, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f931 	bl	8000adc <__aeabi_dcmplt>
 800787a:	b148      	cbz	r0, 8007890 <_dtoa_r+0x190>
 800787c:	4658      	mov	r0, fp
 800787e:	f7f8 fe51 	bl	8000524 <__aeabi_i2d>
 8007882:	4632      	mov	r2, r6
 8007884:	463b      	mov	r3, r7
 8007886:	f7f9 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800788a:	b908      	cbnz	r0, 8007890 <_dtoa_r+0x190>
 800788c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007890:	f1bb 0f16 	cmp.w	fp, #22
 8007894:	d857      	bhi.n	8007946 <_dtoa_r+0x246>
 8007896:	4b5b      	ldr	r3, [pc, #364]	; (8007a04 <_dtoa_r+0x304>)
 8007898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	ec51 0b18 	vmov	r0, r1, d8
 80078a4:	f7f9 f91a 	bl	8000adc <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d04e      	beq.n	800794a <_dtoa_r+0x24a>
 80078ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078b0:	2300      	movs	r3, #0
 80078b2:	930c      	str	r3, [sp, #48]	; 0x30
 80078b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078b6:	1b5b      	subs	r3, r3, r5
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	bf45      	ittet	mi
 80078bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80078c0:	9305      	strmi	r3, [sp, #20]
 80078c2:	2300      	movpl	r3, #0
 80078c4:	2300      	movmi	r3, #0
 80078c6:	9206      	str	r2, [sp, #24]
 80078c8:	bf54      	ite	pl
 80078ca:	9305      	strpl	r3, [sp, #20]
 80078cc:	9306      	strmi	r3, [sp, #24]
 80078ce:	f1bb 0f00 	cmp.w	fp, #0
 80078d2:	db3c      	blt.n	800794e <_dtoa_r+0x24e>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80078da:	445b      	add	r3, fp
 80078dc:	9306      	str	r3, [sp, #24]
 80078de:	2300      	movs	r3, #0
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	9b07      	ldr	r3, [sp, #28]
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d868      	bhi.n	80079ba <_dtoa_r+0x2ba>
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	bfc4      	itt	gt
 80078ec:	3b04      	subgt	r3, #4
 80078ee:	9307      	strgt	r3, [sp, #28]
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	f1a3 0302 	sub.w	r3, r3, #2
 80078f6:	bfcc      	ite	gt
 80078f8:	2500      	movgt	r5, #0
 80078fa:	2501      	movle	r5, #1
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	f200 8085 	bhi.w	8007a0c <_dtoa_r+0x30c>
 8007902:	e8df f003 	tbb	[pc, r3]
 8007906:	3b2e      	.short	0x3b2e
 8007908:	5839      	.short	0x5839
 800790a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800790e:	441d      	add	r5, r3
 8007910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007914:	2b20      	cmp	r3, #32
 8007916:	bfc1      	itttt	gt
 8007918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800791c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007920:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007924:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007928:	bfd6      	itet	le
 800792a:	f1c3 0320 	rsble	r3, r3, #32
 800792e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007932:	fa06 f003 	lslle.w	r0, r6, r3
 8007936:	f7f8 fde5 	bl	8000504 <__aeabi_ui2d>
 800793a:	2201      	movs	r2, #1
 800793c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007940:	3d01      	subs	r5, #1
 8007942:	920e      	str	r2, [sp, #56]	; 0x38
 8007944:	e76f      	b.n	8007826 <_dtoa_r+0x126>
 8007946:	2301      	movs	r3, #1
 8007948:	e7b3      	b.n	80078b2 <_dtoa_r+0x1b2>
 800794a:	900c      	str	r0, [sp, #48]	; 0x30
 800794c:	e7b2      	b.n	80078b4 <_dtoa_r+0x1b4>
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	eba3 030b 	sub.w	r3, r3, fp
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	f1cb 0300 	rsb	r3, fp, #0
 800795a:	9308      	str	r3, [sp, #32]
 800795c:	2300      	movs	r3, #0
 800795e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007960:	e7bf      	b.n	80078e2 <_dtoa_r+0x1e2>
 8007962:	2300      	movs	r3, #0
 8007964:	9309      	str	r3, [sp, #36]	; 0x24
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc52      	bgt.n	8007a12 <_dtoa_r+0x312>
 800796c:	2301      	movs	r3, #1
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	461a      	mov	r2, r3
 8007974:	920a      	str	r2, [sp, #40]	; 0x28
 8007976:	e00b      	b.n	8007990 <_dtoa_r+0x290>
 8007978:	2301      	movs	r3, #1
 800797a:	e7f3      	b.n	8007964 <_dtoa_r+0x264>
 800797c:	2300      	movs	r3, #0
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007982:	445b      	add	r3, fp
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	bfb8      	it	lt
 800798e:	2301      	movlt	r3, #1
 8007990:	69e0      	ldr	r0, [r4, #28]
 8007992:	2100      	movs	r1, #0
 8007994:	2204      	movs	r2, #4
 8007996:	f102 0614 	add.w	r6, r2, #20
 800799a:	429e      	cmp	r6, r3
 800799c:	d93d      	bls.n	8007a1a <_dtoa_r+0x31a>
 800799e:	6041      	str	r1, [r0, #4]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fd9f 	bl	80084e4 <_Balloc>
 80079a6:	9000      	str	r0, [sp, #0]
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d139      	bne.n	8007a20 <_dtoa_r+0x320>
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <_dtoa_r+0x308>)
 80079ae:	4602      	mov	r2, r0
 80079b0:	f240 11af 	movw	r1, #431	; 0x1af
 80079b4:	e6bd      	b.n	8007732 <_dtoa_r+0x32>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7e1      	b.n	800797e <_dtoa_r+0x27e>
 80079ba:	2501      	movs	r5, #1
 80079bc:	2300      	movs	r3, #0
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	9509      	str	r5, [sp, #36]	; 0x24
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2312      	movs	r3, #18
 80079ce:	e7d1      	b.n	8007974 <_dtoa_r+0x274>
 80079d0:	636f4361 	.word	0x636f4361
 80079d4:	3fd287a7 	.word	0x3fd287a7
 80079d8:	8b60c8b3 	.word	0x8b60c8b3
 80079dc:	3fc68a28 	.word	0x3fc68a28
 80079e0:	509f79fb 	.word	0x509f79fb
 80079e4:	3fd34413 	.word	0x3fd34413
 80079e8:	080092f5 	.word	0x080092f5
 80079ec:	0800930c 	.word	0x0800930c
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	080092f1 	.word	0x080092f1
 80079f8:	080092e8 	.word	0x080092e8
 80079fc:	080092c5 	.word	0x080092c5
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	080093f8 	.word	0x080093f8
 8007a08:	08009364 	.word	0x08009364
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	e7d7      	b.n	80079c2 <_dtoa_r+0x2c2>
 8007a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	e7ba      	b.n	8007990 <_dtoa_r+0x290>
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	0052      	lsls	r2, r2, #1
 8007a1e:	e7ba      	b.n	8007996 <_dtoa_r+0x296>
 8007a20:	69e3      	ldr	r3, [r4, #28]
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	2b0e      	cmp	r3, #14
 8007a2a:	f200 80a8 	bhi.w	8007b7e <_dtoa_r+0x47e>
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	f000 80a5 	beq.w	8007b7e <_dtoa_r+0x47e>
 8007a34:	f1bb 0f00 	cmp.w	fp, #0
 8007a38:	dd38      	ble.n	8007aac <_dtoa_r+0x3ac>
 8007a3a:	4bc0      	ldr	r3, [pc, #768]	; (8007d3c <_dtoa_r+0x63c>)
 8007a3c:	f00b 020f 	and.w	r2, fp, #15
 8007a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a50:	d019      	beq.n	8007a86 <_dtoa_r+0x386>
 8007a52:	4bbb      	ldr	r3, [pc, #748]	; (8007d40 <_dtoa_r+0x640>)
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a5c:	f7f8 fef6 	bl	800084c <__aeabi_ddiv>
 8007a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a64:	f008 080f 	and.w	r8, r8, #15
 8007a68:	2503      	movs	r5, #3
 8007a6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d40 <_dtoa_r+0x640>
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	d10a      	bne.n	8007a8a <_dtoa_r+0x38a>
 8007a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	f7f8 fee6 	bl	800084c <__aeabi_ddiv>
 8007a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a84:	e02b      	b.n	8007ade <_dtoa_r+0x3de>
 8007a86:	2502      	movs	r5, #2
 8007a88:	e7ef      	b.n	8007a6a <_dtoa_r+0x36a>
 8007a8a:	f018 0f01 	tst.w	r8, #1
 8007a8e:	d008      	beq.n	8007aa2 <_dtoa_r+0x3a2>
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a98:	f7f8 fdae 	bl	80005f8 <__aeabi_dmul>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007aa6:	f109 0908 	add.w	r9, r9, #8
 8007aaa:	e7e0      	b.n	8007a6e <_dtoa_r+0x36e>
 8007aac:	f000 809f 	beq.w	8007bee <_dtoa_r+0x4ee>
 8007ab0:	f1cb 0600 	rsb	r6, fp, #0
 8007ab4:	4ba1      	ldr	r3, [pc, #644]	; (8007d3c <_dtoa_r+0x63c>)
 8007ab6:	4fa2      	ldr	r7, [pc, #648]	; (8007d40 <_dtoa_r+0x640>)
 8007ab8:	f006 020f 	and.w	r2, r6, #15
 8007abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	ec51 0b18 	vmov	r0, r1, d8
 8007ac8:	f7f8 fd96 	bl	80005f8 <__aeabi_dmul>
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	1136      	asrs	r6, r6, #4
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2502      	movs	r5, #2
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d17e      	bne.n	8007bd8 <_dtoa_r+0x4d8>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d0      	bne.n	8007a80 <_dtoa_r+0x380>
 8007ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ae0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8084 	beq.w	8007bf2 <_dtoa_r+0x4f2>
 8007aea:	4b96      	ldr	r3, [pc, #600]	; (8007d44 <_dtoa_r+0x644>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fff3 	bl	8000adc <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d07b      	beq.n	8007bf2 <_dtoa_r+0x4f2>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d078      	beq.n	8007bf2 <_dtoa_r+0x4f2>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dd39      	ble.n	8007b7a <_dtoa_r+0x47a>
 8007b06:	4b90      	ldr	r3, [pc, #576]	; (8007d48 <_dtoa_r+0x648>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fd73 	bl	80005f8 <__aeabi_dmul>
 8007b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b16:	9e01      	ldr	r6, [sp, #4]
 8007b18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fcfe 	bl	8000524 <__aeabi_i2d>
 8007b28:	4642      	mov	r2, r8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	4b86      	ldr	r3, [pc, #536]	; (8007d4c <_dtoa_r+0x64c>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbaa 	bl	800028c <__adddf3>
 8007b38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d158      	bne.n	8007bf8 <_dtoa_r+0x4f8>
 8007b46:	4b82      	ldr	r3, [pc, #520]	; (8007d50 <_dtoa_r+0x650>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	f7f8 fb9b 	bl	8000288 <__aeabi_dsub>
 8007b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b56:	4680      	mov	r8, r0
 8007b58:	4689      	mov	r9, r1
 8007b5a:	f7f8 ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8296 	bne.w	8008090 <_dtoa_r+0x990>
 8007b64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b68:	4640      	mov	r0, r8
 8007b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f040 8289 	bne.w	800808c <_dtoa_r+0x98c>
 8007b7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f2c0 814e 	blt.w	8007e22 <_dtoa_r+0x722>
 8007b86:	f1bb 0f0e 	cmp.w	fp, #14
 8007b8a:	f300 814a 	bgt.w	8007e22 <_dtoa_r+0x722>
 8007b8e:	4b6b      	ldr	r3, [pc, #428]	; (8007d3c <_dtoa_r+0x63c>)
 8007b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f280 80dc 	bge.w	8007d58 <_dtoa_r+0x658>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f300 80d8 	bgt.w	8007d58 <_dtoa_r+0x658>
 8007ba8:	f040 826f 	bne.w	800808a <_dtoa_r+0x98a>
 8007bac:	4b68      	ldr	r3, [pc, #416]	; (8007d50 <_dtoa_r+0x650>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bbc:	f7f8 ffa2 	bl	8000b04 <__aeabi_dcmpge>
 8007bc0:	9e04      	ldr	r6, [sp, #16]
 8007bc2:	4637      	mov	r7, r6
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8245 	bne.w	8008054 <_dtoa_r+0x954>
 8007bca:	9d00      	ldr	r5, [sp, #0]
 8007bcc:	2331      	movs	r3, #49	; 0x31
 8007bce:	f805 3b01 	strb.w	r3, [r5], #1
 8007bd2:	f10b 0b01 	add.w	fp, fp, #1
 8007bd6:	e241      	b.n	800805c <_dtoa_r+0x95c>
 8007bd8:	07f2      	lsls	r2, r6, #31
 8007bda:	d505      	bpl.n	8007be8 <_dtoa_r+0x4e8>
 8007bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	3501      	adds	r5, #1
 8007be6:	2301      	movs	r3, #1
 8007be8:	1076      	asrs	r6, r6, #1
 8007bea:	3708      	adds	r7, #8
 8007bec:	e773      	b.n	8007ad6 <_dtoa_r+0x3d6>
 8007bee:	2502      	movs	r5, #2
 8007bf0:	e775      	b.n	8007ade <_dtoa_r+0x3de>
 8007bf2:	9e04      	ldr	r6, [sp, #16]
 8007bf4:	465f      	mov	r7, fp
 8007bf6:	e792      	b.n	8007b1e <_dtoa_r+0x41e>
 8007bf8:	9900      	ldr	r1, [sp, #0]
 8007bfa:	4b50      	ldr	r3, [pc, #320]	; (8007d3c <_dtoa_r+0x63c>)
 8007bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c00:	4431      	add	r1, r6
 8007c02:	9102      	str	r1, [sp, #8]
 8007c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c06:	eeb0 9a47 	vmov.f32	s18, s14
 8007c0a:	eef0 9a67 	vmov.f32	s19, s15
 8007c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d044      	beq.n	8007ca4 <_dtoa_r+0x5a4>
 8007c1a:	494e      	ldr	r1, [pc, #312]	; (8007d54 <_dtoa_r+0x654>)
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7f8 fe15 	bl	800084c <__aeabi_ddiv>
 8007c22:	ec53 2b19 	vmov	r2, r3, d9
 8007c26:	f7f8 fb2f 	bl	8000288 <__aeabi_dsub>
 8007c2a:	9d00      	ldr	r5, [sp, #0]
 8007c2c:	ec41 0b19 	vmov	d9, r0, r1
 8007c30:	4649      	mov	r1, r9
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7f8 ff90 	bl	8000b58 <__aeabi_d2iz>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	f7f8 fc73 	bl	8000524 <__aeabi_i2d>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7f8 fb1f 	bl	8000288 <__aeabi_dsub>
 8007c4a:	3630      	adds	r6, #48	; 0x30
 8007c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c50:	ec53 2b19 	vmov	r2, r3, d9
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	f7f8 ff40 	bl	8000adc <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d164      	bne.n	8007d2a <_dtoa_r+0x62a>
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	4937      	ldr	r1, [pc, #220]	; (8007d44 <_dtoa_r+0x644>)
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fb0e 	bl	8000288 <__aeabi_dsub>
 8007c6c:	ec53 2b19 	vmov	r2, r3, d9
 8007c70:	f7f8 ff34 	bl	8000adc <__aeabi_dcmplt>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f040 80b6 	bne.w	8007de6 <_dtoa_r+0x6e6>
 8007c7a:	9b02      	ldr	r3, [sp, #8]
 8007c7c:	429d      	cmp	r5, r3
 8007c7e:	f43f af7c 	beq.w	8007b7a <_dtoa_r+0x47a>
 8007c82:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <_dtoa_r+0x648>)
 8007c84:	ec51 0b19 	vmov	r0, r1, d9
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <_dtoa_r+0x648>)
 8007c90:	ec41 0b19 	vmov	d9, r0, r1
 8007c94:	2200      	movs	r2, #0
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 fcad 	bl	80005f8 <__aeabi_dmul>
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	e7c5      	b.n	8007c30 <_dtoa_r+0x530>
 8007ca4:	ec51 0b17 	vmov	r0, r1, d7
 8007ca8:	f7f8 fca6 	bl	80005f8 <__aeabi_dmul>
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	9d00      	ldr	r5, [sp, #0]
 8007cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb2:	ec41 0b19 	vmov	d9, r0, r1
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f7f8 ff4d 	bl	8000b58 <__aeabi_d2iz>
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	f7f8 fc30 	bl	8000524 <__aeabi_i2d>
 8007cc4:	3630      	adds	r6, #48	; 0x30
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd6:	9b02      	ldr	r3, [sp, #8]
 8007cd8:	429d      	cmp	r5, r3
 8007cda:	4680      	mov	r8, r0
 8007cdc:	4689      	mov	r9, r1
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	d124      	bne.n	8007d2e <_dtoa_r+0x62e>
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <_dtoa_r+0x654>)
 8007ce6:	ec51 0b19 	vmov	r0, r1, d9
 8007cea:	f7f8 facf 	bl	800028c <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d173      	bne.n	8007de6 <_dtoa_r+0x6e6>
 8007cfe:	ec53 2b19 	vmov	r2, r3, d9
 8007d02:	4914      	ldr	r1, [pc, #80]	; (8007d54 <_dtoa_r+0x654>)
 8007d04:	2000      	movs	r0, #0
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 fee3 	bl	8000adc <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f af2f 	beq.w	8007b7a <_dtoa_r+0x47a>
 8007d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d1e:	1e6b      	subs	r3, r5, #1
 8007d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d26:	2b30      	cmp	r3, #48	; 0x30
 8007d28:	d0f8      	beq.n	8007d1c <_dtoa_r+0x61c>
 8007d2a:	46bb      	mov	fp, r7
 8007d2c:	e04a      	b.n	8007dc4 <_dtoa_r+0x6c4>
 8007d2e:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <_dtoa_r+0x648>)
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	e7bd      	b.n	8007cb6 <_dtoa_r+0x5b6>
 8007d3a:	bf00      	nop
 8007d3c:	080093f8 	.word	0x080093f8
 8007d40:	080093d0 	.word	0x080093d0
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	40240000 	.word	0x40240000
 8007d4c:	401c0000 	.word	0x401c0000
 8007d50:	40140000 	.word	0x40140000
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d5c:	9d00      	ldr	r5, [sp, #0]
 8007d5e:	4642      	mov	r2, r8
 8007d60:	464b      	mov	r3, r9
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 fd71 	bl	800084c <__aeabi_ddiv>
 8007d6a:	f7f8 fef5 	bl	8000b58 <__aeabi_d2iz>
 8007d6e:	9001      	str	r0, [sp, #4]
 8007d70:	f7f8 fbd8 	bl	8000524 <__aeabi_i2d>
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	f7f8 fc3e 	bl	80005f8 <__aeabi_dmul>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 fa80 	bl	8000288 <__aeabi_dsub>
 8007d88:	9e01      	ldr	r6, [sp, #4]
 8007d8a:	9f04      	ldr	r7, [sp, #16]
 8007d8c:	3630      	adds	r6, #48	; 0x30
 8007d8e:	f805 6b01 	strb.w	r6, [r5], #1
 8007d92:	9e00      	ldr	r6, [sp, #0]
 8007d94:	1bae      	subs	r6, r5, r6
 8007d96:	42b7      	cmp	r7, r6
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	d134      	bne.n	8007e08 <_dtoa_r+0x708>
 8007d9e:	f7f8 fa75 	bl	800028c <__adddf3>
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	f7f8 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 8007dae:	b9c8      	cbnz	r0, 8007de4 <_dtoa_r+0x6e4>
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbc:	b110      	cbz	r0, 8007dc4 <_dtoa_r+0x6c4>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	07db      	lsls	r3, r3, #31
 8007dc2:	d40f      	bmi.n	8007de4 <_dtoa_r+0x6e4>
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fbcc 	bl	8008564 <_Bfree>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd0:	702b      	strb	r3, [r5, #0]
 8007dd2:	f10b 0301 	add.w	r3, fp, #1
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f43f ace2 	beq.w	80077a4 <_dtoa_r+0xa4>
 8007de0:	601d      	str	r5, [r3, #0]
 8007de2:	e4df      	b.n	80077a4 <_dtoa_r+0xa4>
 8007de4:	465f      	mov	r7, fp
 8007de6:	462b      	mov	r3, r5
 8007de8:	461d      	mov	r5, r3
 8007dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dee:	2a39      	cmp	r2, #57	; 0x39
 8007df0:	d106      	bne.n	8007e00 <_dtoa_r+0x700>
 8007df2:	9a00      	ldr	r2, [sp, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1f7      	bne.n	8007de8 <_dtoa_r+0x6e8>
 8007df8:	9900      	ldr	r1, [sp, #0]
 8007dfa:	2230      	movs	r2, #48	; 0x30
 8007dfc:	3701      	adds	r7, #1
 8007dfe:	700a      	strb	r2, [r1, #0]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	3201      	adds	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e790      	b.n	8007d2a <_dtoa_r+0x62a>
 8007e08:	4ba3      	ldr	r3, [pc, #652]	; (8008098 <_dtoa_r+0x998>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f7f8 fbf4 	bl	80005f8 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4606      	mov	r6, r0
 8007e16:	460f      	mov	r7, r1
 8007e18:	f7f8 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d09e      	beq.n	8007d5e <_dtoa_r+0x65e>
 8007e20:	e7d0      	b.n	8007dc4 <_dtoa_r+0x6c4>
 8007e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f000 80ca 	beq.w	8007fbe <_dtoa_r+0x8be>
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	f300 80ad 	bgt.w	8007f8c <_dtoa_r+0x88c>
 8007e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	f000 80a5 	beq.w	8007f84 <_dtoa_r+0x884>
 8007e3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e3e:	9e08      	ldr	r6, [sp, #32]
 8007e40:	9d05      	ldr	r5, [sp, #20]
 8007e42:	9a05      	ldr	r2, [sp, #20]
 8007e44:	441a      	add	r2, r3
 8007e46:	9205      	str	r2, [sp, #20]
 8007e48:	9a06      	ldr	r2, [sp, #24]
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	441a      	add	r2, r3
 8007e4e:	4620      	mov	r0, r4
 8007e50:	9206      	str	r2, [sp, #24]
 8007e52:	f000 fc3d 	bl	80086d0 <__i2b>
 8007e56:	4607      	mov	r7, r0
 8007e58:	b165      	cbz	r5, 8007e74 <_dtoa_r+0x774>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd09      	ble.n	8007e74 <_dtoa_r+0x774>
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	9a05      	ldr	r2, [sp, #20]
 8007e64:	bfa8      	it	ge
 8007e66:	462b      	movge	r3, r5
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	9205      	str	r2, [sp, #20]
 8007e6c:	9a06      	ldr	r2, [sp, #24]
 8007e6e:	1aed      	subs	r5, r5, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	b1f3      	cbz	r3, 8007eb6 <_dtoa_r+0x7b6>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80a3 	beq.w	8007fc6 <_dtoa_r+0x8c6>
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	dd10      	ble.n	8007ea6 <_dtoa_r+0x7a6>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4632      	mov	r2, r6
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fce1 	bl	8008850 <__pow5mult>
 8007e8e:	4652      	mov	r2, sl
 8007e90:	4601      	mov	r1, r0
 8007e92:	4607      	mov	r7, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fc31 	bl	80086fc <__multiply>
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fb60 	bl	8008564 <_Bfree>
 8007ea4:	46c2      	mov	sl, r8
 8007ea6:	9b08      	ldr	r3, [sp, #32]
 8007ea8:	1b9a      	subs	r2, r3, r6
 8007eaa:	d004      	beq.n	8007eb6 <_dtoa_r+0x7b6>
 8007eac:	4651      	mov	r1, sl
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fcce 	bl	8008850 <__pow5mult>
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fc09 	bl	80086d0 <__i2b>
 8007ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	f340 8081 	ble.w	8007fca <_dtoa_r+0x8ca>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4601      	mov	r1, r0
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fcbf 	bl	8008850 <__pow5mult>
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	dd7a      	ble.n	8007fd0 <_dtoa_r+0x8d0>
 8007eda:	f04f 0800 	mov.w	r8, #0
 8007ede:	6933      	ldr	r3, [r6, #16]
 8007ee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ee4:	6918      	ldr	r0, [r3, #16]
 8007ee6:	f000 fba5 	bl	8008634 <__hi0bits>
 8007eea:	f1c0 0020 	rsb	r0, r0, #32
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	4418      	add	r0, r3
 8007ef2:	f010 001f 	ands.w	r0, r0, #31
 8007ef6:	f000 8094 	beq.w	8008022 <_dtoa_r+0x922>
 8007efa:	f1c0 0320 	rsb	r3, r0, #32
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	f340 8085 	ble.w	800800e <_dtoa_r+0x90e>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	f1c0 001c 	rsb	r0, r0, #28
 8007f0a:	4403      	add	r3, r0
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	4403      	add	r3, r0
 8007f12:	4405      	add	r5, r0
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	9b05      	ldr	r3, [sp, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dd05      	ble.n	8007f28 <_dtoa_r+0x828>
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fcef 	bl	8008904 <__lshift>
 8007f26:	4682      	mov	sl, r0
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd05      	ble.n	8007f3a <_dtoa_r+0x83a>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	461a      	mov	r2, r3
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 fce6 	bl	8008904 <__lshift>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d072      	beq.n	8008026 <_dtoa_r+0x926>
 8007f40:	4631      	mov	r1, r6
 8007f42:	4650      	mov	r0, sl
 8007f44:	f000 fd4a 	bl	80089dc <__mcmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	da6c      	bge.n	8008026 <_dtoa_r+0x926>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4651      	mov	r1, sl
 8007f50:	220a      	movs	r2, #10
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fb28 	bl	80085a8 <__multadd>
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f5e:	4682      	mov	sl, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 81b0 	beq.w	80082c6 <_dtoa_r+0xbc6>
 8007f66:	2300      	movs	r3, #0
 8007f68:	4639      	mov	r1, r7
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fb1b 	bl	80085a8 <__multadd>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	4607      	mov	r7, r0
 8007f78:	f300 8096 	bgt.w	80080a8 <_dtoa_r+0x9a8>
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	dc59      	bgt.n	8008036 <_dtoa_r+0x936>
 8007f82:	e091      	b.n	80080a8 <_dtoa_r+0x9a8>
 8007f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f8a:	e758      	b.n	8007e3e <_dtoa_r+0x73e>
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	1e5e      	subs	r6, r3, #1
 8007f90:	9b08      	ldr	r3, [sp, #32]
 8007f92:	42b3      	cmp	r3, r6
 8007f94:	bfbf      	itttt	lt
 8007f96:	9b08      	ldrlt	r3, [sp, #32]
 8007f98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f9a:	9608      	strlt	r6, [sp, #32]
 8007f9c:	1af3      	sublt	r3, r6, r3
 8007f9e:	bfb4      	ite	lt
 8007fa0:	18d2      	addlt	r2, r2, r3
 8007fa2:	1b9e      	subge	r6, r3, r6
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	bfbc      	itt	lt
 8007fa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007faa:	2600      	movlt	r6, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfb7      	itett	lt
 8007fb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007fb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007fb8:	1a9d      	sublt	r5, r3, r2
 8007fba:	2300      	movlt	r3, #0
 8007fbc:	e741      	b.n	8007e42 <_dtoa_r+0x742>
 8007fbe:	9e08      	ldr	r6, [sp, #32]
 8007fc0:	9d05      	ldr	r5, [sp, #20]
 8007fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fc4:	e748      	b.n	8007e58 <_dtoa_r+0x758>
 8007fc6:	9a08      	ldr	r2, [sp, #32]
 8007fc8:	e770      	b.n	8007eac <_dtoa_r+0x7ac>
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	dc19      	bgt.n	8008004 <_dtoa_r+0x904>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	b9bb      	cbnz	r3, 8008004 <_dtoa_r+0x904>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fda:	b99b      	cbnz	r3, 8008004 <_dtoa_r+0x904>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe2:	0d1b      	lsrs	r3, r3, #20
 8007fe4:	051b      	lsls	r3, r3, #20
 8007fe6:	b183      	cbz	r3, 800800a <_dtoa_r+0x90a>
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	3301      	adds	r3, #1
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	9b06      	ldr	r3, [sp, #24]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	f04f 0801 	mov.w	r8, #1
 8007ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f af6f 	bne.w	8007ede <_dtoa_r+0x7de>
 8008000:	2001      	movs	r0, #1
 8008002:	e774      	b.n	8007eee <_dtoa_r+0x7ee>
 8008004:	f04f 0800 	mov.w	r8, #0
 8008008:	e7f6      	b.n	8007ff8 <_dtoa_r+0x8f8>
 800800a:	4698      	mov	r8, r3
 800800c:	e7f4      	b.n	8007ff8 <_dtoa_r+0x8f8>
 800800e:	d082      	beq.n	8007f16 <_dtoa_r+0x816>
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	331c      	adds	r3, #28
 8008014:	441a      	add	r2, r3
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	441a      	add	r2, r3
 800801c:	441d      	add	r5, r3
 800801e:	9206      	str	r2, [sp, #24]
 8008020:	e779      	b.n	8007f16 <_dtoa_r+0x816>
 8008022:	4603      	mov	r3, r0
 8008024:	e7f4      	b.n	8008010 <_dtoa_r+0x910>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc37      	bgt.n	800809c <_dtoa_r+0x99c>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	2b02      	cmp	r3, #2
 8008030:	dd34      	ble.n	800809c <_dtoa_r+0x99c>
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	b963      	cbnz	r3, 8008054 <_dtoa_r+0x954>
 800803a:	4631      	mov	r1, r6
 800803c:	2205      	movs	r2, #5
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fab2 	bl	80085a8 <__multadd>
 8008044:	4601      	mov	r1, r0
 8008046:	4606      	mov	r6, r0
 8008048:	4650      	mov	r0, sl
 800804a:	f000 fcc7 	bl	80089dc <__mcmp>
 800804e:	2800      	cmp	r0, #0
 8008050:	f73f adbb 	bgt.w	8007bca <_dtoa_r+0x4ca>
 8008054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008056:	9d00      	ldr	r5, [sp, #0]
 8008058:	ea6f 0b03 	mvn.w	fp, r3
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	4631      	mov	r1, r6
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fa7e 	bl	8008564 <_Bfree>
 8008068:	2f00      	cmp	r7, #0
 800806a:	f43f aeab 	beq.w	8007dc4 <_dtoa_r+0x6c4>
 800806e:	f1b8 0f00 	cmp.w	r8, #0
 8008072:	d005      	beq.n	8008080 <_dtoa_r+0x980>
 8008074:	45b8      	cmp	r8, r7
 8008076:	d003      	beq.n	8008080 <_dtoa_r+0x980>
 8008078:	4641      	mov	r1, r8
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fa72 	bl	8008564 <_Bfree>
 8008080:	4639      	mov	r1, r7
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fa6e 	bl	8008564 <_Bfree>
 8008088:	e69c      	b.n	8007dc4 <_dtoa_r+0x6c4>
 800808a:	2600      	movs	r6, #0
 800808c:	4637      	mov	r7, r6
 800808e:	e7e1      	b.n	8008054 <_dtoa_r+0x954>
 8008090:	46bb      	mov	fp, r7
 8008092:	4637      	mov	r7, r6
 8008094:	e599      	b.n	8007bca <_dtoa_r+0x4ca>
 8008096:	bf00      	nop
 8008098:	40240000 	.word	0x40240000
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80c8 	beq.w	8008234 <_dtoa_r+0xb34>
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	dd05      	ble.n	80080b8 <_dtoa_r+0x9b8>
 80080ac:	4639      	mov	r1, r7
 80080ae:	462a      	mov	r2, r5
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fc27 	bl	8008904 <__lshift>
 80080b6:	4607      	mov	r7, r0
 80080b8:	f1b8 0f00 	cmp.w	r8, #0
 80080bc:	d05b      	beq.n	8008176 <_dtoa_r+0xa76>
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fa0f 	bl	80084e4 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <_dtoa_r+0x9d6>
 80080ca:	4b83      	ldr	r3, [pc, #524]	; (80082d8 <_dtoa_r+0xbd8>)
 80080cc:	4602      	mov	r2, r0
 80080ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80080d2:	f7ff bb2e 	b.w	8007732 <_dtoa_r+0x32>
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	3202      	adds	r2, #2
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	f107 010c 	add.w	r1, r7, #12
 80080e0:	300c      	adds	r0, #12
 80080e2:	f7ff fa77 	bl	80075d4 <memcpy>
 80080e6:	2201      	movs	r2, #1
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fc0a 	bl	8008904 <__lshift>
 80080f0:	9b00      	ldr	r3, [sp, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fa:	4413      	add	r3, r2
 80080fc:	9308      	str	r3, [sp, #32]
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	46b8      	mov	r8, r7
 8008106:	9306      	str	r3, [sp, #24]
 8008108:	4607      	mov	r7, r0
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	4631      	mov	r1, r6
 800810e:	3b01      	subs	r3, #1
 8008110:	4650      	mov	r0, sl
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	f7ff fa6c 	bl	80075f0 <quorem>
 8008118:	4641      	mov	r1, r8
 800811a:	9002      	str	r0, [sp, #8]
 800811c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008120:	4650      	mov	r0, sl
 8008122:	f000 fc5b 	bl	80089dc <__mcmp>
 8008126:	463a      	mov	r2, r7
 8008128:	9005      	str	r0, [sp, #20]
 800812a:	4631      	mov	r1, r6
 800812c:	4620      	mov	r0, r4
 800812e:	f000 fc71 	bl	8008a14 <__mdiff>
 8008132:	68c2      	ldr	r2, [r0, #12]
 8008134:	4605      	mov	r5, r0
 8008136:	bb02      	cbnz	r2, 800817a <_dtoa_r+0xa7a>
 8008138:	4601      	mov	r1, r0
 800813a:	4650      	mov	r0, sl
 800813c:	f000 fc4e 	bl	80089dc <__mcmp>
 8008140:	4602      	mov	r2, r0
 8008142:	4629      	mov	r1, r5
 8008144:	4620      	mov	r0, r4
 8008146:	9209      	str	r2, [sp, #36]	; 0x24
 8008148:	f000 fa0c 	bl	8008564 <_Bfree>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008150:	9d04      	ldr	r5, [sp, #16]
 8008152:	ea43 0102 	orr.w	r1, r3, r2
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	4319      	orrs	r1, r3
 800815a:	d110      	bne.n	800817e <_dtoa_r+0xa7e>
 800815c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008160:	d029      	beq.n	80081b6 <_dtoa_r+0xab6>
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd02      	ble.n	800816e <_dtoa_r+0xa6e>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	f883 9000 	strb.w	r9, [r3]
 8008174:	e774      	b.n	8008060 <_dtoa_r+0x960>
 8008176:	4638      	mov	r0, r7
 8008178:	e7ba      	b.n	80080f0 <_dtoa_r+0x9f0>
 800817a:	2201      	movs	r2, #1
 800817c:	e7e1      	b.n	8008142 <_dtoa_r+0xa42>
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	db04      	blt.n	800818e <_dtoa_r+0xa8e>
 8008184:	9907      	ldr	r1, [sp, #28]
 8008186:	430b      	orrs	r3, r1
 8008188:	9906      	ldr	r1, [sp, #24]
 800818a:	430b      	orrs	r3, r1
 800818c:	d120      	bne.n	80081d0 <_dtoa_r+0xad0>
 800818e:	2a00      	cmp	r2, #0
 8008190:	dded      	ble.n	800816e <_dtoa_r+0xa6e>
 8008192:	4651      	mov	r1, sl
 8008194:	2201      	movs	r2, #1
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fbb4 	bl	8008904 <__lshift>
 800819c:	4631      	mov	r1, r6
 800819e:	4682      	mov	sl, r0
 80081a0:	f000 fc1c 	bl	80089dc <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	dc03      	bgt.n	80081b0 <_dtoa_r+0xab0>
 80081a8:	d1e1      	bne.n	800816e <_dtoa_r+0xa6e>
 80081aa:	f019 0f01 	tst.w	r9, #1
 80081ae:	d0de      	beq.n	800816e <_dtoa_r+0xa6e>
 80081b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081b4:	d1d8      	bne.n	8008168 <_dtoa_r+0xa68>
 80081b6:	9a01      	ldr	r2, [sp, #4]
 80081b8:	2339      	movs	r3, #57	; 0x39
 80081ba:	7013      	strb	r3, [r2, #0]
 80081bc:	462b      	mov	r3, r5
 80081be:	461d      	mov	r5, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081c6:	2a39      	cmp	r2, #57	; 0x39
 80081c8:	d06c      	beq.n	80082a4 <_dtoa_r+0xba4>
 80081ca:	3201      	adds	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e747      	b.n	8008060 <_dtoa_r+0x960>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	dd07      	ble.n	80081e4 <_dtoa_r+0xae4>
 80081d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081d8:	d0ed      	beq.n	80081b6 <_dtoa_r+0xab6>
 80081da:	9a01      	ldr	r2, [sp, #4]
 80081dc:	f109 0301 	add.w	r3, r9, #1
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	e73d      	b.n	8008060 <_dtoa_r+0x960>
 80081e4:	9b04      	ldr	r3, [sp, #16]
 80081e6:	9a08      	ldr	r2, [sp, #32]
 80081e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d043      	beq.n	8008278 <_dtoa_r+0xb78>
 80081f0:	4651      	mov	r1, sl
 80081f2:	2300      	movs	r3, #0
 80081f4:	220a      	movs	r2, #10
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 f9d6 	bl	80085a8 <__multadd>
 80081fc:	45b8      	cmp	r8, r7
 80081fe:	4682      	mov	sl, r0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	f04f 020a 	mov.w	r2, #10
 8008208:	4641      	mov	r1, r8
 800820a:	4620      	mov	r0, r4
 800820c:	d107      	bne.n	800821e <_dtoa_r+0xb1e>
 800820e:	f000 f9cb 	bl	80085a8 <__multadd>
 8008212:	4680      	mov	r8, r0
 8008214:	4607      	mov	r7, r0
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	3301      	adds	r3, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	e775      	b.n	800810a <_dtoa_r+0xa0a>
 800821e:	f000 f9c3 	bl	80085a8 <__multadd>
 8008222:	4639      	mov	r1, r7
 8008224:	4680      	mov	r8, r0
 8008226:	2300      	movs	r3, #0
 8008228:	220a      	movs	r2, #10
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f9bc 	bl	80085a8 <__multadd>
 8008230:	4607      	mov	r7, r0
 8008232:	e7f0      	b.n	8008216 <_dtoa_r+0xb16>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	9d00      	ldr	r5, [sp, #0]
 800823a:	4631      	mov	r1, r6
 800823c:	4650      	mov	r0, sl
 800823e:	f7ff f9d7 	bl	80075f0 <quorem>
 8008242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	f805 9b01 	strb.w	r9, [r5], #1
 800824c:	1aea      	subs	r2, r5, r3
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	4293      	cmp	r3, r2
 8008252:	dd07      	ble.n	8008264 <_dtoa_r+0xb64>
 8008254:	4651      	mov	r1, sl
 8008256:	2300      	movs	r3, #0
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f9a4 	bl	80085a8 <__multadd>
 8008260:	4682      	mov	sl, r0
 8008262:	e7ea      	b.n	800823a <_dtoa_r+0xb3a>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	bfc8      	it	gt
 800826a:	461d      	movgt	r5, r3
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	bfd8      	it	le
 8008270:	2501      	movle	r5, #1
 8008272:	441d      	add	r5, r3
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	4651      	mov	r1, sl
 800827a:	2201      	movs	r2, #1
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fb41 	bl	8008904 <__lshift>
 8008282:	4631      	mov	r1, r6
 8008284:	4682      	mov	sl, r0
 8008286:	f000 fba9 	bl	80089dc <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	dc96      	bgt.n	80081bc <_dtoa_r+0xabc>
 800828e:	d102      	bne.n	8008296 <_dtoa_r+0xb96>
 8008290:	f019 0f01 	tst.w	r9, #1
 8008294:	d192      	bne.n	80081bc <_dtoa_r+0xabc>
 8008296:	462b      	mov	r3, r5
 8008298:	461d      	mov	r5, r3
 800829a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800829e:	2a30      	cmp	r2, #48	; 0x30
 80082a0:	d0fa      	beq.n	8008298 <_dtoa_r+0xb98>
 80082a2:	e6dd      	b.n	8008060 <_dtoa_r+0x960>
 80082a4:	9a00      	ldr	r2, [sp, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d189      	bne.n	80081be <_dtoa_r+0xabe>
 80082aa:	f10b 0b01 	add.w	fp, fp, #1
 80082ae:	2331      	movs	r3, #49	; 0x31
 80082b0:	e796      	b.n	80081e0 <_dtoa_r+0xae0>
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <_dtoa_r+0xbdc>)
 80082b4:	f7ff ba99 	b.w	80077ea <_dtoa_r+0xea>
 80082b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f47f aa6d 	bne.w	800779a <_dtoa_r+0x9a>
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <_dtoa_r+0xbe0>)
 80082c2:	f7ff ba92 	b.w	80077ea <_dtoa_r+0xea>
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dcb5      	bgt.n	8008238 <_dtoa_r+0xb38>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	f73f aeb1 	bgt.w	8008036 <_dtoa_r+0x936>
 80082d4:	e7b0      	b.n	8008238 <_dtoa_r+0xb38>
 80082d6:	bf00      	nop
 80082d8:	08009364 	.word	0x08009364
 80082dc:	080092c4 	.word	0x080092c4
 80082e0:	080092e8 	.word	0x080092e8

080082e4 <_free_r>:
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d044      	beq.n	8008374 <_free_r+0x90>
 80082ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ee:	9001      	str	r0, [sp, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f1a1 0404 	sub.w	r4, r1, #4
 80082f6:	bfb8      	it	lt
 80082f8:	18e4      	addlt	r4, r4, r3
 80082fa:	f000 f8e7 	bl	80084cc <__malloc_lock>
 80082fe:	4a1e      	ldr	r2, [pc, #120]	; (8008378 <_free_r+0x94>)
 8008300:	9801      	ldr	r0, [sp, #4]
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	b933      	cbnz	r3, 8008314 <_free_r+0x30>
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	b003      	add	sp, #12
 800830c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008310:	f000 b8e2 	b.w	80084d8 <__malloc_unlock>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d908      	bls.n	800832a <_free_r+0x46>
 8008318:	6825      	ldr	r5, [r4, #0]
 800831a:	1961      	adds	r1, r4, r5
 800831c:	428b      	cmp	r3, r1
 800831e:	bf01      	itttt	eq
 8008320:	6819      	ldreq	r1, [r3, #0]
 8008322:	685b      	ldreq	r3, [r3, #4]
 8008324:	1949      	addeq	r1, r1, r5
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	e7ed      	b.n	8008306 <_free_r+0x22>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x50>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x46>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1855      	adds	r5, r2, r1
 8008338:	42a5      	cmp	r5, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x70>
 800833c:	6824      	ldr	r4, [r4, #0]
 800833e:	4421      	add	r1, r4
 8008340:	1854      	adds	r4, r2, r1
 8008342:	42a3      	cmp	r3, r4
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1e0      	bne.n	800830a <_free_r+0x26>
 8008348:	681c      	ldr	r4, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	440c      	add	r4, r1
 8008350:	6014      	str	r4, [r2, #0]
 8008352:	e7da      	b.n	800830a <_free_r+0x26>
 8008354:	d902      	bls.n	800835c <_free_r+0x78>
 8008356:	230c      	movs	r3, #12
 8008358:	6003      	str	r3, [r0, #0]
 800835a:	e7d6      	b.n	800830a <_free_r+0x26>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	1961      	adds	r1, r4, r5
 8008360:	428b      	cmp	r3, r1
 8008362:	bf04      	itt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	bf04      	itt	eq
 800836c:	1949      	addeq	r1, r1, r5
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	6054      	str	r4, [r2, #4]
 8008372:	e7ca      	b.n	800830a <_free_r+0x26>
 8008374:	b003      	add	sp, #12
 8008376:	bd30      	pop	{r4, r5, pc}
 8008378:	20007da0 	.word	0x20007da0

0800837c <malloc>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <malloc+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f000 b823 	b.w	80083cc <_malloc_r>
 8008386:	bf00      	nop
 8008388:	2000006c 	.word	0x2000006c

0800838c <sbrk_aligned>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4e0e      	ldr	r6, [pc, #56]	; (80083c8 <sbrk_aligned+0x3c>)
 8008390:	460c      	mov	r4, r1
 8008392:	6831      	ldr	r1, [r6, #0]
 8008394:	4605      	mov	r5, r0
 8008396:	b911      	cbnz	r1, 800839e <sbrk_aligned+0x12>
 8008398:	f000 fd52 	bl	8008e40 <_sbrk_r>
 800839c:	6030      	str	r0, [r6, #0]
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 fd4d 	bl	8008e40 <_sbrk_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d00a      	beq.n	80083c0 <sbrk_aligned+0x34>
 80083aa:	1cc4      	adds	r4, r0, #3
 80083ac:	f024 0403 	bic.w	r4, r4, #3
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d007      	beq.n	80083c4 <sbrk_aligned+0x38>
 80083b4:	1a21      	subs	r1, r4, r0
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 fd42 	bl	8008e40 <_sbrk_r>
 80083bc:	3001      	adds	r0, #1
 80083be:	d101      	bne.n	80083c4 <sbrk_aligned+0x38>
 80083c0:	f04f 34ff 	mov.w	r4, #4294967295
 80083c4:	4620      	mov	r0, r4
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	20007da4 	.word	0x20007da4

080083cc <_malloc_r>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	1ccd      	adds	r5, r1, #3
 80083d2:	f025 0503 	bic.w	r5, r5, #3
 80083d6:	3508      	adds	r5, #8
 80083d8:	2d0c      	cmp	r5, #12
 80083da:	bf38      	it	cc
 80083dc:	250c      	movcc	r5, #12
 80083de:	2d00      	cmp	r5, #0
 80083e0:	4607      	mov	r7, r0
 80083e2:	db01      	blt.n	80083e8 <_malloc_r+0x1c>
 80083e4:	42a9      	cmp	r1, r5
 80083e6:	d905      	bls.n	80083f4 <_malloc_r+0x28>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	2600      	movs	r6, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084c8 <_malloc_r+0xfc>
 80083f8:	f000 f868 	bl	80084cc <__malloc_lock>
 80083fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008400:	461c      	mov	r4, r3
 8008402:	bb5c      	cbnz	r4, 800845c <_malloc_r+0x90>
 8008404:	4629      	mov	r1, r5
 8008406:	4638      	mov	r0, r7
 8008408:	f7ff ffc0 	bl	800838c <sbrk_aligned>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	4604      	mov	r4, r0
 8008410:	d155      	bne.n	80084be <_malloc_r+0xf2>
 8008412:	f8d8 4000 	ldr.w	r4, [r8]
 8008416:	4626      	mov	r6, r4
 8008418:	2e00      	cmp	r6, #0
 800841a:	d145      	bne.n	80084a8 <_malloc_r+0xdc>
 800841c:	2c00      	cmp	r4, #0
 800841e:	d048      	beq.n	80084b2 <_malloc_r+0xe6>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	4631      	mov	r1, r6
 8008424:	4638      	mov	r0, r7
 8008426:	eb04 0903 	add.w	r9, r4, r3
 800842a:	f000 fd09 	bl	8008e40 <_sbrk_r>
 800842e:	4581      	cmp	r9, r0
 8008430:	d13f      	bne.n	80084b2 <_malloc_r+0xe6>
 8008432:	6821      	ldr	r1, [r4, #0]
 8008434:	1a6d      	subs	r5, r5, r1
 8008436:	4629      	mov	r1, r5
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ffa7 	bl	800838c <sbrk_aligned>
 800843e:	3001      	adds	r0, #1
 8008440:	d037      	beq.n	80084b2 <_malloc_r+0xe6>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	442b      	add	r3, r5
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	f8d8 3000 	ldr.w	r3, [r8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d038      	beq.n	80084c2 <_malloc_r+0xf6>
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	42a2      	cmp	r2, r4
 8008454:	d12b      	bne.n	80084ae <_malloc_r+0xe2>
 8008456:	2200      	movs	r2, #0
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	e00f      	b.n	800847c <_malloc_r+0xb0>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	1b52      	subs	r2, r2, r5
 8008460:	d41f      	bmi.n	80084a2 <_malloc_r+0xd6>
 8008462:	2a0b      	cmp	r2, #11
 8008464:	d917      	bls.n	8008496 <_malloc_r+0xca>
 8008466:	1961      	adds	r1, r4, r5
 8008468:	42a3      	cmp	r3, r4
 800846a:	6025      	str	r5, [r4, #0]
 800846c:	bf18      	it	ne
 800846e:	6059      	strne	r1, [r3, #4]
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	bf08      	it	eq
 8008474:	f8c8 1000 	streq.w	r1, [r8]
 8008478:	5162      	str	r2, [r4, r5]
 800847a:	604b      	str	r3, [r1, #4]
 800847c:	4638      	mov	r0, r7
 800847e:	f104 060b 	add.w	r6, r4, #11
 8008482:	f000 f829 	bl	80084d8 <__malloc_unlock>
 8008486:	f026 0607 	bic.w	r6, r6, #7
 800848a:	1d23      	adds	r3, r4, #4
 800848c:	1af2      	subs	r2, r6, r3
 800848e:	d0ae      	beq.n	80083ee <_malloc_r+0x22>
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	50a3      	str	r3, [r4, r2]
 8008494:	e7ab      	b.n	80083ee <_malloc_r+0x22>
 8008496:	42a3      	cmp	r3, r4
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	d1dd      	bne.n	8008458 <_malloc_r+0x8c>
 800849c:	f8c8 2000 	str.w	r2, [r8]
 80084a0:	e7ec      	b.n	800847c <_malloc_r+0xb0>
 80084a2:	4623      	mov	r3, r4
 80084a4:	6864      	ldr	r4, [r4, #4]
 80084a6:	e7ac      	b.n	8008402 <_malloc_r+0x36>
 80084a8:	4634      	mov	r4, r6
 80084aa:	6876      	ldr	r6, [r6, #4]
 80084ac:	e7b4      	b.n	8008418 <_malloc_r+0x4c>
 80084ae:	4613      	mov	r3, r2
 80084b0:	e7cc      	b.n	800844c <_malloc_r+0x80>
 80084b2:	230c      	movs	r3, #12
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4638      	mov	r0, r7
 80084b8:	f000 f80e 	bl	80084d8 <__malloc_unlock>
 80084bc:	e797      	b.n	80083ee <_malloc_r+0x22>
 80084be:	6025      	str	r5, [r4, #0]
 80084c0:	e7dc      	b.n	800847c <_malloc_r+0xb0>
 80084c2:	605b      	str	r3, [r3, #4]
 80084c4:	deff      	udf	#255	; 0xff
 80084c6:	bf00      	nop
 80084c8:	20007da0 	.word	0x20007da0

080084cc <__malloc_lock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__malloc_lock+0x8>)
 80084ce:	f7ff b87f 	b.w	80075d0 <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	20007d9c 	.word	0x20007d9c

080084d8 <__malloc_unlock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_unlock+0x8>)
 80084da:	f7ff b87a 	b.w	80075d2 <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	20007d9c 	.word	0x20007d9c

080084e4 <_Balloc>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	69c6      	ldr	r6, [r0, #28]
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	b976      	cbnz	r6, 800850c <_Balloc+0x28>
 80084ee:	2010      	movs	r0, #16
 80084f0:	f7ff ff44 	bl	800837c <malloc>
 80084f4:	4602      	mov	r2, r0
 80084f6:	61e0      	str	r0, [r4, #28]
 80084f8:	b920      	cbnz	r0, 8008504 <_Balloc+0x20>
 80084fa:	4b18      	ldr	r3, [pc, #96]	; (800855c <_Balloc+0x78>)
 80084fc:	4818      	ldr	r0, [pc, #96]	; (8008560 <_Balloc+0x7c>)
 80084fe:	216b      	movs	r1, #107	; 0x6b
 8008500:	f000 fcae 	bl	8008e60 <__assert_func>
 8008504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008508:	6006      	str	r6, [r0, #0]
 800850a:	60c6      	str	r6, [r0, #12]
 800850c:	69e6      	ldr	r6, [r4, #28]
 800850e:	68f3      	ldr	r3, [r6, #12]
 8008510:	b183      	cbz	r3, 8008534 <_Balloc+0x50>
 8008512:	69e3      	ldr	r3, [r4, #28]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800851a:	b9b8      	cbnz	r0, 800854c <_Balloc+0x68>
 800851c:	2101      	movs	r1, #1
 800851e:	fa01 f605 	lsl.w	r6, r1, r5
 8008522:	1d72      	adds	r2, r6, #5
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fcb8 	bl	8008e9c <_calloc_r>
 800852c:	b160      	cbz	r0, 8008548 <_Balloc+0x64>
 800852e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008532:	e00e      	b.n	8008552 <_Balloc+0x6e>
 8008534:	2221      	movs	r2, #33	; 0x21
 8008536:	2104      	movs	r1, #4
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fcaf 	bl	8008e9c <_calloc_r>
 800853e:	69e3      	ldr	r3, [r4, #28]
 8008540:	60f0      	str	r0, [r6, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e4      	bne.n	8008512 <_Balloc+0x2e>
 8008548:	2000      	movs	r0, #0
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	6802      	ldr	r2, [r0, #0]
 800854e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008552:	2300      	movs	r3, #0
 8008554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008558:	e7f7      	b.n	800854a <_Balloc+0x66>
 800855a:	bf00      	nop
 800855c:	080092f5 	.word	0x080092f5
 8008560:	08009375 	.word	0x08009375

08008564 <_Bfree>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	69c6      	ldr	r6, [r0, #28]
 8008568:	4605      	mov	r5, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b976      	cbnz	r6, 800858c <_Bfree+0x28>
 800856e:	2010      	movs	r0, #16
 8008570:	f7ff ff04 	bl	800837c <malloc>
 8008574:	4602      	mov	r2, r0
 8008576:	61e8      	str	r0, [r5, #28]
 8008578:	b920      	cbnz	r0, 8008584 <_Bfree+0x20>
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <_Bfree+0x3c>)
 800857c:	4809      	ldr	r0, [pc, #36]	; (80085a4 <_Bfree+0x40>)
 800857e:	218f      	movs	r1, #143	; 0x8f
 8008580:	f000 fc6e 	bl	8008e60 <__assert_func>
 8008584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008588:	6006      	str	r6, [r0, #0]
 800858a:	60c6      	str	r6, [r0, #12]
 800858c:	b13c      	cbz	r4, 800859e <_Bfree+0x3a>
 800858e:	69eb      	ldr	r3, [r5, #28]
 8008590:	6862      	ldr	r2, [r4, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008598:	6021      	str	r1, [r4, #0]
 800859a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	080092f5 	.word	0x080092f5
 80085a4:	08009375 	.word	0x08009375

080085a8 <__multadd>:
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ac:	690d      	ldr	r5, [r1, #16]
 80085ae:	4607      	mov	r7, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	461e      	mov	r6, r3
 80085b4:	f101 0c14 	add.w	ip, r1, #20
 80085b8:	2000      	movs	r0, #0
 80085ba:	f8dc 3000 	ldr.w	r3, [ip]
 80085be:	b299      	uxth	r1, r3
 80085c0:	fb02 6101 	mla	r1, r2, r1, r6
 80085c4:	0c1e      	lsrs	r6, r3, #16
 80085c6:	0c0b      	lsrs	r3, r1, #16
 80085c8:	fb02 3306 	mla	r3, r2, r6, r3
 80085cc:	b289      	uxth	r1, r1
 80085ce:	3001      	adds	r0, #1
 80085d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085d4:	4285      	cmp	r5, r0
 80085d6:	f84c 1b04 	str.w	r1, [ip], #4
 80085da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085de:	dcec      	bgt.n	80085ba <__multadd+0x12>
 80085e0:	b30e      	cbz	r6, 8008626 <__multadd+0x7e>
 80085e2:	68a3      	ldr	r3, [r4, #8]
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dc19      	bgt.n	800861c <__multadd+0x74>
 80085e8:	6861      	ldr	r1, [r4, #4]
 80085ea:	4638      	mov	r0, r7
 80085ec:	3101      	adds	r1, #1
 80085ee:	f7ff ff79 	bl	80084e4 <_Balloc>
 80085f2:	4680      	mov	r8, r0
 80085f4:	b928      	cbnz	r0, 8008602 <__multadd+0x5a>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <__multadd+0x84>)
 80085fa:	480d      	ldr	r0, [pc, #52]	; (8008630 <__multadd+0x88>)
 80085fc:	21ba      	movs	r1, #186	; 0xba
 80085fe:	f000 fc2f 	bl	8008e60 <__assert_func>
 8008602:	6922      	ldr	r2, [r4, #16]
 8008604:	3202      	adds	r2, #2
 8008606:	f104 010c 	add.w	r1, r4, #12
 800860a:	0092      	lsls	r2, r2, #2
 800860c:	300c      	adds	r0, #12
 800860e:	f7fe ffe1 	bl	80075d4 <memcpy>
 8008612:	4621      	mov	r1, r4
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ffa5 	bl	8008564 <_Bfree>
 800861a:	4644      	mov	r4, r8
 800861c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008620:	3501      	adds	r5, #1
 8008622:	615e      	str	r6, [r3, #20]
 8008624:	6125      	str	r5, [r4, #16]
 8008626:	4620      	mov	r0, r4
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	08009364 	.word	0x08009364
 8008630:	08009375 	.word	0x08009375

08008634 <__hi0bits>:
 8008634:	0c03      	lsrs	r3, r0, #16
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	b9d3      	cbnz	r3, 8008670 <__hi0bits+0x3c>
 800863a:	0400      	lsls	r0, r0, #16
 800863c:	2310      	movs	r3, #16
 800863e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008642:	bf04      	itt	eq
 8008644:	0200      	lsleq	r0, r0, #8
 8008646:	3308      	addeq	r3, #8
 8008648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800864c:	bf04      	itt	eq
 800864e:	0100      	lsleq	r0, r0, #4
 8008650:	3304      	addeq	r3, #4
 8008652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008656:	bf04      	itt	eq
 8008658:	0080      	lsleq	r0, r0, #2
 800865a:	3302      	addeq	r3, #2
 800865c:	2800      	cmp	r0, #0
 800865e:	db05      	blt.n	800866c <__hi0bits+0x38>
 8008660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008664:	f103 0301 	add.w	r3, r3, #1
 8008668:	bf08      	it	eq
 800866a:	2320      	moveq	r3, #32
 800866c:	4618      	mov	r0, r3
 800866e:	4770      	bx	lr
 8008670:	2300      	movs	r3, #0
 8008672:	e7e4      	b.n	800863e <__hi0bits+0xa>

08008674 <__lo0bits>:
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	f013 0207 	ands.w	r2, r3, #7
 800867a:	d00c      	beq.n	8008696 <__lo0bits+0x22>
 800867c:	07d9      	lsls	r1, r3, #31
 800867e:	d422      	bmi.n	80086c6 <__lo0bits+0x52>
 8008680:	079a      	lsls	r2, r3, #30
 8008682:	bf49      	itett	mi
 8008684:	085b      	lsrmi	r3, r3, #1
 8008686:	089b      	lsrpl	r3, r3, #2
 8008688:	6003      	strmi	r3, [r0, #0]
 800868a:	2201      	movmi	r2, #1
 800868c:	bf5c      	itt	pl
 800868e:	6003      	strpl	r3, [r0, #0]
 8008690:	2202      	movpl	r2, #2
 8008692:	4610      	mov	r0, r2
 8008694:	4770      	bx	lr
 8008696:	b299      	uxth	r1, r3
 8008698:	b909      	cbnz	r1, 800869e <__lo0bits+0x2a>
 800869a:	0c1b      	lsrs	r3, r3, #16
 800869c:	2210      	movs	r2, #16
 800869e:	b2d9      	uxtb	r1, r3
 80086a0:	b909      	cbnz	r1, 80086a6 <__lo0bits+0x32>
 80086a2:	3208      	adds	r2, #8
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	0719      	lsls	r1, r3, #28
 80086a8:	bf04      	itt	eq
 80086aa:	091b      	lsreq	r3, r3, #4
 80086ac:	3204      	addeq	r2, #4
 80086ae:	0799      	lsls	r1, r3, #30
 80086b0:	bf04      	itt	eq
 80086b2:	089b      	lsreq	r3, r3, #2
 80086b4:	3202      	addeq	r2, #2
 80086b6:	07d9      	lsls	r1, r3, #31
 80086b8:	d403      	bmi.n	80086c2 <__lo0bits+0x4e>
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	f102 0201 	add.w	r2, r2, #1
 80086c0:	d003      	beq.n	80086ca <__lo0bits+0x56>
 80086c2:	6003      	str	r3, [r0, #0]
 80086c4:	e7e5      	b.n	8008692 <__lo0bits+0x1e>
 80086c6:	2200      	movs	r2, #0
 80086c8:	e7e3      	b.n	8008692 <__lo0bits+0x1e>
 80086ca:	2220      	movs	r2, #32
 80086cc:	e7e1      	b.n	8008692 <__lo0bits+0x1e>
	...

080086d0 <__i2b>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	2101      	movs	r1, #1
 80086d6:	f7ff ff05 	bl	80084e4 <_Balloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	b928      	cbnz	r0, 80086ea <__i2b+0x1a>
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <__i2b+0x24>)
 80086e0:	4805      	ldr	r0, [pc, #20]	; (80086f8 <__i2b+0x28>)
 80086e2:	f240 1145 	movw	r1, #325	; 0x145
 80086e6:	f000 fbbb 	bl	8008e60 <__assert_func>
 80086ea:	2301      	movs	r3, #1
 80086ec:	6144      	str	r4, [r0, #20]
 80086ee:	6103      	str	r3, [r0, #16]
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	08009364 	.word	0x08009364
 80086f8:	08009375 	.word	0x08009375

080086fc <__multiply>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4691      	mov	r9, r2
 8008702:	690a      	ldr	r2, [r1, #16]
 8008704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008708:	429a      	cmp	r2, r3
 800870a:	bfb8      	it	lt
 800870c:	460b      	movlt	r3, r1
 800870e:	460c      	mov	r4, r1
 8008710:	bfbc      	itt	lt
 8008712:	464c      	movlt	r4, r9
 8008714:	4699      	movlt	r9, r3
 8008716:	6927      	ldr	r7, [r4, #16]
 8008718:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	6861      	ldr	r1, [r4, #4]
 8008720:	eb07 060a 	add.w	r6, r7, sl
 8008724:	42b3      	cmp	r3, r6
 8008726:	b085      	sub	sp, #20
 8008728:	bfb8      	it	lt
 800872a:	3101      	addlt	r1, #1
 800872c:	f7ff feda 	bl	80084e4 <_Balloc>
 8008730:	b930      	cbnz	r0, 8008740 <__multiply+0x44>
 8008732:	4602      	mov	r2, r0
 8008734:	4b44      	ldr	r3, [pc, #272]	; (8008848 <__multiply+0x14c>)
 8008736:	4845      	ldr	r0, [pc, #276]	; (800884c <__multiply+0x150>)
 8008738:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800873c:	f000 fb90 	bl	8008e60 <__assert_func>
 8008740:	f100 0514 	add.w	r5, r0, #20
 8008744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008748:	462b      	mov	r3, r5
 800874a:	2200      	movs	r2, #0
 800874c:	4543      	cmp	r3, r8
 800874e:	d321      	bcc.n	8008794 <__multiply+0x98>
 8008750:	f104 0314 	add.w	r3, r4, #20
 8008754:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008758:	f109 0314 	add.w	r3, r9, #20
 800875c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008760:	9202      	str	r2, [sp, #8]
 8008762:	1b3a      	subs	r2, r7, r4
 8008764:	3a15      	subs	r2, #21
 8008766:	f022 0203 	bic.w	r2, r2, #3
 800876a:	3204      	adds	r2, #4
 800876c:	f104 0115 	add.w	r1, r4, #21
 8008770:	428f      	cmp	r7, r1
 8008772:	bf38      	it	cc
 8008774:	2204      	movcc	r2, #4
 8008776:	9201      	str	r2, [sp, #4]
 8008778:	9a02      	ldr	r2, [sp, #8]
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d80c      	bhi.n	800879a <__multiply+0x9e>
 8008780:	2e00      	cmp	r6, #0
 8008782:	dd03      	ble.n	800878c <__multiply+0x90>
 8008784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05b      	beq.n	8008844 <__multiply+0x148>
 800878c:	6106      	str	r6, [r0, #16]
 800878e:	b005      	add	sp, #20
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	f843 2b04 	str.w	r2, [r3], #4
 8008798:	e7d8      	b.n	800874c <__multiply+0x50>
 800879a:	f8b3 a000 	ldrh.w	sl, [r3]
 800879e:	f1ba 0f00 	cmp.w	sl, #0
 80087a2:	d024      	beq.n	80087ee <__multiply+0xf2>
 80087a4:	f104 0e14 	add.w	lr, r4, #20
 80087a8:	46a9      	mov	r9, r5
 80087aa:	f04f 0c00 	mov.w	ip, #0
 80087ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087b2:	f8d9 1000 	ldr.w	r1, [r9]
 80087b6:	fa1f fb82 	uxth.w	fp, r2
 80087ba:	b289      	uxth	r1, r1
 80087bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80087c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087c4:	f8d9 2000 	ldr.w	r2, [r9]
 80087c8:	4461      	add	r1, ip
 80087ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80087d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087d6:	b289      	uxth	r1, r1
 80087d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087dc:	4577      	cmp	r7, lr
 80087de:	f849 1b04 	str.w	r1, [r9], #4
 80087e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087e6:	d8e2      	bhi.n	80087ae <__multiply+0xb2>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	f845 c002 	str.w	ip, [r5, r2]
 80087ee:	9a03      	ldr	r2, [sp, #12]
 80087f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f4:	3304      	adds	r3, #4
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	d021      	beq.n	8008840 <__multiply+0x144>
 80087fc:	6829      	ldr	r1, [r5, #0]
 80087fe:	f104 0c14 	add.w	ip, r4, #20
 8008802:	46ae      	mov	lr, r5
 8008804:	f04f 0a00 	mov.w	sl, #0
 8008808:	f8bc b000 	ldrh.w	fp, [ip]
 800880c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008810:	fb09 220b 	mla	r2, r9, fp, r2
 8008814:	4452      	add	r2, sl
 8008816:	b289      	uxth	r1, r1
 8008818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800881c:	f84e 1b04 	str.w	r1, [lr], #4
 8008820:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008828:	f8be 1000 	ldrh.w	r1, [lr]
 800882c:	fb09 110a 	mla	r1, r9, sl, r1
 8008830:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008834:	4567      	cmp	r7, ip
 8008836:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800883a:	d8e5      	bhi.n	8008808 <__multiply+0x10c>
 800883c:	9a01      	ldr	r2, [sp, #4]
 800883e:	50a9      	str	r1, [r5, r2]
 8008840:	3504      	adds	r5, #4
 8008842:	e799      	b.n	8008778 <__multiply+0x7c>
 8008844:	3e01      	subs	r6, #1
 8008846:	e79b      	b.n	8008780 <__multiply+0x84>
 8008848:	08009364 	.word	0x08009364
 800884c:	08009375 	.word	0x08009375

08008850 <__pow5mult>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	4615      	mov	r5, r2
 8008856:	f012 0203 	ands.w	r2, r2, #3
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	d007      	beq.n	8008870 <__pow5mult+0x20>
 8008860:	4c25      	ldr	r4, [pc, #148]	; (80088f8 <__pow5mult+0xa8>)
 8008862:	3a01      	subs	r2, #1
 8008864:	2300      	movs	r3, #0
 8008866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800886a:	f7ff fe9d 	bl	80085a8 <__multadd>
 800886e:	4607      	mov	r7, r0
 8008870:	10ad      	asrs	r5, r5, #2
 8008872:	d03d      	beq.n	80088f0 <__pow5mult+0xa0>
 8008874:	69f4      	ldr	r4, [r6, #28]
 8008876:	b97c      	cbnz	r4, 8008898 <__pow5mult+0x48>
 8008878:	2010      	movs	r0, #16
 800887a:	f7ff fd7f 	bl	800837c <malloc>
 800887e:	4602      	mov	r2, r0
 8008880:	61f0      	str	r0, [r6, #28]
 8008882:	b928      	cbnz	r0, 8008890 <__pow5mult+0x40>
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <__pow5mult+0xac>)
 8008886:	481e      	ldr	r0, [pc, #120]	; (8008900 <__pow5mult+0xb0>)
 8008888:	f240 11b3 	movw	r1, #435	; 0x1b3
 800888c:	f000 fae8 	bl	8008e60 <__assert_func>
 8008890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008894:	6004      	str	r4, [r0, #0]
 8008896:	60c4      	str	r4, [r0, #12]
 8008898:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800889c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a0:	b94c      	cbnz	r4, 80088b6 <__pow5mult+0x66>
 80088a2:	f240 2171 	movw	r1, #625	; 0x271
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff12 	bl	80086d0 <__i2b>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b2:	4604      	mov	r4, r0
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	07eb      	lsls	r3, r5, #31
 80088bc:	d50a      	bpl.n	80088d4 <__pow5mult+0x84>
 80088be:	4639      	mov	r1, r7
 80088c0:	4622      	mov	r2, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff ff1a 	bl	80086fc <__multiply>
 80088c8:	4639      	mov	r1, r7
 80088ca:	4680      	mov	r8, r0
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff fe49 	bl	8008564 <_Bfree>
 80088d2:	4647      	mov	r7, r8
 80088d4:	106d      	asrs	r5, r5, #1
 80088d6:	d00b      	beq.n	80088f0 <__pow5mult+0xa0>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	b938      	cbnz	r0, 80088ec <__pow5mult+0x9c>
 80088dc:	4622      	mov	r2, r4
 80088de:	4621      	mov	r1, r4
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7ff ff0b 	bl	80086fc <__multiply>
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	f8c0 9000 	str.w	r9, [r0]
 80088ec:	4604      	mov	r4, r0
 80088ee:	e7e4      	b.n	80088ba <__pow5mult+0x6a>
 80088f0:	4638      	mov	r0, r7
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	bf00      	nop
 80088f8:	080094c0 	.word	0x080094c0
 80088fc:	080092f5 	.word	0x080092f5
 8008900:	08009375 	.word	0x08009375

08008904 <__lshift>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	6849      	ldr	r1, [r1, #4]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	4607      	mov	r7, r0
 8008916:	4691      	mov	r9, r2
 8008918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800891c:	f108 0601 	add.w	r6, r8, #1
 8008920:	42b3      	cmp	r3, r6
 8008922:	db0b      	blt.n	800893c <__lshift+0x38>
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff fddd 	bl	80084e4 <_Balloc>
 800892a:	4605      	mov	r5, r0
 800892c:	b948      	cbnz	r0, 8008942 <__lshift+0x3e>
 800892e:	4602      	mov	r2, r0
 8008930:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <__lshift+0xd0>)
 8008932:	4829      	ldr	r0, [pc, #164]	; (80089d8 <__lshift+0xd4>)
 8008934:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008938:	f000 fa92 	bl	8008e60 <__assert_func>
 800893c:	3101      	adds	r1, #1
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	e7ee      	b.n	8008920 <__lshift+0x1c>
 8008942:	2300      	movs	r3, #0
 8008944:	f100 0114 	add.w	r1, r0, #20
 8008948:	f100 0210 	add.w	r2, r0, #16
 800894c:	4618      	mov	r0, r3
 800894e:	4553      	cmp	r3, sl
 8008950:	db33      	blt.n	80089ba <__lshift+0xb6>
 8008952:	6920      	ldr	r0, [r4, #16]
 8008954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	f019 091f 	ands.w	r9, r9, #31
 8008960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008968:	d02b      	beq.n	80089c2 <__lshift+0xbe>
 800896a:	f1c9 0e20 	rsb	lr, r9, #32
 800896e:	468a      	mov	sl, r1
 8008970:	2200      	movs	r2, #0
 8008972:	6818      	ldr	r0, [r3, #0]
 8008974:	fa00 f009 	lsl.w	r0, r0, r9
 8008978:	4310      	orrs	r0, r2
 800897a:	f84a 0b04 	str.w	r0, [sl], #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	459c      	cmp	ip, r3
 8008984:	fa22 f20e 	lsr.w	r2, r2, lr
 8008988:	d8f3      	bhi.n	8008972 <__lshift+0x6e>
 800898a:	ebac 0304 	sub.w	r3, ip, r4
 800898e:	3b15      	subs	r3, #21
 8008990:	f023 0303 	bic.w	r3, r3, #3
 8008994:	3304      	adds	r3, #4
 8008996:	f104 0015 	add.w	r0, r4, #21
 800899a:	4584      	cmp	ip, r0
 800899c:	bf38      	it	cc
 800899e:	2304      	movcc	r3, #4
 80089a0:	50ca      	str	r2, [r1, r3]
 80089a2:	b10a      	cbz	r2, 80089a8 <__lshift+0xa4>
 80089a4:	f108 0602 	add.w	r6, r8, #2
 80089a8:	3e01      	subs	r6, #1
 80089aa:	4638      	mov	r0, r7
 80089ac:	612e      	str	r6, [r5, #16]
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7ff fdd8 	bl	8008564 <_Bfree>
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80089be:	3301      	adds	r3, #1
 80089c0:	e7c5      	b.n	800894e <__lshift+0x4a>
 80089c2:	3904      	subs	r1, #4
 80089c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089cc:	459c      	cmp	ip, r3
 80089ce:	d8f9      	bhi.n	80089c4 <__lshift+0xc0>
 80089d0:	e7ea      	b.n	80089a8 <__lshift+0xa4>
 80089d2:	bf00      	nop
 80089d4:	08009364 	.word	0x08009364
 80089d8:	08009375 	.word	0x08009375

080089dc <__mcmp>:
 80089dc:	b530      	push	{r4, r5, lr}
 80089de:	6902      	ldr	r2, [r0, #16]
 80089e0:	690c      	ldr	r4, [r1, #16]
 80089e2:	1b12      	subs	r2, r2, r4
 80089e4:	d10e      	bne.n	8008a04 <__mcmp+0x28>
 80089e6:	f100 0314 	add.w	r3, r0, #20
 80089ea:	3114      	adds	r1, #20
 80089ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089fc:	42a5      	cmp	r5, r4
 80089fe:	d003      	beq.n	8008a08 <__mcmp+0x2c>
 8008a00:	d305      	bcc.n	8008a0e <__mcmp+0x32>
 8008a02:	2201      	movs	r2, #1
 8008a04:	4610      	mov	r0, r2
 8008a06:	bd30      	pop	{r4, r5, pc}
 8008a08:	4283      	cmp	r3, r0
 8008a0a:	d3f3      	bcc.n	80089f4 <__mcmp+0x18>
 8008a0c:	e7fa      	b.n	8008a04 <__mcmp+0x28>
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	e7f7      	b.n	8008a04 <__mcmp+0x28>

08008a14 <__mdiff>:
 8008a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4690      	mov	r8, r2
 8008a22:	f7ff ffdb 	bl	80089dc <__mcmp>
 8008a26:	1e05      	subs	r5, r0, #0
 8008a28:	d110      	bne.n	8008a4c <__mdiff+0x38>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff fd59 	bl	80084e4 <_Balloc>
 8008a32:	b930      	cbnz	r0, 8008a42 <__mdiff+0x2e>
 8008a34:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <__mdiff+0x10c>)
 8008a36:	4602      	mov	r2, r0
 8008a38:	f240 2137 	movw	r1, #567	; 0x237
 8008a3c:	4839      	ldr	r0, [pc, #228]	; (8008b24 <__mdiff+0x110>)
 8008a3e:	f000 fa0f 	bl	8008e60 <__assert_func>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	bfa4      	itt	ge
 8008a4e:	4643      	movge	r3, r8
 8008a50:	46a0      	movge	r8, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a58:	bfa6      	itte	ge
 8008a5a:	461c      	movge	r4, r3
 8008a5c:	2500      	movge	r5, #0
 8008a5e:	2501      	movlt	r5, #1
 8008a60:	f7ff fd40 	bl	80084e4 <_Balloc>
 8008a64:	b920      	cbnz	r0, 8008a70 <__mdiff+0x5c>
 8008a66:	4b2e      	ldr	r3, [pc, #184]	; (8008b20 <__mdiff+0x10c>)
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f240 2145 	movw	r1, #581	; 0x245
 8008a6e:	e7e5      	b.n	8008a3c <__mdiff+0x28>
 8008a70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a74:	6926      	ldr	r6, [r4, #16]
 8008a76:	60c5      	str	r5, [r0, #12]
 8008a78:	f104 0914 	add.w	r9, r4, #20
 8008a7c:	f108 0514 	add.w	r5, r8, #20
 8008a80:	f100 0e14 	add.w	lr, r0, #20
 8008a84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a8c:	f108 0210 	add.w	r2, r8, #16
 8008a90:	46f2      	mov	sl, lr
 8008a92:	2100      	movs	r1, #0
 8008a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a9c:	fa11 f88b 	uxtah	r8, r1, fp
 8008aa0:	b299      	uxth	r1, r3
 8008aa2:	0c1b      	lsrs	r3, r3, #16
 8008aa4:	eba8 0801 	sub.w	r8, r8, r1
 8008aa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ab0:	fa1f f888 	uxth.w	r8, r8
 8008ab4:	1419      	asrs	r1, r3, #16
 8008ab6:	454e      	cmp	r6, r9
 8008ab8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008abc:	f84a 3b04 	str.w	r3, [sl], #4
 8008ac0:	d8e8      	bhi.n	8008a94 <__mdiff+0x80>
 8008ac2:	1b33      	subs	r3, r6, r4
 8008ac4:	3b15      	subs	r3, #21
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	3304      	adds	r3, #4
 8008acc:	3415      	adds	r4, #21
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	bf38      	it	cc
 8008ad2:	2304      	movcc	r3, #4
 8008ad4:	441d      	add	r5, r3
 8008ad6:	4473      	add	r3, lr
 8008ad8:	469e      	mov	lr, r3
 8008ada:	462e      	mov	r6, r5
 8008adc:	4566      	cmp	r6, ip
 8008ade:	d30e      	bcc.n	8008afe <__mdiff+0xea>
 8008ae0:	f10c 0203 	add.w	r2, ip, #3
 8008ae4:	1b52      	subs	r2, r2, r5
 8008ae6:	f022 0203 	bic.w	r2, r2, #3
 8008aea:	3d03      	subs	r5, #3
 8008aec:	45ac      	cmp	ip, r5
 8008aee:	bf38      	it	cc
 8008af0:	2200      	movcc	r2, #0
 8008af2:	4413      	add	r3, r2
 8008af4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008af8:	b17a      	cbz	r2, 8008b1a <__mdiff+0x106>
 8008afa:	6107      	str	r7, [r0, #16]
 8008afc:	e7a4      	b.n	8008a48 <__mdiff+0x34>
 8008afe:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b02:	fa11 f288 	uxtah	r2, r1, r8
 8008b06:	1414      	asrs	r4, r2, #16
 8008b08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b0c:	b292      	uxth	r2, r2
 8008b0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b12:	f84e 2b04 	str.w	r2, [lr], #4
 8008b16:	1421      	asrs	r1, r4, #16
 8008b18:	e7e0      	b.n	8008adc <__mdiff+0xc8>
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	e7ea      	b.n	8008af4 <__mdiff+0xe0>
 8008b1e:	bf00      	nop
 8008b20:	08009364 	.word	0x08009364
 8008b24:	08009375 	.word	0x08009375

08008b28 <__d2b>:
 8008b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	2101      	movs	r1, #1
 8008b30:	ec59 8b10 	vmov	r8, r9, d0
 8008b34:	4616      	mov	r6, r2
 8008b36:	f7ff fcd5 	bl	80084e4 <_Balloc>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b930      	cbnz	r0, 8008b4c <__d2b+0x24>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <__d2b+0xac>)
 8008b42:	4825      	ldr	r0, [pc, #148]	; (8008bd8 <__d2b+0xb0>)
 8008b44:	f240 310f 	movw	r1, #783	; 0x30f
 8008b48:	f000 f98a 	bl	8008e60 <__assert_func>
 8008b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b54:	bb2d      	cbnz	r5, 8008ba2 <__d2b+0x7a>
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	f1b8 0300 	subs.w	r3, r8, #0
 8008b5c:	d026      	beq.n	8008bac <__d2b+0x84>
 8008b5e:	4668      	mov	r0, sp
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	f7ff fd87 	bl	8008674 <__lo0bits>
 8008b66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b6a:	b1e8      	cbz	r0, 8008ba8 <__d2b+0x80>
 8008b6c:	f1c0 0320 	rsb	r3, r0, #32
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	430b      	orrs	r3, r1
 8008b76:	40c2      	lsrs	r2, r0
 8008b78:	6163      	str	r3, [r4, #20]
 8008b7a:	9201      	str	r2, [sp, #4]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	61a3      	str	r3, [r4, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf14      	ite	ne
 8008b84:	2202      	movne	r2, #2
 8008b86:	2201      	moveq	r2, #1
 8008b88:	6122      	str	r2, [r4, #16]
 8008b8a:	b1bd      	cbz	r5, 8008bbc <__d2b+0x94>
 8008b8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b90:	4405      	add	r5, r0
 8008b92:	603d      	str	r5, [r7, #0]
 8008b94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba6:	e7d6      	b.n	8008b56 <__d2b+0x2e>
 8008ba8:	6161      	str	r1, [r4, #20]
 8008baa:	e7e7      	b.n	8008b7c <__d2b+0x54>
 8008bac:	a801      	add	r0, sp, #4
 8008bae:	f7ff fd61 	bl	8008674 <__lo0bits>
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	6163      	str	r3, [r4, #20]
 8008bb6:	3020      	adds	r0, #32
 8008bb8:	2201      	movs	r2, #1
 8008bba:	e7e5      	b.n	8008b88 <__d2b+0x60>
 8008bbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bc4:	6038      	str	r0, [r7, #0]
 8008bc6:	6918      	ldr	r0, [r3, #16]
 8008bc8:	f7ff fd34 	bl	8008634 <__hi0bits>
 8008bcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bd0:	e7e2      	b.n	8008b98 <__d2b+0x70>
 8008bd2:	bf00      	nop
 8008bd4:	08009364 	.word	0x08009364
 8008bd8:	08009375 	.word	0x08009375

08008bdc <__sflush_r>:
 8008bdc:	898a      	ldrh	r2, [r1, #12]
 8008bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	0710      	lsls	r0, r2, #28
 8008be6:	460c      	mov	r4, r1
 8008be8:	d458      	bmi.n	8008c9c <__sflush_r+0xc0>
 8008bea:	684b      	ldr	r3, [r1, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc05      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dc02      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d0f9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c08:	682f      	ldr	r7, [r5, #0]
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	d032      	beq.n	8008c76 <__sflush_r+0x9a>
 8008c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	075a      	lsls	r2, r3, #29
 8008c16:	d505      	bpl.n	8008c24 <__sflush_r+0x48>
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	1ac0      	subs	r0, r0, r3
 8008c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c1e:	b10b      	cbz	r3, 8008c24 <__sflush_r+0x48>
 8008c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c22:	1ac0      	subs	r0, r0, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	4602      	mov	r2, r0
 8008c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c2a:	6a21      	ldr	r1, [r4, #32]
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	d106      	bne.n	8008c44 <__sflush_r+0x68>
 8008c36:	6829      	ldr	r1, [r5, #0]
 8008c38:	291d      	cmp	r1, #29
 8008c3a:	d82b      	bhi.n	8008c94 <__sflush_r+0xb8>
 8008c3c:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <__sflush_r+0x108>)
 8008c3e:	410a      	asrs	r2, r1
 8008c40:	07d6      	lsls	r6, r2, #31
 8008c42:	d427      	bmi.n	8008c94 <__sflush_r+0xb8>
 8008c44:	2200      	movs	r2, #0
 8008c46:	6062      	str	r2, [r4, #4]
 8008c48:	04d9      	lsls	r1, r3, #19
 8008c4a:	6922      	ldr	r2, [r4, #16]
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	d504      	bpl.n	8008c5a <__sflush_r+0x7e>
 8008c50:	1c42      	adds	r2, r0, #1
 8008c52:	d101      	bne.n	8008c58 <__sflush_r+0x7c>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b903      	cbnz	r3, 8008c5a <__sflush_r+0x7e>
 8008c58:	6560      	str	r0, [r4, #84]	; 0x54
 8008c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c5c:	602f      	str	r7, [r5, #0]
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d0c9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c66:	4299      	cmp	r1, r3
 8008c68:	d002      	beq.n	8008c70 <__sflush_r+0x94>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7ff fb3a 	bl	80082e4 <_free_r>
 8008c70:	2000      	movs	r0, #0
 8008c72:	6360      	str	r0, [r4, #52]	; 0x34
 8008c74:	e7c0      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	1c41      	adds	r1, r0, #1
 8008c7e:	d1c8      	bne.n	8008c12 <__sflush_r+0x36>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0c5      	beq.n	8008c12 <__sflush_r+0x36>
 8008c86:	2b1d      	cmp	r3, #29
 8008c88:	d001      	beq.n	8008c8e <__sflush_r+0xb2>
 8008c8a:	2b16      	cmp	r3, #22
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0xb6>
 8008c8e:	602f      	str	r7, [r5, #0]
 8008c90:	e7b1      	b.n	8008bf6 <__sflush_r+0x1a>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	e7ad      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c9c:	690f      	ldr	r7, [r1, #16]
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d0a9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008ca2:	0793      	lsls	r3, r2, #30
 8008ca4:	680e      	ldr	r6, [r1, #0]
 8008ca6:	bf08      	it	eq
 8008ca8:	694b      	ldreq	r3, [r1, #20]
 8008caa:	600f      	str	r7, [r1, #0]
 8008cac:	bf18      	it	ne
 8008cae:	2300      	movne	r3, #0
 8008cb0:	eba6 0807 	sub.w	r8, r6, r7
 8008cb4:	608b      	str	r3, [r1, #8]
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	dd9c      	ble.n	8008bf6 <__sflush_r+0x1a>
 8008cbc:	6a21      	ldr	r1, [r4, #32]
 8008cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cc0:	4643      	mov	r3, r8
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dc06      	bgt.n	8008cda <__sflush_r+0xfe>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e78e      	b.n	8008bf8 <__sflush_r+0x1c>
 8008cda:	4407      	add	r7, r0
 8008cdc:	eba8 0800 	sub.w	r8, r8, r0
 8008ce0:	e7e9      	b.n	8008cb6 <__sflush_r+0xda>
 8008ce2:	bf00      	nop
 8008ce4:	dfbffffe 	.word	0xdfbffffe

08008ce8 <_fflush_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	690b      	ldr	r3, [r1, #16]
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_fflush_r+0x10>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	b118      	cbz	r0, 8008d02 <_fflush_r+0x1a>
 8008cfa:	6a03      	ldr	r3, [r0, #32]
 8008cfc:	b90b      	cbnz	r3, 8008d02 <_fflush_r+0x1a>
 8008cfe:	f7fe fa81 	bl	8007204 <__sinit>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f3      	beq.n	8008cf2 <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f7fe fc5b 	bl	80075d0 <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff5d 	bl	8008bdc <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e4      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4e1      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f7fe fc4e 	bl	80075d2 <__retarget_lock_release_recursive>
 8008d36:	e7dd      	b.n	8008cf4 <_fflush_r+0xc>

08008d38 <__swhatbuf_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	b096      	sub	sp, #88	; 0x58
 8008d44:	4615      	mov	r5, r2
 8008d46:	461e      	mov	r6, r3
 8008d48:	da0d      	bge.n	8008d66 <__swhatbuf_r+0x2e>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d50:	f04f 0100 	mov.w	r1, #0
 8008d54:	bf0c      	ite	eq
 8008d56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d5a:	2340      	movne	r3, #64	; 0x40
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	6031      	str	r1, [r6, #0]
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	b016      	add	sp, #88	; 0x58
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
 8008d66:	466a      	mov	r2, sp
 8008d68:	f000 f848 	bl	8008dfc <_fstat_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dbec      	blt.n	8008d4a <__swhatbuf_r+0x12>
 8008d70:	9901      	ldr	r1, [sp, #4]
 8008d72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d7a:	4259      	negs	r1, r3
 8008d7c:	4159      	adcs	r1, r3
 8008d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d82:	e7eb      	b.n	8008d5c <__swhatbuf_r+0x24>

08008d84 <__smakebuf_r>:
 8008d84:	898b      	ldrh	r3, [r1, #12]
 8008d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d88:	079d      	lsls	r5, r3, #30
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	d507      	bpl.n	8008da0 <__smakebuf_r+0x1c>
 8008d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	6163      	str	r3, [r4, #20]
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	ab01      	add	r3, sp, #4
 8008da2:	466a      	mov	r2, sp
 8008da4:	f7ff ffc8 	bl	8008d38 <__swhatbuf_r>
 8008da8:	9900      	ldr	r1, [sp, #0]
 8008daa:	4605      	mov	r5, r0
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff fb0d 	bl	80083cc <_malloc_r>
 8008db2:	b948      	cbnz	r0, 8008dc8 <__smakebuf_r+0x44>
 8008db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db8:	059a      	lsls	r2, r3, #22
 8008dba:	d4ef      	bmi.n	8008d9c <__smakebuf_r+0x18>
 8008dbc:	f023 0303 	bic.w	r3, r3, #3
 8008dc0:	f043 0302 	orr.w	r3, r3, #2
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7e3      	b.n	8008d90 <__smakebuf_r+0xc>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	6163      	str	r3, [r4, #20]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	6120      	str	r0, [r4, #16]
 8008dda:	b15b      	cbz	r3, 8008df4 <__smakebuf_r+0x70>
 8008ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f81d 	bl	8008e20 <_isatty_r>
 8008de6:	b128      	cbz	r0, 8008df4 <__smakebuf_r+0x70>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	431d      	orrs	r5, r3
 8008df8:	81a5      	strh	r5, [r4, #12]
 8008dfa:	e7cf      	b.n	8008d9c <__smakebuf_r+0x18>

08008dfc <_fstat_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	; (8008e1c <_fstat_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7f8 fcc2 	bl	8001792 <_fstat>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_fstat_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_fstat_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20007d98 	.word	0x20007d98

08008e20 <_isatty_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d06      	ldr	r5, [pc, #24]	; (8008e3c <_isatty_r+0x1c>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	f7f8 fcc1 	bl	80017b2 <_isatty>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_isatty_r+0x1a>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_isatty_r+0x1a>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20007d98 	.word	0x20007d98

08008e40 <_sbrk_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	; (8008e5c <_sbrk_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f8 fcca 	bl	80017e4 <_sbrk>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_sbrk_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_sbrk_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20007d98 	.word	0x20007d98

08008e60 <__assert_func>:
 8008e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e62:	4614      	mov	r4, r2
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <__assert_func+0x2c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	68d8      	ldr	r0, [r3, #12]
 8008e6e:	b14c      	cbz	r4, 8008e84 <__assert_func+0x24>
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <__assert_func+0x30>)
 8008e72:	9100      	str	r1, [sp, #0]
 8008e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e78:	4906      	ldr	r1, [pc, #24]	; (8008e94 <__assert_func+0x34>)
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	f000 f844 	bl	8008f08 <fiprintf>
 8008e80:	f000 f854 	bl	8008f2c <abort>
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <__assert_func+0x38>)
 8008e86:	461c      	mov	r4, r3
 8008e88:	e7f3      	b.n	8008e72 <__assert_func+0x12>
 8008e8a:	bf00      	nop
 8008e8c:	2000006c 	.word	0x2000006c
 8008e90:	080094d6 	.word	0x080094d6
 8008e94:	080094e3 	.word	0x080094e3
 8008e98:	08009511 	.word	0x08009511

08008e9c <_calloc_r>:
 8008e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e9e:	fba1 2402 	umull	r2, r4, r1, r2
 8008ea2:	b94c      	cbnz	r4, 8008eb8 <_calloc_r+0x1c>
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	9201      	str	r2, [sp, #4]
 8008ea8:	f7ff fa90 	bl	80083cc <_malloc_r>
 8008eac:	9a01      	ldr	r2, [sp, #4]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b930      	cbnz	r0, 8008ec0 <_calloc_r+0x24>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	b003      	add	sp, #12
 8008eb6:	bd30      	pop	{r4, r5, pc}
 8008eb8:	220c      	movs	r2, #12
 8008eba:	6002      	str	r2, [r0, #0]
 8008ebc:	2500      	movs	r5, #0
 8008ebe:	e7f8      	b.n	8008eb2 <_calloc_r+0x16>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	f7fe fb09 	bl	80074d8 <memset>
 8008ec6:	e7f4      	b.n	8008eb2 <_calloc_r+0x16>

08008ec8 <__ascii_mbtowc>:
 8008ec8:	b082      	sub	sp, #8
 8008eca:	b901      	cbnz	r1, 8008ece <__ascii_mbtowc+0x6>
 8008ecc:	a901      	add	r1, sp, #4
 8008ece:	b142      	cbz	r2, 8008ee2 <__ascii_mbtowc+0x1a>
 8008ed0:	b14b      	cbz	r3, 8008ee6 <__ascii_mbtowc+0x1e>
 8008ed2:	7813      	ldrb	r3, [r2, #0]
 8008ed4:	600b      	str	r3, [r1, #0]
 8008ed6:	7812      	ldrb	r2, [r2, #0]
 8008ed8:	1e10      	subs	r0, r2, #0
 8008eda:	bf18      	it	ne
 8008edc:	2001      	movne	r0, #1
 8008ede:	b002      	add	sp, #8
 8008ee0:	4770      	bx	lr
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	e7fb      	b.n	8008ede <__ascii_mbtowc+0x16>
 8008ee6:	f06f 0001 	mvn.w	r0, #1
 8008eea:	e7f8      	b.n	8008ede <__ascii_mbtowc+0x16>

08008eec <__ascii_wctomb>:
 8008eec:	b149      	cbz	r1, 8008f02 <__ascii_wctomb+0x16>
 8008eee:	2aff      	cmp	r2, #255	; 0xff
 8008ef0:	bf85      	ittet	hi
 8008ef2:	238a      	movhi	r3, #138	; 0x8a
 8008ef4:	6003      	strhi	r3, [r0, #0]
 8008ef6:	700a      	strbls	r2, [r1, #0]
 8008ef8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008efc:	bf98      	it	ls
 8008efe:	2001      	movls	r0, #1
 8008f00:	4770      	bx	lr
 8008f02:	4608      	mov	r0, r1
 8008f04:	4770      	bx	lr
	...

08008f08 <fiprintf>:
 8008f08:	b40e      	push	{r1, r2, r3}
 8008f0a:	b503      	push	{r0, r1, lr}
 8008f0c:	4601      	mov	r1, r0
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	4805      	ldr	r0, [pc, #20]	; (8008f28 <fiprintf+0x20>)
 8008f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f16:	6800      	ldr	r0, [r0, #0]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	f000 f837 	bl	8008f8c <_vfiprintf_r>
 8008f1e:	b002      	add	sp, #8
 8008f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f24:	b003      	add	sp, #12
 8008f26:	4770      	bx	lr
 8008f28:	2000006c 	.word	0x2000006c

08008f2c <abort>:
 8008f2c:	b508      	push	{r3, lr}
 8008f2e:	2006      	movs	r0, #6
 8008f30:	f000 f96e 	bl	8009210 <raise>
 8008f34:	2001      	movs	r0, #1
 8008f36:	f7f8 fbf9 	bl	800172c <_exit>

08008f3a <__sfputc_r>:
 8008f3a:	6893      	ldr	r3, [r2, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	b410      	push	{r4}
 8008f42:	6093      	str	r3, [r2, #8]
 8008f44:	da08      	bge.n	8008f58 <__sfputc_r+0x1e>
 8008f46:	6994      	ldr	r4, [r2, #24]
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	db01      	blt.n	8008f50 <__sfputc_r+0x16>
 8008f4c:	290a      	cmp	r1, #10
 8008f4e:	d103      	bne.n	8008f58 <__sfputc_r+0x1e>
 8008f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f54:	f7fe ba2b 	b.w	80073ae <__swbuf_r>
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	1c58      	adds	r0, r3, #1
 8008f5c:	6010      	str	r0, [r2, #0]
 8008f5e:	7019      	strb	r1, [r3, #0]
 8008f60:	4608      	mov	r0, r1
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <__sfputs_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	4614      	mov	r4, r2
 8008f70:	18d5      	adds	r5, r2, r3
 8008f72:	42ac      	cmp	r4, r5
 8008f74:	d101      	bne.n	8008f7a <__sfputs_r+0x12>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e007      	b.n	8008f8a <__sfputs_r+0x22>
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7ff ffda 	bl	8008f3a <__sfputc_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d1f3      	bne.n	8008f72 <__sfputs_r+0xa>
 8008f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f8c <_vfiprintf_r>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	460d      	mov	r5, r1
 8008f92:	b09d      	sub	sp, #116	; 0x74
 8008f94:	4614      	mov	r4, r2
 8008f96:	4698      	mov	r8, r3
 8008f98:	4606      	mov	r6, r0
 8008f9a:	b118      	cbz	r0, 8008fa4 <_vfiprintf_r+0x18>
 8008f9c:	6a03      	ldr	r3, [r0, #32]
 8008f9e:	b90b      	cbnz	r3, 8008fa4 <_vfiprintf_r+0x18>
 8008fa0:	f7fe f930 	bl	8007204 <__sinit>
 8008fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa6:	07d9      	lsls	r1, r3, #31
 8008fa8:	d405      	bmi.n	8008fb6 <_vfiprintf_r+0x2a>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_vfiprintf_r+0x2a>
 8008fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fb2:	f7fe fb0d 	bl	80075d0 <__retarget_lock_acquire_recursive>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	071b      	lsls	r3, r3, #28
 8008fba:	d501      	bpl.n	8008fc0 <_vfiprintf_r+0x34>
 8008fbc:	692b      	ldr	r3, [r5, #16]
 8008fbe:	b99b      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x5c>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7fe fa30 	bl	8007428 <__swsetup_r>
 8008fc8:	b170      	cbz	r0, 8008fe8 <_vfiprintf_r+0x5c>
 8008fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fcc:	07dc      	lsls	r4, r3, #31
 8008fce:	d504      	bpl.n	8008fda <_vfiprintf_r+0x4e>
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	b01d      	add	sp, #116	; 0x74
 8008fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	0598      	lsls	r0, r3, #22
 8008fde:	d4f7      	bmi.n	8008fd0 <_vfiprintf_r+0x44>
 8008fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe2:	f7fe faf6 	bl	80075d2 <__retarget_lock_release_recursive>
 8008fe6:	e7f3      	b.n	8008fd0 <_vfiprintf_r+0x44>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9309      	str	r3, [sp, #36]	; 0x24
 8008fec:	2320      	movs	r3, #32
 8008fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff6:	2330      	movs	r3, #48	; 0x30
 8008ff8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091ac <_vfiprintf_r+0x220>
 8008ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009000:	f04f 0901 	mov.w	r9, #1
 8009004:	4623      	mov	r3, r4
 8009006:	469a      	mov	sl, r3
 8009008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900c:	b10a      	cbz	r2, 8009012 <_vfiprintf_r+0x86>
 800900e:	2a25      	cmp	r2, #37	; 0x25
 8009010:	d1f9      	bne.n	8009006 <_vfiprintf_r+0x7a>
 8009012:	ebba 0b04 	subs.w	fp, sl, r4
 8009016:	d00b      	beq.n	8009030 <_vfiprintf_r+0xa4>
 8009018:	465b      	mov	r3, fp
 800901a:	4622      	mov	r2, r4
 800901c:	4629      	mov	r1, r5
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ffa2 	bl	8008f68 <__sfputs_r>
 8009024:	3001      	adds	r0, #1
 8009026:	f000 80a9 	beq.w	800917c <_vfiprintf_r+0x1f0>
 800902a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902c:	445a      	add	r2, fp
 800902e:	9209      	str	r2, [sp, #36]	; 0x24
 8009030:	f89a 3000 	ldrb.w	r3, [sl]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80a1 	beq.w	800917c <_vfiprintf_r+0x1f0>
 800903a:	2300      	movs	r3, #0
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009044:	f10a 0a01 	add.w	sl, sl, #1
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009050:	931a      	str	r3, [sp, #104]	; 0x68
 8009052:	4654      	mov	r4, sl
 8009054:	2205      	movs	r2, #5
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	4854      	ldr	r0, [pc, #336]	; (80091ac <_vfiprintf_r+0x220>)
 800905c:	f7f7 f8b8 	bl	80001d0 <memchr>
 8009060:	9a04      	ldr	r2, [sp, #16]
 8009062:	b9d8      	cbnz	r0, 800909c <_vfiprintf_r+0x110>
 8009064:	06d1      	lsls	r1, r2, #27
 8009066:	bf44      	itt	mi
 8009068:	2320      	movmi	r3, #32
 800906a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906e:	0713      	lsls	r3, r2, #28
 8009070:	bf44      	itt	mi
 8009072:	232b      	movmi	r3, #43	; 0x2b
 8009074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009078:	f89a 3000 	ldrb.w	r3, [sl]
 800907c:	2b2a      	cmp	r3, #42	; 0x2a
 800907e:	d015      	beq.n	80090ac <_vfiprintf_r+0x120>
 8009080:	9a07      	ldr	r2, [sp, #28]
 8009082:	4654      	mov	r4, sl
 8009084:	2000      	movs	r0, #0
 8009086:	f04f 0c0a 	mov.w	ip, #10
 800908a:	4621      	mov	r1, r4
 800908c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009090:	3b30      	subs	r3, #48	; 0x30
 8009092:	2b09      	cmp	r3, #9
 8009094:	d94d      	bls.n	8009132 <_vfiprintf_r+0x1a6>
 8009096:	b1b0      	cbz	r0, 80090c6 <_vfiprintf_r+0x13a>
 8009098:	9207      	str	r2, [sp, #28]
 800909a:	e014      	b.n	80090c6 <_vfiprintf_r+0x13a>
 800909c:	eba0 0308 	sub.w	r3, r0, r8
 80090a0:	fa09 f303 	lsl.w	r3, r9, r3
 80090a4:	4313      	orrs	r3, r2
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	46a2      	mov	sl, r4
 80090aa:	e7d2      	b.n	8009052 <_vfiprintf_r+0xc6>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	1d19      	adds	r1, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	9103      	str	r1, [sp, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfbb      	ittet	lt
 80090b8:	425b      	neglt	r3, r3
 80090ba:	f042 0202 	orrlt.w	r2, r2, #2
 80090be:	9307      	strge	r3, [sp, #28]
 80090c0:	9307      	strlt	r3, [sp, #28]
 80090c2:	bfb8      	it	lt
 80090c4:	9204      	strlt	r2, [sp, #16]
 80090c6:	7823      	ldrb	r3, [r4, #0]
 80090c8:	2b2e      	cmp	r3, #46	; 0x2e
 80090ca:	d10c      	bne.n	80090e6 <_vfiprintf_r+0x15a>
 80090cc:	7863      	ldrb	r3, [r4, #1]
 80090ce:	2b2a      	cmp	r3, #42	; 0x2a
 80090d0:	d134      	bne.n	800913c <_vfiprintf_r+0x1b0>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	1d1a      	adds	r2, r3, #4
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	9203      	str	r2, [sp, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfb8      	it	lt
 80090de:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e2:	3402      	adds	r4, #2
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091bc <_vfiprintf_r+0x230>
 80090ea:	7821      	ldrb	r1, [r4, #0]
 80090ec:	2203      	movs	r2, #3
 80090ee:	4650      	mov	r0, sl
 80090f0:	f7f7 f86e 	bl	80001d0 <memchr>
 80090f4:	b138      	cbz	r0, 8009106 <_vfiprintf_r+0x17a>
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	eba0 000a 	sub.w	r0, r0, sl
 80090fc:	2240      	movs	r2, #64	; 0x40
 80090fe:	4082      	lsls	r2, r0
 8009100:	4313      	orrs	r3, r2
 8009102:	3401      	adds	r4, #1
 8009104:	9304      	str	r3, [sp, #16]
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	4829      	ldr	r0, [pc, #164]	; (80091b0 <_vfiprintf_r+0x224>)
 800910c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009110:	2206      	movs	r2, #6
 8009112:	f7f7 f85d 	bl	80001d0 <memchr>
 8009116:	2800      	cmp	r0, #0
 8009118:	d03f      	beq.n	800919a <_vfiprintf_r+0x20e>
 800911a:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <_vfiprintf_r+0x228>)
 800911c:	bb1b      	cbnz	r3, 8009166 <_vfiprintf_r+0x1da>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	3307      	adds	r3, #7
 8009122:	f023 0307 	bic.w	r3, r3, #7
 8009126:	3308      	adds	r3, #8
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912c:	443b      	add	r3, r7
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	e768      	b.n	8009004 <_vfiprintf_r+0x78>
 8009132:	fb0c 3202 	mla	r2, ip, r2, r3
 8009136:	460c      	mov	r4, r1
 8009138:	2001      	movs	r0, #1
 800913a:	e7a6      	b.n	800908a <_vfiprintf_r+0xfe>
 800913c:	2300      	movs	r3, #0
 800913e:	3401      	adds	r4, #1
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	4619      	mov	r1, r3
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4620      	mov	r0, r4
 800914a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914e:	3a30      	subs	r2, #48	; 0x30
 8009150:	2a09      	cmp	r2, #9
 8009152:	d903      	bls.n	800915c <_vfiprintf_r+0x1d0>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0c6      	beq.n	80090e6 <_vfiprintf_r+0x15a>
 8009158:	9105      	str	r1, [sp, #20]
 800915a:	e7c4      	b.n	80090e6 <_vfiprintf_r+0x15a>
 800915c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009160:	4604      	mov	r4, r0
 8009162:	2301      	movs	r3, #1
 8009164:	e7f0      	b.n	8009148 <_vfiprintf_r+0x1bc>
 8009166:	ab03      	add	r3, sp, #12
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	462a      	mov	r2, r5
 800916c:	4b12      	ldr	r3, [pc, #72]	; (80091b8 <_vfiprintf_r+0x22c>)
 800916e:	a904      	add	r1, sp, #16
 8009170:	4630      	mov	r0, r6
 8009172:	f7fd fc07 	bl	8006984 <_printf_float>
 8009176:	4607      	mov	r7, r0
 8009178:	1c78      	adds	r0, r7, #1
 800917a:	d1d6      	bne.n	800912a <_vfiprintf_r+0x19e>
 800917c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917e:	07d9      	lsls	r1, r3, #31
 8009180:	d405      	bmi.n	800918e <_vfiprintf_r+0x202>
 8009182:	89ab      	ldrh	r3, [r5, #12]
 8009184:	059a      	lsls	r2, r3, #22
 8009186:	d402      	bmi.n	800918e <_vfiprintf_r+0x202>
 8009188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800918a:	f7fe fa22 	bl	80075d2 <__retarget_lock_release_recursive>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	065b      	lsls	r3, r3, #25
 8009192:	f53f af1d 	bmi.w	8008fd0 <_vfiprintf_r+0x44>
 8009196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009198:	e71c      	b.n	8008fd4 <_vfiprintf_r+0x48>
 800919a:	ab03      	add	r3, sp, #12
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	462a      	mov	r2, r5
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <_vfiprintf_r+0x22c>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7fd fe91 	bl	8006ecc <_printf_i>
 80091aa:	e7e4      	b.n	8009176 <_vfiprintf_r+0x1ea>
 80091ac:	08009613 	.word	0x08009613
 80091b0:	0800961d 	.word	0x0800961d
 80091b4:	08006985 	.word	0x08006985
 80091b8:	08008f69 	.word	0x08008f69
 80091bc:	08009619 	.word	0x08009619

080091c0 <_raise_r>:
 80091c0:	291f      	cmp	r1, #31
 80091c2:	b538      	push	{r3, r4, r5, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	d904      	bls.n	80091d4 <_raise_r+0x14>
 80091ca:	2316      	movs	r3, #22
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091d6:	b112      	cbz	r2, 80091de <_raise_r+0x1e>
 80091d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091dc:	b94b      	cbnz	r3, 80091f2 <_raise_r+0x32>
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f830 	bl	8009244 <_getpid_r>
 80091e4:	462a      	mov	r2, r5
 80091e6:	4601      	mov	r1, r0
 80091e8:	4620      	mov	r0, r4
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f000 b817 	b.w	8009220 <_kill_r>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d00a      	beq.n	800920c <_raise_r+0x4c>
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	d103      	bne.n	8009202 <_raise_r+0x42>
 80091fa:	2316      	movs	r3, #22
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	2001      	movs	r0, #1
 8009200:	e7e7      	b.n	80091d2 <_raise_r+0x12>
 8009202:	2400      	movs	r4, #0
 8009204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009208:	4628      	mov	r0, r5
 800920a:	4798      	blx	r3
 800920c:	2000      	movs	r0, #0
 800920e:	e7e0      	b.n	80091d2 <_raise_r+0x12>

08009210 <raise>:
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <raise+0xc>)
 8009212:	4601      	mov	r1, r0
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f7ff bfd3 	b.w	80091c0 <_raise_r>
 800921a:	bf00      	nop
 800921c:	2000006c 	.word	0x2000006c

08009220 <_kill_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	; (8009240 <_kill_r+0x20>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f7f8 fa6d 	bl	800170c <_kill>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d102      	bne.n	800923c <_kill_r+0x1c>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b103      	cbz	r3, 800923c <_kill_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	20007d98 	.word	0x20007d98

08009244 <_getpid_r>:
 8009244:	f7f8 ba5a 	b.w	80016fc <_getpid>

08009248 <_init>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr

08009254 <_fini>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr
